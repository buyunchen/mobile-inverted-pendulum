###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.2.6274/W32 for ARM      16/Mar/2015  15:47:49 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\ChenBuyun\Desktop\CBY_K60\lib\LPLD\HW\HW_ENET.c #
#    Command line =  C:\Users\ChenBuyun\Desktop\CBY_K60\lib\LPLD\HW\HW_ENET.c #
#                     -D LPLD_K60 -lCN "C:\Users\ChenBuyun\Desktop\CBY_K60\pr #
#                    oject\(DMA PDB ADC)LPLD_DmaPdbADCx4\iar\RAM\List\" -lB   #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\List\" -o                   #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\Obj\" --no_cse --no_unroll  #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\iar                      #
#                    systems\arm\INC\c\DLib_Config_Normal.h" -I               #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\app\" -I                     #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\CPU\" -I           #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\common\" -I        #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\" -I          #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\HW\" -I       #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\DEV\" -I      #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Ports\"    #
#                    -I "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB  #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Source\"   #
#                    -I "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB  #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\" -I         #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\option\" -I  #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\common\" -I    #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\driver\" -I    #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\descriptor\"   #
#                    -I "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB  #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\class\" -Ol    #
#                    -I "E:\iar systems\arm\CMSIS\Include\" -D ARM_MATH_CM4   #
#    List file    =  C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB      #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\List\HW_ENET.lst            #
#    Object file  =  C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB      #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\Obj\HW_ENET.o               #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\ChenBuyun\Desktop\CBY_K60\lib\LPLD\HW\HW_ENET.c
      1          /**
      2           * @file HW_ENET.c
      3           * @version 3.01[By LPLD]
      4           * @date 2013-10-21
      5           * @brief ENET底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable14  ;; 0xe000e100
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \   static __absolute uint8 xENETTxDescriptors_unaligned[24U]
   \                     xENETTxDescriptors_unaligned:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
   \   static __absolute uint8 xENETRxDescriptors_unaligned[80U]
   \                     xENETRxDescriptors_unaligned:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
   \   static __absolute uint8 ucENETRxBuffers[2064]
   \                     ucENETRxBuffers:
   \   00000000                      DS8 2064

   \                                 In section .bss, align 4
   \   static __absolute ENET_NbufTypeDef *xENETTxDescriptors
   \                     xENETTxDescriptors:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute ENET_NbufTypeDef *xENETRxDescriptors
   \                     xENETRxDescriptors:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute uint32 uxNextRxBuffer
   \                     uxNextRxBuffer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute uint32 uxNextTxBuffer
   \                     uxNextTxBuffer:
   \   00000000                      DS8 4
     23          #include "HW_ENET.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          ENET_ISR_CALLBACK ENET_ISR[4]={NULL, NULL, NULL, NULL};
   \                     ENET_ISR:
   \   00000000                      DS8 16
     27          
     28          //内部函数声明
     29          static void LPLD_ENET_BDInit( void );
     30          static void LPLD_ENET_Delay(uint32 time);
     31          
     32          
     33          /*******************************************************************
     34           *
     35           *                ENET模块函数
     36           *
     37          *******************************************************************/
     38          
     39          /*
     40           * LPLD_ENET_Init
     41           * ENET模块初始化，包括PHY收发器初始化，MAC初始化，BD初始化
     42           * 
     43           * 参数:
     44           *    enet_init_struct--ENET初始化结构体，
     45           *                        具体定义见ENET_InitTypeDef
     46           *
     47           * 输出:
     48           *    无
     49           */

   \                                 In section .text, align 4, keep-with-next
     50          void LPLD_ENET_Init(ENET_InitTypeDef enet_init_struct)
     51          {
   \                     LPLD_ENET_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB580             PUSH     {R7,LR}
     52           
     53            uint16 usData;
     54           
     55            //使能ENET时钟
     56            SIM->SCGC2 |= SIM_SCGC2_ENET_MASK;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x4004802c
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_1  ;; 0x4004802c
   \   00000012   0x6008             STR      R0,[R1, #+0]
     57          
     58            //允许并发访问MPU控制器
     59            MPU->CESR = 0;         
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable14_2  ;; 0x4000d000
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
     60                  
     61            //缓冲区描述符初始化
     62            LPLD_ENET_BDInit();
   \   0000001C   0x.... 0x....      BL       LPLD_ENET_BDInit
     63            
     64            //复位ENET
     65            ENET->ECR = ENET_ECR_RESET_MASK;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x400c0024
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x6001             STR      R1,[R0, #+0]
     66          
     67            //等待至少8个时钟周期
     68            for( usData = 0; usData < 10; usData++ )
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000002E   0xE005             B.N      ??LPLD_ENET_Init_0
     69            {
     70              asm( "NOP" );
   \                     ??LPLD_ENET_Init_1: (+1)
   \   00000030   0xBF00             NOP
     71            }
   \   00000032   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LPLD_ENET_Init_0: (+1)
   \   0000003C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000040   0x280A             CMP      R0,#+10
   \   00000042   0xDBF5             BLT.N    ??LPLD_ENET_Init_1
     72              
     73            //初始化MII接口
     74            LPLD_ENET_MiiInit(g_bus_clock/1000000/*MHz*/);       
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable14_4
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable14_5  ;; 0xf4240
   \   0000004E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000052   0x.... 0x....      BL       LPLD_ENET_MiiInit
     75                  
     76            //使能中断并设置优先级
     77            //set_irq_priority (76, 6);
     78            enable_irq(ENET_Transmit_IRQn);        //ENET发送中断
   \   00000056   0x204C             MOVS     R0,#+76
   \   00000058   0x.... 0x....      BL       NVIC_EnableIRQ
     79            //set_irq_priority (77, 6);
     80            enable_irq(ENET_Receive_IRQn);         //ENET接收中断
   \   0000005C   0x204D             MOVS     R0,#+77
   \   0000005E   0x.... 0x....      BL       NVIC_EnableIRQ
     81            //set_irq_priority (78, 6);
     82            enable_irq(ENET_Error_IRQn);           //ENET错误及其他中断
   \   00000062   0x204E             MOVS     R0,#+78
   \   00000064   0x.... 0x....      BL       NVIC_EnableIRQ
     83            
     84            if(enet_init_struct.ENET_TxIsr != NULL)
   \   00000068   0x9803             LDR      R0,[SP, #+12]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD003             BEQ.N    ??LPLD_ENET_Init_2
     85            {
     86              ENET_ISR[ENET_TXF_ISR] = enet_init_struct.ENET_TxIsr;
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000072   0x9903             LDR      R1,[SP, #+12]
   \   00000074   0x6041             STR      R1,[R0, #+4]
     87            }
     88            if(enet_init_struct.ENET_RxIsr != NULL)
   \                     ??LPLD_ENET_Init_2: (+1)
   \   00000076   0x9804             LDR      R0,[SP, #+16]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD003             BEQ.N    ??LPLD_ENET_Init_3
     89            {
     90              ENET_ISR[ENET_RXF_ISR] = enet_init_struct.ENET_RxIsr;
   \   0000007C   0x9804             LDR      R0,[SP, #+16]
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable14_6
   \   00000082   0x6008             STR      R0,[R1, #+0]
     91            }
     92            if(enet_init_struct.ENET_1588Isr != NULL)
   \                     ??LPLD_ENET_Init_3: (+1)
   \   00000084   0x9805             LDR      R0,[SP, #+20]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD003             BEQ.N    ??LPLD_ENET_Init_4
     93            {
     94              ENET_ISR[ENET_1588_ISR] = enet_init_struct.ENET_1588Isr;
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   0000008E   0x9905             LDR      R1,[SP, #+20]
   \   00000090   0x6081             STR      R1,[R0, #+8]
     95            }
     96            if(enet_init_struct.ENET_ErrIsr != NULL)
   \                     ??LPLD_ENET_Init_4: (+1)
   \   00000092   0x9806             LDR      R0,[SP, #+24]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD003             BEQ.N    ??LPLD_ENET_Init_5
     97            {
     98              ENET_ISR[ENET_ERR_ISR] = enet_init_struct.ENET_ErrIsr;
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   0000009C   0x9906             LDR      R1,[SP, #+24]
   \   0000009E   0x60C1             STR      R1,[R0, #+12]
     99            }
    100          
    101            //使能GPIO引脚复用功能
    102            PORTB->PCR[0]  = PORT_PCR_MUX(4);  //GPIO;//RMII0_MDIO/MII0_MDIO
   \                     ??LPLD_ENET_Init_5: (+1)
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x4004a000
   \   000000A4   0xF44F 0x6180      MOV      R1,#+1024
   \   000000A8   0x6001             STR      R1,[R0, #+0]
    103            PORTB->PCR[1]  = PORT_PCR_MUX(4);  //GPIO;//RMII0_MDC/MII0_MDC    
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable14_8  ;; 0x4004a004
   \   000000AE   0xF44F 0x6180      MOV      R1,#+1024
   \   000000B2   0x6001             STR      R1,[R0, #+0]
    104            PORTA->PCR[14] = PORT_PCR_MUX(4);  //RMII0_CRS_DV/MII0_RXDV
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable14_9  ;; 0x40049038
   \   000000B8   0xF44F 0x6180      MOV      R1,#+1024
   \   000000BC   0x6001             STR      R1,[R0, #+0]
    105            PORTA->PCR[12] = PORT_PCR_MUX(4);  //RMII0_RXD1/MII0_RXD1
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable14_10  ;; 0x40049030
   \   000000C2   0xF44F 0x6180      MOV      R1,#+1024
   \   000000C6   0x6001             STR      R1,[R0, #+0]
    106            PORTA->PCR[13] = PORT_PCR_MUX(4);  //RMII0_RXD0/MII0_RXD0
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable14_11  ;; 0x40049034
   \   000000CC   0xF44F 0x6180      MOV      R1,#+1024
   \   000000D0   0x6001             STR      R1,[R0, #+0]
    107            PORTA->PCR[15] = PORT_PCR_MUX(4);  //RMII0_TXEN/MII0_TXEN
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable14_12  ;; 0x4004903c
   \   000000D6   0xF44F 0x6180      MOV      R1,#+1024
   \   000000DA   0x6001             STR      R1,[R0, #+0]
    108            PORTA->PCR[16] = PORT_PCR_MUX(4);  //RMII0_TXD0/MII0_TXD0
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable14_13  ;; 0x40049040
   \   000000E0   0xF44F 0x6180      MOV      R1,#+1024
   \   000000E4   0x6001             STR      R1,[R0, #+0]
    109            PORTA->PCR[17] = PORT_PCR_MUX(4);  //RMII0_TXD1/MII0_TXD1
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable14_14  ;; 0x40049044
   \   000000EA   0xF44F 0x6180      MOV      R1,#+1024
   \   000000EE   0x6001             STR      R1,[R0, #+0]
    110            
    111              
    112            //等待PHY收发器复位完成
    113            do
    114            {
    115              LPLD_ENET_Delay( ENET_LINK_DELAY );
   \                     ??LPLD_ENET_Init_6: (+1)
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       LPLD_ENET_Delay
    116              usData = 0xffff;
   \   000000F6   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000FA   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    117              LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYIDR1, &usData );     
   \   000000FE   0xAA00             ADD      R2,SP,#+0
   \   00000100   0x2102             MOVS     R1,#+2
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      BL       LPLD_ENET_MiiRead
    118            } while( usData == 0xffff );
   \   00000108   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000010C   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000110   0x4288             CMP      R0,R1
   \   00000112   0xD0ED             BEQ.N    ??LPLD_ENET_Init_6
    119          
    120          #ifdef ENET_PRINT_PHY_INFO
    121            printf("PHY_PHYIDR1=0x%X\r\n",usData);
   \   00000114   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable14_15
   \   0000011C   0x.... 0x....      BL       printf
    122            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYIDR2, &usData );
   \   00000120   0xAA00             ADD      R2,SP,#+0
   \   00000122   0x2103             MOVS     R1,#+3
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x.... 0x....      BL       LPLD_ENET_MiiRead
    123            printf("PHY_PHYIDR2=0x%X\r\n",usData); 
   \   0000012A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable14_16
   \   00000132   0x.... 0x....      BL       printf
    124            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_ANLPAR, &usData );
   \   00000136   0xAA00             ADD      R2,SP,#+0
   \   00000138   0x2105             MOVS     R1,#+5
   \   0000013A   0x2001             MOVS     R0,#+1
   \   0000013C   0x.... 0x....      BL       LPLD_ENET_MiiRead
    125            printf("PHY_ANLPAR=0x%X\r\n",usData);
   \   00000140   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable14_17
   \   00000148   0x.... 0x....      BL       printf
    126            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_ANLPARNP, &usData );
   \   0000014C   0xAA00             ADD      R2,SP,#+0
   \   0000014E   0x2105             MOVS     R1,#+5
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x.... 0x....      BL       LPLD_ENET_MiiRead
    127            printf("PHY_ANLPARNP=0x%X\r\n",usData);
   \   00000156   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable14_18
   \   0000015E   0x.... 0x....      BL       printf
    128            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYSTS, &usData );
   \   00000162   0xAA00             ADD      R2,SP,#+0
   \   00000164   0x2110             MOVS     R1,#+16
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0x.... 0x....      BL       LPLD_ENET_MiiRead
    129            printf("PHY_PHYSTS=0x%X\r\n",usData);
   \   0000016C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000170   0x.... 0x....      LDR.W    R0,??DataTable14_19
   \   00000174   0x.... 0x....      BL       printf
    130            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_MICR, &usData );
   \   00000178   0xAA00             ADD      R2,SP,#+0
   \   0000017A   0x2111             MOVS     R1,#+17
   \   0000017C   0x2001             MOVS     R0,#+1
   \   0000017E   0x.... 0x....      BL       LPLD_ENET_MiiRead
    131            printf("PHY_MICR=0x%X\r\n",usData);
   \   00000182   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable14_20
   \   0000018A   0x.... 0x....      BL       printf
    132            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_MISR, &usData );
   \   0000018E   0xAA00             ADD      R2,SP,#+0
   \   00000190   0x2112             MOVS     R1,#+18
   \   00000192   0x2001             MOVS     R0,#+1
   \   00000194   0x.... 0x....      BL       LPLD_ENET_MiiRead
    133            printf("PHY_MISR=0x%X\r\n",usData);
   \   00000198   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000019C   0x.... 0x....      LDR.W    R0,??DataTable14_21
   \   000001A0   0x.... 0x....      BL       printf
    134          #endif 
    135            
    136            //开始自动协商
    137            LPLD_ENET_MiiWrite(CFG_PHY_ADDRESS, PHY_BMCR, ( PHY_BMCR_AN_RESTART | PHY_BMCR_AN_ENABLE ) );
   \   000001A4   0xF44F 0x5290      MOV      R2,#+4608
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x2001             MOVS     R0,#+1
   \   000001AC   0x.... 0x....      BL       LPLD_ENET_MiiWrite
    138          
    139          #ifdef ENET_PRINT_PHY_INFO
    140            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_BMCR, &usData );
   \   000001B0   0xAA00             ADD      R2,SP,#+0
   \   000001B2   0x2100             MOVS     R1,#+0
   \   000001B4   0x2001             MOVS     R0,#+1
   \   000001B6   0x.... 0x....      BL       LPLD_ENET_MiiRead
    141            printf("PHY_BMCR=0x%X\r\n",usData);
   \   000001BA   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001BE   0x.... 0x....      LDR.W    R0,??DataTable14_22
   \   000001C2   0x.... 0x....      BL       printf
    142          #endif 
    143            
    144            //等待自动协商完成
    145            do
    146            {
    147              LPLD_ENET_Delay( ENET_LINK_DELAY );
   \                     ??LPLD_ENET_Init_7: (+1)
   \   000001C6   0x2001             MOVS     R0,#+1
   \   000001C8   0x.... 0x....      BL       LPLD_ENET_Delay
    148              LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_BMSR, &usData );
   \   000001CC   0xAA00             ADD      R2,SP,#+0
   \   000001CE   0x2101             MOVS     R1,#+1
   \   000001D0   0x2001             MOVS     R0,#+1
   \   000001D2   0x.... 0x....      BL       LPLD_ENET_MiiRead
    149          
    150            } while( !( usData & PHY_BMSR_AN_COMPLETE ) );
   \   000001D6   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000001DA   0x0680             LSLS     R0,R0,#+26
   \   000001DC   0xD5F3             BPL.N    ??LPLD_ENET_Init_7
    151          
    152          #ifdef ENET_PRINT_PHY_INFO
    153              printf("PHY_BMSR=0x%X\r\n",usData);
   \   000001DE   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable14_23
   \   000001E6   0x.... 0x....      BL       printf
    154          #endif 
    155              
    156            //根据协商结果设置ENET模块
    157            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_STATUS, &usData );  
   \   000001EA   0xAA00             ADD      R2,SP,#+0
   \   000001EC   0x2110             MOVS     R1,#+16
   \   000001EE   0x2001             MOVS     R0,#+1
   \   000001F0   0x.... 0x....      BL       LPLD_ENET_MiiRead
    158          
    159          #ifdef ENET_PRINT_PHY_INFO
    160            printf("PHY_STATUS=0x%X\r\n",usData);
   \   000001F4   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   000001F8   0x.... 0x....      LDR.W    R0,??DataTable14_24
   \   000001FC   0x.... 0x....      BL       printf
    161          #endif 
    162            
    163            //清除单独和组地址哈希寄存器
    164            ENET->IALR = 0;
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable14_25  ;; 0x400c011c
   \   00000204   0x2100             MOVS     R1,#+0
   \   00000206   0x6001             STR      R1,[R0, #+0]
    165            ENET->IAUR = 0;
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable14_26  ;; 0x400c0118
   \   0000020C   0x2100             MOVS     R1,#+0
   \   0000020E   0x6001             STR      R1,[R0, #+0]
    166            ENET->GALR = 0;
   \   00000210   0x.... 0x....      LDR.W    R0,??DataTable14_27  ;; 0x400c0124
   \   00000214   0x2100             MOVS     R1,#+0
   \   00000216   0x6001             STR      R1,[R0, #+0]
    167            ENET->GAUR = 0;
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable14_28  ;; 0x400c0120
   \   0000021C   0x2100             MOVS     R1,#+0
   \   0000021E   0x6001             STR      R1,[R0, #+0]
    168            
    169            //设置ENET模块MAC地址
    170            LPLD_ENET_SetAddress(enet_init_struct.ENET_MacAddress);
   \   00000220   0x9802             LDR      R0,[SP, #+8]
   \   00000222   0x.... 0x....      BL       LPLD_ENET_SetAddress
    171              
    172            //设置接收控制寄存器，最大长度、RMII模式、接收CRC校验等
    173            ENET->RCR = ENET_RCR_MAX_FL(CFG_ENET_MAX_PACKET_SIZE) | ENET_RCR_MII_MODE_MASK | ENET_RCR_CRCFWD_MASK | ENET_RCR_RMII_MODE_MASK;
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable14_29  ;; 0x400c0084
   \   0000022A   0x.... 0x....      LDR.W    R1,??DataTable14_30  ;; 0x5f04104
   \   0000022E   0x6001             STR      R1,[R0, #+0]
    174          
    175            //清除发送接收控制
    176            ENET->TCR = 0;
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable14_31  ;; 0x400c00c4
   \   00000234   0x2100             MOVS     R1,#+0
   \   00000236   0x6001             STR      R1,[R0, #+0]
    177                  
    178            //通讯方式设置
    179            if( usData & PHY_DUPLEX_STATUS )
   \   00000238   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000023C   0x0740             LSLS     R0,R0,#+29
   \   0000023E   0xD510             BPL.N    ??LPLD_ENET_Init_8
    180            {
    181              //全双工
    182              ENET->RCR &= (uint32)~ENET_RCR_DRT_MASK;
   \   00000240   0x.... 0x....      LDR.W    R0,??DataTable14_29  ;; 0x400c0084
   \   00000244   0x6800             LDR      R0,[R0, #+0]
   \   00000246   0xF030 0x0002      BICS     R0,R0,#0x2
   \   0000024A   0x.... 0x....      LDR.W    R1,??DataTable14_29  ;; 0x400c0084
   \   0000024E   0x6008             STR      R0,[R1, #+0]
    183              ENET->TCR |= ENET_TCR_FDEN_MASK;
   \   00000250   0x.... 0x....      LDR.W    R0,??DataTable14_31  ;; 0x400c00c4
   \   00000254   0x6800             LDR      R0,[R0, #+0]
   \   00000256   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000025A   0x.... 0x....      LDR.W    R1,??DataTable14_31  ;; 0x400c00c4
   \   0000025E   0x6008             STR      R0,[R1, #+0]
   \   00000260   0xE00F             B.N      ??LPLD_ENET_Init_9
    184            }
    185            else
    186            {
    187              //半双工
    188              ENET->RCR |= ENET_RCR_DRT_MASK;
   \                     ??LPLD_ENET_Init_8: (+1)
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable14_29  ;; 0x400c0084
   \   00000266   0x6800             LDR      R0,[R0, #+0]
   \   00000268   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000026C   0x.... 0x....      LDR.W    R1,??DataTable14_29  ;; 0x400c0084
   \   00000270   0x6008             STR      R0,[R1, #+0]
    189              ENET->TCR &= (uint32)~ENET_TCR_FDEN_MASK;
   \   00000272   0x.... 0x....      LDR.W    R0,??DataTable14_31  ;; 0x400c00c4
   \   00000276   0x6800             LDR      R0,[R0, #+0]
   \   00000278   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000027C   0x.... 0x....      LDR.W    R1,??DataTable14_31  ;; 0x400c00c4
   \   00000280   0x6008             STR      R0,[R1, #+0]
    190            }
    191            
    192            //通信速率设置
    193            if( usData & PHY_SPEED_STATUS )
   \                     ??LPLD_ENET_Init_9: (+1)
   \   00000282   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000286   0x0780             LSLS     R0,R0,#+30
   \   00000288   0xD507             BPL.N    ??LPLD_ENET_Init_10
    194            {
    195              //10Mbps
    196              ENET->RCR |= ENET_RCR_RMII_10T_MASK;
   \   0000028A   0x.... 0x....      LDR.W    R0,??DataTable14_29  ;; 0x400c0084
   \   0000028E   0x6800             LDR      R0,[R0, #+0]
   \   00000290   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000294   0x.... 0x....      LDR.W    R1,??DataTable14_29  ;; 0x400c0084
   \   00000298   0x6008             STR      R0,[R1, #+0]
    197            }
    198          
    199            //使用非增强型缓冲区描述符
    200            ENET->ECR = 0;
   \                     ??LPLD_ENET_Init_10: (+1)
   \   0000029A   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x400c0024
   \   0000029E   0x2100             MOVS     R1,#+0
   \   000002A0   0x6001             STR      R1,[R0, #+0]
    201            
    202            
    203            //设置接收缓冲区长度
    204            ENET->MRBR = (unsigned short) CFG_ENET_RX_BUFFER_SIZE;
   \   000002A2   0x.... 0x....      LDR.W    R0,??DataTable14_32  ;; 0x400c0188
   \   000002A6   0xF44F 0x7180      MOV      R1,#+256
   \   000002AA   0x6001             STR      R1,[R0, #+0]
    205          
    206            //指向环形接收缓冲区描述符序列的头地址
    207            ENET->RDSR = ( uint32 ) &( xENETRxDescriptors[ 0 ] );
   \   000002AC   0x.... 0x....      LDR.W    R0,??DataTable14_33  ;; 0x400c0180
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable14_34
   \   000002B4   0x6809             LDR      R1,[R1, #+0]
   \   000002B6   0x6001             STR      R1,[R0, #+0]
    208          
    209            //指向环形发送缓冲区描述符序列的头地址
    210            ENET->TDSR = ( uint32 ) xENETTxDescriptors;
   \   000002B8   0x.... 0x....      LDR.W    R0,??DataTable14_35  ;; 0x400c0184
   \   000002BC   0x.... 0x....      LDR.W    R1,??DataTable14_36
   \   000002C0   0x6809             LDR      R1,[R1, #+0]
   \   000002C2   0x6001             STR      R1,[R0, #+0]
    211          
    212            //清除ENET中断事件
    213            ENET->EIR = ( uint32 ) -1;
   \   000002C4   0x.... 0x....      LDR.W    R0,??DataTable14_37  ;; 0x400c0004
   \   000002C8   0xF05F 0x31FF      MOVS     R1,#-1
   \   000002CC   0x6001             STR      R1,[R0, #+0]
    214          
    215            //使能中断
    216            ENET->EIMR = 0 
    217                      | ENET_EIMR_RXF_MASK  //接收中断
    218                      | ENET_EIMR_TXF_MASK  //发送中断
    219                      //ENET中断
    220                      | ENET_EIMR_UN_MASK | ENET_EIMR_RL_MASK | ENET_EIMR_LC_MASK | ENET_EIMR_BABT_MASK | ENET_EIMR_BABR_MASK | ENET_EIMR_EBERR_MASK
    221                      | ENET_EIMR_RXB_MASK
    222                      ;
   \   000002CE   0x.... 0x....      LDR.W    R0,??DataTable14_38  ;; 0x400c0008
   \   000002D2   0x.... 0x....      LDR.W    R1,??DataTable14_39  ;; 0x6b780000
   \   000002D6   0x6001             STR      R1,[R0, #+0]
    223          
    224            //使能ENET模块
    225            ENET->ECR |= ENET_ECR_ETHEREN_MASK;
   \   000002D8   0x.... 0x....      LDR.W    R0,??DataTable14_3  ;; 0x400c0024
   \   000002DC   0x6800             LDR      R0,[R0, #+0]
   \   000002DE   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000002E2   0x.... 0x....      LDR.W    R1,??DataTable14_3  ;; 0x400c0024
   \   000002E6   0x6008             STR      R0,[R1, #+0]
    226          
    227            //表明接收缓冲区为空
    228            ENET->RDAR = ENET_RDAR_RDAR_MASK;
   \   000002E8   0x.... 0x....      LDR.W    R0,??DataTable14_40  ;; 0x400c0010
   \   000002EC   0xF05F 0x7180      MOVS     R1,#+16777216
   \   000002F0   0x6001             STR      R1,[R0, #+0]
    229          }
   \   000002F2   0xBC01             POP      {R0}
   \   000002F4   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    230          
    231          
    232          /*
    233           * LPLD_ENET_SetIsr
    234           * ENET模块中断函数设置
    235           * 
    236           * 参数:
    237           *    type--中断类型
    238           *      |__ENET_RXF_ISR   -接收中断
    239           *      |__ENET_TXF_ISR   -发送中断
    240           *    isr_func--用户中断程序入口地址
    241           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    242           *
    243           * 输出:
    244           *    0--配置错误
    245           *    1--配置成功
    246           *
    247           */

   \                                 In section .text, align 2, keep-with-next
    248          uint8 LPLD_ENET_SetIsr(uint8 type, ENET_ISR_CALLBACK isr_func)
    249          {
    250            if(type>4)
   \                     LPLD_ENET_SetIsr: (+1)
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2805             CMP      R0,#+5
   \   00000004   0xDB01             BLT.N    ??LPLD_ENET_SetIsr_0
    251              return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE005             B.N      ??LPLD_ENET_SetIsr_1
    252            
    253            ENET_ISR[type] = isr_func;
   \                     ??LPLD_ENET_SetIsr_0: (+1)
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      LDR.W    R2,??DataTable14_6
   \   00000010   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
    254            return 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ENET_SetIsr_1: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    255          }
    256          
    257          
    258          /*
    259           * Eth_RX_IRQHandler
    260           * ENET接收中断底层入口函数
    261           * 
    262           * 用户无需修改，程序自动进入对应通道中断函数
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          void Eth_RX_IRQHandler(void)
    265          {   
   \                     Eth_RX_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    266            ENET->EIR |= ENET_EIMR_RXF_MASK; 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_37  ;; 0x400c0004
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable14_37  ;; 0x400c0004
   \   00000010   0x6008             STR      R0,[R1, #+0]
    267              
    268            //调用用户自定义中断服务
    269            if(ENET_ISR[ENET_RXF_ISR] != NULL)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD003             BEQ.N    ??Eth_RX_IRQHandler_0
    270            {
    271              ENET_ISR[ENET_RXF_ISR]();  
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x4780             BLX      R0
    272            }
    273          }
   \                     ??Eth_RX_IRQHandler_0: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    274          
    275          /*
    276           * Eth_TX_IRQHandler
    277           * ENET发送中断底层入口函数
    278           * 
    279           * 用户无需修改，程序自动进入对应通道中断函数
    280           */

   \                                 In section .text, align 2, keep-with-next
    281          void Eth_TX_IRQHandler(void)
    282          {  
   \                     Eth_TX_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    283            ENET->EIR |= ENET_EIMR_TXF_MASK; 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_37  ;; 0x400c0004
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable14_37  ;; 0x400c0004
   \   00000010   0x6008             STR      R0,[R1, #+0]
    284              
    285            //调用用户自定义中断服务
    286            if(ENET_ISR[ENET_TXF_ISR] != NULL)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD003             BEQ.N    ??Eth_TX_IRQHandler_0
    287            {
    288              ENET_ISR[ENET_TXF_ISR]();  
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0x4780             BLX      R0
    289            }
    290          }
   \                     ??Eth_TX_IRQHandler_0: (+1)
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    291          
    292          /*
    293           * Eth_IEEE1588_IRQHandler
    294           * IEEE1588中断底层入口函数
    295           * 
    296           * 用户无需修改，程序自动进入对应通道中断函数
    297           */

   \                                 In section .text, align 2, keep-with-next
    298          void Eth_IEEE1588_IRQHandler(void)
    299          {    
   \                     Eth_IEEE1588_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    300            //调用用户自定义中断服务
    301            if(ENET_ISR[ENET_1588_ISR] != NULL)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000006   0x6880             LDR      R0,[R0, #+8]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD003             BEQ.N    ??Eth_IEEE1588_IRQHandler_0
    302            {
    303              ENET_ISR[ENET_1588_ISR]();  
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x4780             BLX      R0
    304            }
    305          }
   \                     ??Eth_IEEE1588_IRQHandler_0: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    306          
    307          /*
    308           * Eth_Err_Misc_IRQHandler
    309           * 其他错误中断底层入口函数
    310           * 
    311           * 用户无需修改，程序自动进入对应通道中断函数
    312           */

   \                                 In section .text, align 2, keep-with-next
    313          void Eth_Err_Misc_IRQHandler(void)
    314          {  
   \                     Eth_Err_Misc_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    315            //调用用户自定义中断服务
    316            if(ENET_ISR[ENET_ERR_ISR] != NULL)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000006   0x68C0             LDR      R0,[R0, #+12]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD003             BEQ.N    ??Eth_Err_Misc_IRQHandler_0
    317            {
    318              ENET_ISR[ENET_ERR_ISR](); 
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable14_6
   \   00000010   0x68C0             LDR      R0,[R0, #+12]
   \   00000012   0x4780             BLX      R0
    319            } 
    320          }
   \                     ??Eth_Err_Misc_IRQHandler_0: (+1)
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    321          
    322          /*
    323           * LPLD_ENET_Delay
    324           * ENET模块内部延时函数
    325           * 
    326           * 参数:
    327           *    time--延迟大小
    328           *
    329           * 输出:
    330           *    无
    331           */

   \                                 In section .text, align 2, keep-with-next
    332          static void LPLD_ENET_Delay(uint32 time)
    333          {
    334            uint32 i = 0,j = 0;
   \                     LPLD_ENET_Delay: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x2200             MOVS     R2,#+0
    335            
    336            for(i = 0;i < time;i++)
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x0019             MOVS     R1,R3
   \   00000008   0xE005             B.N      ??LPLD_ENET_Delay_0
    337            {
    338              for(j = 0;j < 50000;j++);
   \                     ??LPLD_ENET_Delay_1: (+1)
   \   0000000A   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_ENET_Delay_2: (+1)
   \   0000000C   0xF24C 0x3350      MOVW     R3,#+50000
   \   00000010   0x429A             CMP      R2,R3
   \   00000012   0xD3FA             BCC.N    ??LPLD_ENET_Delay_1
   \   00000014   0x1C49             ADDS     R1,R1,#+1
   \                     ??LPLD_ENET_Delay_0: (+1)
   \   00000016   0x4281             CMP      R1,R0
   \   00000018   0xD201             BCS.N    ??LPLD_ENET_Delay_3
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0xE7F6             B.N      ??LPLD_ENET_Delay_2
    339            }
    340          }
   \                     ??LPLD_ENET_Delay_3: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
    341          
    342          
    343          /*
    344           * LPLD_ENET_BDInit
    345           * 缓冲区描述符初始化
    346           * 
    347           * 参数:
    348           *    无
    349           *
    350           * 输出:
    351           *    无
    352           */

   \                                 In section .text, align 2, keep-with-next
    353          static void LPLD_ENET_BDInit( void )
    354          {
    355            uint32 ux;
    356            uint8 *pcBufPointer;
    357            
    358            //寻找<发送描述符数组空间>中的16字节对齐的地址，即低四位为0的起始地址
    359            pcBufPointer = &( xENETTxDescriptors_unaligned[ 0 ] );
   \                     LPLD_ENET_BDInit: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable14_41
   \   00000004   0xE000             B.N      ??LPLD_ENET_BDInit_0
    360            while( ( ( uint32 ) pcBufPointer & 0x0fUL ) != 0 )
    361            {
    362              pcBufPointer++;
   \                     ??LPLD_ENET_BDInit_1: (+1)
   \   00000006   0x1C49             ADDS     R1,R1,#+1
    363            }
   \                     ??LPLD_ENET_BDInit_0: (+1)
   \   00000008   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD1FA             BNE.N    ??LPLD_ENET_BDInit_1
    364            xENETTxDescriptors = ( ENET_NbufTypeDef * ) pcBufPointer;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable14_36
   \   00000014   0x6001             STR      R1,[R0, #+0]
    365            
    366            //寻找<接收描述符数组空间>中的16字节对齐的地址
    367            pcBufPointer = &( xENETRxDescriptors_unaligned[ 0 ] );
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable14_42
   \   0000001A   0xE000             B.N      ??LPLD_ENET_BDInit_2
    368            while( ( ( uint32 ) pcBufPointer & 0x0fUL ) != 0 )
    369            {
    370              pcBufPointer++;
   \                     ??LPLD_ENET_BDInit_3: (+1)
   \   0000001C   0x1C49             ADDS     R1,R1,#+1
    371            }
   \                     ??LPLD_ENET_BDInit_2: (+1)
   \   0000001E   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1FA             BNE.N    ??LPLD_ENET_BDInit_3
    372            xENETRxDescriptors = ( ENET_NbufTypeDef * ) pcBufPointer;
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable14_34
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    373            
    374            //发送缓冲区描述符初始化
    375            for( ux = 0; ux < CFG_NUM_ENET_TX_BUFFERS; ux++ )
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xE014             B.N      ??LPLD_ENET_BDInit_4
    376            {
    377              xENETTxDescriptors[ ux ].status = 0;
   \                     ??LPLD_ENET_BDInit_5: (+1)
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable14_36
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xF821 0x2030      STRH     R2,[R1, R0, LSL #+3]
    378              xENETTxDescriptors[ ux ].data = 0;
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable14_36
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x604A             STR      R2,[R1, #+4]
    379              xENETTxDescriptors[ ux ].length = 0;
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable14_36
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xEB11 0x01C0      ADDS     R1,R1,R0, LSL #+3
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0x804A             STRH     R2,[R1, #+2]
    380            }
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_BDInit_4: (+1)
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD0E8             BEQ.N    ??LPLD_ENET_BDInit_5
    381            
    382            //寻找<接收缓冲区空间>中的16字节对齐的地址
    383            pcBufPointer = &( ucENETRxBuffers[ 0 ] );
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable14_43
   \   00000062   0xE000             B.N      ??LPLD_ENET_BDInit_6
    384            while( ( ( uint32 ) pcBufPointer & 0x0fUL ) != 0 )
    385            {
    386              pcBufPointer++;
   \                     ??LPLD_ENET_BDInit_7: (+1)
   \   00000064   0x1C49             ADDS     R1,R1,#+1
    387            }
   \                     ??LPLD_ENET_BDInit_6: (+1)
   \   00000066   0xF011 0x000F      ANDS     R0,R1,#0xF
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD1FA             BNE.N    ??LPLD_ENET_BDInit_7
    388            
    389            //接收缓冲区描述符初始化
    390            for( ux = 0; ux < CFG_NUM_ENET_RX_BUFFERS; ux++ )
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE013             B.N      ??LPLD_ENET_BDInit_8
    391            {
    392              xENETRxDescriptors[ ux ].status = RX_BD_E;
   \                     ??LPLD_ENET_BDInit_9: (+1)
   \   00000072   0x....             LDR.N    R2,??DataTable14_34
   \   00000074   0x6812             LDR      R2,[R2, #+0]
   \   00000076   0x2380             MOVS     R3,#+128
   \   00000078   0xF822 0x3030      STRH     R3,[R2, R0, LSL #+3]
    393              xENETRxDescriptors[ ux ].length = 0;
   \   0000007C   0x....             LDR.N    R2,??DataTable14_34
   \   0000007E   0x6812             LDR      R2,[R2, #+0]
   \   00000080   0xEB12 0x02C0      ADDS     R2,R2,R0, LSL #+3
   \   00000084   0x2300             MOVS     R3,#+0
   \   00000086   0x8053             STRH     R3,[R2, #+2]
    394              xENETRxDescriptors[ ux ].data = (uint8 *)__REV((uint32)pcBufPointer);
   \   00000088   0xBA0A             REV      R2,R1
   \   0000008A   0x....             LDR.N    R3,??DataTable14_34
   \   0000008C   0x681B             LDR      R3,[R3, #+0]
   \   0000008E   0xEB13 0x03C0      ADDS     R3,R3,R0, LSL #+3
   \   00000092   0x605A             STR      R2,[R3, #+4]
    395              pcBufPointer += CFG_ENET_RX_BUFFER_SIZE;
   \   00000094   0xF511 0x7180      ADDS     R1,R1,#+256
    396            
    397            }
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_BDInit_8: (+1)
   \   0000009A   0x2808             CMP      R0,#+8
   \   0000009C   0xD3E9             BCC.N    ??LPLD_ENET_BDInit_9
    398            
    399            //设置缓冲区描述符环形序列中的最后一个状态位为Wrap
    400            xENETTxDescriptors[ CFG_NUM_ENET_TX_BUFFERS - 1 ].status |= TX_BD_W;
   \   0000009E   0x....             LDR.N    R0,??DataTable14_36
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x8800             LDRH     R0,[R0, #+0]
   \   000000A4   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000A8   0x....             LDR.N    R1,??DataTable14_36
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0x8008             STRH     R0,[R1, #+0]
    401            xENETRxDescriptors[ CFG_NUM_ENET_RX_BUFFERS - 1 ].status |= RX_BD_W;
   \   000000AE   0x....             LDR.N    R0,??DataTable14_34
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x8F00             LDRH     R0,[R0, #+56]
   \   000000B4   0xF050 0x0020      ORRS     R0,R0,#0x20
   \   000000B8   0x....             LDR.N    R1,??DataTable14_34
   \   000000BA   0x6809             LDR      R1,[R1, #+0]
   \   000000BC   0x8708             STRH     R0,[R1, #+56]
    402            
    403            uxNextRxBuffer = 0;
   \   000000BE   0x....             LDR.N    R0,??DataTable14_44
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x6001             STR      R1,[R0, #+0]
    404            uxNextTxBuffer = 0;
   \   000000C4   0x....             LDR.N    R0,??DataTable14_45
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x6001             STR      R1,[R0, #+0]
    405          }
   \   000000CA   0x4770             BX       LR               ;; return
    406          
    407          /*
    408           * LPLD_ENET_MacSend
    409           * 以太帧发送函数
    410           * 
    411           * 参数:
    412           *    *ch--数据帧头地址，该数据帧为以太帧，必须包含目的地址、源地址、类型等。
    413           *    len--数据帧长度。
    414           *
    415           * 输出:
    416           *    无
    417           */

   \                                 In section .text, align 2, keep-with-next
    418          void LPLD_ENET_MacSend(uint8 *ch, uint16 len)
    419          {
    420            
    421            //检查当前发送缓冲区描述符是否可用
    422            while( xENETTxDescriptors[ uxNextTxBuffer ].status & TX_BD_R);
   \                     LPLD_ENET_MacSend: (+1)
   \                     ??LPLD_ENET_MacSend_0: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable14_45
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x....             LDR.N    R3,??DataTable14_36
   \   00000006   0x681B             LDR      R3,[R3, #+0]
   \   00000008   0xF813 0x2032      LDRB     R2,[R3, R2, LSL #+3]
   \   0000000C   0x0612             LSLS     R2,R2,#+24
   \   0000000E   0xD4F7             BMI.N    ??LPLD_ENET_MacSend_0
    423            
    424            //设置发送缓冲区描述符
    425            xENETTxDescriptors[ uxNextTxBuffer ].data = (uint8 *)__REV((uint32)ch);
   \   00000010   0xBA00             REV      R0,R0
   \   00000012   0x....             LDR.N    R2,??DataTable14_45
   \   00000014   0x6812             LDR      R2,[R2, #+0]
   \   00000016   0x....             LDR.N    R3,??DataTable14_36
   \   00000018   0x681B             LDR      R3,[R3, #+0]
   \   0000001A   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   0000001E   0x6050             STR      R0,[R2, #+4]
    426            xENETTxDescriptors[ uxNextTxBuffer ].length = __REVSH(len);
   \   00000020   0xBAC8             REVSH    R0,R1
   \   00000022   0x....             LDR.N    R1,??DataTable14_45
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x....             LDR.N    R2,??DataTable14_36
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0xEB12 0x01C1      ADDS     R1,R2,R1, LSL #+3
   \   0000002E   0x8048             STRH     R0,[R1, #+2]
    427            xENETTxDescriptors[ uxNextTxBuffer ].status = ( TX_BD_R | TX_BD_L | TX_BD_TC | TX_BD_W );
   \   00000030   0x....             LDR.N    R0,??DataTable14_45
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x....             LDR.N    R1,??DataTable14_36
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x22AC             MOVS     R2,#+172
   \   0000003A   0xF821 0x2030      STRH     R2,[R1, R0, LSL #+3]
    428            
    429            uxNextTxBuffer++;
   \   0000003E   0x....             LDR.N    R0,??DataTable14_45
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x....             LDR.N    R1,??DataTable14_45
   \   00000046   0x6008             STR      R0,[R1, #+0]
    430            if( uxNextTxBuffer >= CFG_NUM_ENET_TX_BUFFERS )
   \   00000048   0x....             LDR.N    R0,??DataTable14_45
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD002             BEQ.N    ??LPLD_ENET_MacSend_1
    431            {
    432              uxNextTxBuffer = 0;
   \   00000050   0x....             LDR.N    R0,??DataTable14_45
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x6001             STR      R1,[R0, #+0]
    433            }
    434            
    435            //使能发送
    436            ENET->TDAR = ENET_TDAR_TDAR_MASK;
   \                     ??LPLD_ENET_MacSend_1: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable14_46  ;; 0x400c0014
   \   00000058   0xF05F 0x7180      MOVS     R1,#+16777216
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    437            
    438          }
   \   0000005E   0x4770             BX       LR               ;; return
    439          
    440          
    441          /*
    442           * LPLD_ENET_MacRecv
    443           * 以太帧接收函数
    444           * 
    445           * 参数:
    446           *    *ch--接收数据帧头地址。
    447           *    *len--数据帧长度地址。
    448           *
    449           * 输出:
    450           *    无
    451           */

   \                                 In section .text, align 2, keep-with-next
    452          uint8 LPLD_ENET_MacRecv(uint8 *ch, uint16 *len)
    453          {
   \                     LPLD_ENET_MacRecv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    454            uint8 *prvRxd;
    455            *len = 0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x800A             STRH     R2,[R1, #+0]
    456            uxNextRxBuffer = 0; 
   \   00000006   0x....             LDR.N    R2,??DataTable14_44
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x6013             STR      R3,[R2, #+0]
    457            
    458            //寻找为非空的接收缓冲区描述符 
    459            while( (xENETRxDescriptors[ uxNextRxBuffer ].status & RX_BD_E)!=0 )
   \                     ??LPLD_ENET_MacRecv_0: (+1)
   \   0000000C   0x....             LDR.N    R2,??DataTable14_44
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0x....             LDR.N    R3,??DataTable14_34
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0xF813 0x2032      LDRB     R2,[R3, R2, LSL #+3]
   \   00000018   0x0612             LSLS     R2,R2,#+24
   \   0000001A   0xD50D             BPL.N    ??LPLD_ENET_MacRecv_1
    460            {
    461              uxNextRxBuffer++; 
   \   0000001C   0x....             LDR.N    R2,??DataTable14_44
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x1C52             ADDS     R2,R2,#+1
   \   00000022   0x....             LDR.N    R3,??DataTable14_44
   \   00000024   0x601A             STR      R2,[R3, #+0]
    462              if( uxNextRxBuffer >= CFG_NUM_ENET_RX_BUFFERS )
   \   00000026   0x....             LDR.N    R2,??DataTable14_44
   \   00000028   0x6812             LDR      R2,[R2, #+0]
   \   0000002A   0x2A08             CMP      R2,#+8
   \   0000002C   0xD3EE             BCC.N    ??LPLD_ENET_MacRecv_0
    463              {
    464                uxNextRxBuffer = 0; 
   \   0000002E   0x....             LDR.N    R0,??DataTable14_44
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6001             STR      R1,[R0, #+0]
    465                return 1;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE028             B.N      ??LPLD_ENET_MacRecv_2
    466              } 
    467              
    468            }
    469            
    470            //读取接收缓冲区描述符
    471            *len  =  __REVSH(xENETRxDescriptors[ uxNextRxBuffer ].length);
   \                     ??LPLD_ENET_MacRecv_1: (+1)
   \   00000038   0x....             LDR.N    R2,??DataTable14_44
   \   0000003A   0x6812             LDR      R2,[R2, #+0]
   \   0000003C   0x....             LDR.N    R3,??DataTable14_34
   \   0000003E   0x681B             LDR      R3,[R3, #+0]
   \   00000040   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   00000044   0xF9B2 0x2002      LDRSH    R2,[R2, #+2]
   \   00000048   0xBAD2             REVSH    R2,R2
   \   0000004A   0x800A             STRH     R2,[R1, #+0]
    472            prvRxd =  (uint8 *)__REV((uint32)xENETRxDescriptors[ uxNextRxBuffer ].data);      
   \   0000004C   0x....             LDR.N    R2,??DataTable14_44
   \   0000004E   0x6812             LDR      R2,[R2, #+0]
   \   00000050   0x....             LDR.N    R3,??DataTable14_34
   \   00000052   0x681B             LDR      R3,[R3, #+0]
   \   00000054   0xEB13 0x02C2      ADDS     R2,R3,R2, LSL #+3
   \   00000058   0x6852             LDR      R2,[R2, #+4]
   \   0000005A   0xBA13             REV      R3,R2
    473            memcpy((void *)ch, (void *)prvRxd, *len);      
   \   0000005C   0x880A             LDRH     R2,[R1, #+0]
   \   0000005E   0x0019             MOVS     R1,R3
   \   00000060   0x.... 0x....      BL       memcpy
    474            
    475            //清除接收缓冲区描述符状态标志Empty
    476            xENETRxDescriptors[ uxNextRxBuffer ].status |= RX_BD_E;
   \   00000064   0x....             LDR.N    R0,??DataTable14_44
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x....             LDR.N    R1,??DataTable14_34
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0xF831 0x0030      LDRH     R0,[R1, R0, LSL #+3]
   \   00000070   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000074   0x....             LDR.N    R1,??DataTable14_44
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0x....             LDR.N    R2,??DataTable14_34
   \   0000007A   0x6812             LDR      R2,[R2, #+0]
   \   0000007C   0xF822 0x0031      STRH     R0,[R2, R1, LSL #+3]
    477            ENET->RDAR = ENET_RDAR_RDAR_MASK;	
   \   00000080   0x....             LDR.N    R0,??DataTable14_40  ;; 0x400c0010
   \   00000082   0xF05F 0x7180      MOVS     R1,#+16777216
   \   00000086   0x6001             STR      R1,[R0, #+0]
    478            return 0;
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MacRecv_2: (+1)
   \   0000008A   0xBD02             POP      {R1,PC}          ;; return
    479          }
    480          
    481          
    482          /*
    483           * LPLD_ENET_HashAddress
    484           * 生成给定的MAC地址的哈希表
    485           * 
    486           * 参数:
    487           *    *addr--6字节地址指针。
    488           *
    489           * 输出:
    490           *    32位CRC校验的高6位
    491           */

   \                                 In section .text, align 2, keep-with-next
    492          uint8 LPLD_ENET_HashAddress(const uint8* addr)
    493          {
   \                     LPLD_ENET_HashAddress: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    494            uint32 crc;
    495            uint8 byte;
    496            int i, j;
    497            
    498            crc = 0xFFFFFFFF;
   \   00000002   0xF05F 0x31FF      MOVS     R1,#-1
    499            for(i=0; i<6; ++i)
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??LPLD_ENET_HashAddress_0
   \                     ??LPLD_ENET_HashAddress_1: (+1)
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??LPLD_ENET_HashAddress_0: (+1)
   \   0000000C   0x2B06             CMP      R3,#+6
   \   0000000E   0xDA14             BGE.N    ??LPLD_ENET_HashAddress_2
    500            {
    501              byte = addr[i];
   \   00000010   0x5C1A             LDRB     R2,[R3, R0]
    502              for(j=0; j<8; ++j)
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0xE003             B.N      ??LPLD_ENET_HashAddress_3
    503              {
    504                if((byte & 0x01)^(crc & 0x01))
    505                {
    506                  crc >>= 1;
    507                  crc = crc ^ 0xEDB88320;
    508                }
    509                else
    510                  crc >>= 1;
   \                     ??LPLD_ENET_HashAddress_4: (+1)
   \   00000016   0x0849             LSRS     R1,R1,#+1
    511                byte >>= 1;
   \                     ??LPLD_ENET_HashAddress_5: (+1)
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0852             LSRS     R2,R2,#+1
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??LPLD_ENET_HashAddress_3: (+1)
   \   0000001E   0x2C08             CMP      R4,#+8
   \   00000020   0xDAF3             BGE.N    ??LPLD_ENET_HashAddress_1
   \   00000022   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000024   0xF012 0x0501      ANDS     R5,R2,#0x1
   \   00000028   0xF011 0x0601      ANDS     R6,R1,#0x1
   \   0000002C   0xEA96 0x0F05      TEQ      R6,R5
   \   00000030   0xD0F1             BEQ.N    ??LPLD_ENET_HashAddress_4
   \   00000032   0x0849             LSRS     R1,R1,#+1
   \   00000034   0x....             LDR.N    R5,??DataTable14_47  ;; 0xedb88320
   \   00000036   0x4069             EORS     R1,R5,R1
   \   00000038   0xE7EE             B.N      ??LPLD_ENET_HashAddress_5
    512              }
    513            }
    514            return (uint8)(crc >> 26);
   \                     ??LPLD_ENET_HashAddress_2: (+1)
   \   0000003A   0x0E88             LSRS     R0,R1,#+26
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0xBC70             POP      {R4-R6}
   \   00000040   0x4770             BX       LR               ;; return
    515          }
    516          
    517          
    518          /*
    519           * LPLD_ENET_SetAddress
    520           * 设置MAC物理地址
    521           * 
    522           * 参数:
    523           *    *pa--6字节的物理地址指针。
    524           *
    525           * 输出:
    526           *    无
    527           */

   \                                 In section .text, align 2, keep-with-next
    528          void LPLD_ENET_SetAddress(const uint8 *pa)
    529          {
   \                     LPLD_ENET_SetAddress: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    530            uint8 crc;
    531            
    532            //设置物理地址
    533            ENET->PALR = (uint32)((pa[0]<<24) | (pa[1]<<16) | (pa[2]<<8) | pa[3]);
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x7842             LDRB     R2,[R0, #+1]
   \   00000006   0x0412             LSLS     R2,R2,#+16
   \   00000008   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   0000000C   0x7882             LDRB     R2,[R0, #+2]
   \   0000000E   0xEA51 0x2102      ORRS     R1,R1,R2, LSL #+8
   \   00000012   0x78C2             LDRB     R2,[R0, #+3]
   \   00000014   0x4311             ORRS     R1,R2,R1
   \   00000016   0x....             LDR.N    R2,??DataTable14_48  ;; 0x400c00e4
   \   00000018   0x6011             STR      R1,[R2, #+0]
    534            ENET->PAUR = (uint32)((pa[4]<<24) | (pa[5]<<16));
   \   0000001A   0x7901             LDRB     R1,[R0, #+4]
   \   0000001C   0x7942             LDRB     R2,[R0, #+5]
   \   0000001E   0x0412             LSLS     R2,R2,#+16
   \   00000020   0xEA52 0x6101      ORRS     R1,R2,R1, LSL #+24
   \   00000024   0x....             LDR.N    R2,??DataTable14_49  ;; 0x400c00e8
   \   00000026   0x6011             STR      R1,[R2, #+0]
    535            
    536            //根据物理地址计算并设置独立地址哈希寄存器的值
    537            crc = LPLD_ENET_HashAddress(pa);
   \   00000028   0x.... 0x....      BL       LPLD_ENET_HashAddress
    538            if(crc >= 32)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2820             CMP      R0,#+32
   \   00000030   0xDB09             BLT.N    ??LPLD_ENET_SetAddress_0
    539              ENET->IAUR |= (uint32)(1 << (crc - 32));
   \   00000032   0x....             LDR.N    R1,??DataTable14_26  ;; 0x400c0118
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x3820             SUBS     R0,R0,#+32
   \   0000003A   0xFA12 0xF000      LSLS     R0,R2,R0
   \   0000003E   0x4308             ORRS     R0,R0,R1
   \   00000040   0x....             LDR.N    R1,??DataTable14_26  ;; 0x400c0118
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \   00000044   0xE007             B.N      ??LPLD_ENET_SetAddress_1
    540            else
    541              ENET->IALR |= (uint32)(1 << crc);
   \                     ??LPLD_ENET_SetAddress_0: (+1)
   \   00000046   0x....             LDR.N    R1,??DataTable14_25  ;; 0x400c011c
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0xFA12 0xF000      LSLS     R0,R2,R0
   \   00000050   0x4308             ORRS     R0,R0,R1
   \   00000052   0x....             LDR.N    R1,??DataTable14_25  ;; 0x400c011c
   \   00000054   0x6008             STR      R0,[R1, #+0]
    542          }
   \                     ??LPLD_ENET_SetAddress_1: (+1)
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
    543          
    544          
    545          
    546          /*******************************************************************
    547           *
    548           *                PHY设备MII接口函数
    549           *
    550          *******************************************************************/
    551          
    552          /*
    553           * LPLD_ENET_MiiInit
    554           * 设置ENET模块的MII接口时钟，期望频率为2.5MHz
    555           * MII_SPEED = 系统时钟 / (2.5MHz * 2)
    556           * 
    557           * 参数:
    558           *    sys_clk_mhz--系统主频
    559           *
    560           * 输出:
    561           *    无
    562           */

   \                                 In section .text, align 2, keep-with-next
    563          void LPLD_ENET_MiiInit(uint32 sys_clk_mhz)
    564          {
    565            ENET->MSCR = 0 | ENET_MSCR_MII_SPEED((2*sys_clk_mhz/5)+1);
   \                     LPLD_ENET_MiiInit: (+1)
   \   00000000   0x0040             LSLS     R0,R0,#+1
   \   00000002   0x2105             MOVS     R1,#+5
   \   00000004   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0x0040             LSLS     R0,R0,#+1
   \   0000000C   0xF010 0x007E      ANDS     R0,R0,#0x7E
   \   00000010   0x....             LDR.N    R1,??DataTable14_50  ;; 0x400c0044
   \   00000012   0x6008             STR      R0,[R1, #+0]
    566          }
   \   00000014   0x4770             BX       LR               ;; return
    567          
    568          
    569          /*
    570           * LPLD_ENET_MiiWrite
    571           * MII接口写
    572           * 
    573           * 参数:
    574           *    phy_addr--物理收发器地址
    575           *    reg_addr--寄存器地址
    576           *    data--写入的数据
    577           *
    578           * 输出:
    579           *    1--写超时
    580           *    0--写入成功
    581           */

   \                                 In section .text, align 2, keep-with-next
    582          uint8 LPLD_ENET_MiiWrite(uint16 phy_addr, uint16 reg_addr, uint16 data)
    583          {
   \                     LPLD_ENET_MiiWrite: (+1)
   \   00000000   0xB410             PUSH     {R4}
    584            uint32 timeout;
    585            
    586            //清除MII中断事件
    587            ENET->EIR = ENET_EIR_MII_MASK;
   \   00000002   0x....             LDR.N    R3,??DataTable14_37  ;; 0x400c0004
   \   00000004   0xF45F 0x0400      MOVS     R4,#+8388608
   \   00000008   0x601C             STR      R4,[R3, #+0]
    588            
    589            //初始化MII管理帧寄存器
    590            ENET->MMFR = 0
    591                      | ENET_MMFR_ST(0x01)
    592                      | ENET_MMFR_OP(0x01)
    593                      | ENET_MMFR_PA(phy_addr)
    594                      | ENET_MMFR_RA(reg_addr)
    595                      | ENET_MMFR_TA(0x02)
    596                      | ENET_MMFR_DATA(data);
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x05C0             LSLS     R0,R0,#+23
   \   0000000E   0xF010 0x6078      ANDS     R0,R0,#0xF800000
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0489             LSLS     R1,R1,#+18
   \   00000016   0xF411 0x01F8      ANDS     R1,R1,#0x7C0000
   \   0000001A   0x4308             ORRS     R0,R1,R0
   \   0000001C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001E   0x4310             ORRS     R0,R2,R0
   \   00000020   0x....             LDR.N    R1,??DataTable14_51  ;; 0x50020000
   \   00000022   0x4308             ORRS     R0,R1,R0
   \   00000024   0x....             LDR.N    R1,??DataTable14_52  ;; 0x400c0040
   \   00000026   0x6008             STR      R0,[R1, #+0]
    597            
    598            //等待MII传输完成中断事件
    599            for (timeout = 0; timeout < MII_TIMEOUT; timeout++)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE000             B.N      ??LPLD_ENET_MiiWrite_0
   \                     ??LPLD_ENET_MiiWrite_1: (+1)
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_MiiWrite_0: (+1)
   \   0000002E   0x....             LDR.N    R1,??DataTable14_53  ;; 0x1ffff
   \   00000030   0x4288             CMP      R0,R1
   \   00000032   0xD203             BCS.N    ??LPLD_ENET_MiiWrite_2
    600            {
    601              if (ENET->EIR & ENET_EIR_MII_MASK)
   \   00000034   0x....             LDR.N    R1,??DataTable14_37  ;; 0x400c0004
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x0209             LSLS     R1,R1,#+8
   \   0000003A   0xD5F7             BPL.N    ??LPLD_ENET_MiiWrite_1
    602                break;
    603            }
    604            
    605            if(timeout == MII_TIMEOUT) 
   \                     ??LPLD_ENET_MiiWrite_2: (+1)
   \   0000003C   0x....             LDR.N    R1,??DataTable14_53  ;; 0x1ffff
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD101             BNE.N    ??LPLD_ENET_MiiWrite_3
    606              return 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE004             B.N      ??LPLD_ENET_MiiWrite_4
    607            
    608            //清除MII中断事件
    609            ENET->EIR = ENET_EIR_MII_MASK;
   \                     ??LPLD_ENET_MiiWrite_3: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable14_37  ;; 0x400c0004
   \   00000048   0xF45F 0x0100      MOVS     R1,#+8388608
   \   0000004C   0x6001             STR      R1,[R0, #+0]
    610            
    611            return 0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MiiWrite_4: (+1)
   \   00000050   0xBC10             POP      {R4}
   \   00000052   0x4770             BX       LR               ;; return
    612          }
    613          
    614          
    615          /*
    616           * LPLD_ENET_MiiRead
    617           * MII接口读
    618           * 
    619           * 参数:
    620           *    phy_addr--物理收发器地址
    621           *    reg_addr--寄存器地址
    622           *    *data--读出的数据地址指针
    623           *
    624           * 输出:
    625           *    1--读超时
    626           *    0--读取成功
    627           */

   \                                 In section .text, align 2, keep-with-next
    628          uint8 LPLD_ENET_MiiRead(uint16 phy_addr, uint16 reg_addr, uint16 *data)
    629          {
   \                     LPLD_ENET_MiiRead: (+1)
   \   00000000   0xB410             PUSH     {R4}
    630            uint32 timeout;
    631            
    632            //清除MII中断事件
    633            ENET->EIR = ENET_EIR_MII_MASK;
   \   00000002   0x....             LDR.N    R3,??DataTable14_37  ;; 0x400c0004
   \   00000004   0xF45F 0x0400      MOVS     R4,#+8388608
   \   00000008   0x601C             STR      R4,[R3, #+0]
    634            
    635            //初始化MII管理帧寄存器
    636            ENET->MMFR = 0
    637                      | ENET_MMFR_ST(0x01)
    638                      | ENET_MMFR_OP(0x2)
    639                      | ENET_MMFR_PA(phy_addr)
    640                      | ENET_MMFR_RA(reg_addr)
    641                      | ENET_MMFR_TA(0x02);
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x05C0             LSLS     R0,R0,#+23
   \   0000000E   0xF010 0x6078      ANDS     R0,R0,#0xF800000
   \   00000012   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000014   0x0489             LSLS     R1,R1,#+18
   \   00000016   0xF411 0x01F8      ANDS     R1,R1,#0x7C0000
   \   0000001A   0x4308             ORRS     R0,R1,R0
   \   0000001C   0x....             LDR.N    R1,??DataTable14_54  ;; 0x60020000
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable14_52  ;; 0x400c0040
   \   00000022   0x6008             STR      R0,[R1, #+0]
    642            
    643            //等待MII传输完成中断事件
    644            for (timeout = 0; timeout < MII_TIMEOUT; timeout++)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xE000             B.N      ??LPLD_ENET_MiiRead_0
   \                     ??LPLD_ENET_MiiRead_1: (+1)
   \   00000028   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_ENET_MiiRead_0: (+1)
   \   0000002A   0x....             LDR.N    R1,??DataTable14_53  ;; 0x1ffff
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD203             BCS.N    ??LPLD_ENET_MiiRead_2
    645            {
    646              if (ENET->EIR & ENET_EIR_MII_MASK)
   \   00000030   0x....             LDR.N    R1,??DataTable14_37  ;; 0x400c0004
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x0209             LSLS     R1,R1,#+8
   \   00000036   0xD5F7             BPL.N    ??LPLD_ENET_MiiRead_1
    647                break;
    648            }
    649            
    650            if(timeout == MII_TIMEOUT) 
   \                     ??LPLD_ENET_MiiRead_2: (+1)
   \   00000038   0x....             LDR.N    R1,??DataTable14_53  ;; 0x1ffff
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD101             BNE.N    ??LPLD_ENET_MiiRead_3
    651              return 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xE007             B.N      ??LPLD_ENET_MiiRead_4
    652            
    653            //清除MII中断事件
    654            ENET->EIR = ENET_EIR_MII_MASK;
   \                     ??LPLD_ENET_MiiRead_3: (+1)
   \   00000042   0x....             LDR.N    R0,??DataTable14_37  ;; 0x400c0004
   \   00000044   0xF45F 0x0100      MOVS     R1,#+8388608
   \   00000048   0x6001             STR      R1,[R0, #+0]
    655            
    656            *data = ENET->MMFR & 0x0000FFFF;
   \   0000004A   0x....             LDR.N    R0,??DataTable14_52  ;; 0x400c0040
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x8010             STRH     R0,[R2, #+0]
    657            
    658            return 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MiiRead_4: (+1)
   \   00000052   0xBC10             POP      {R4}
   \   00000054   0x4770             BX       LR               ;; return
    659          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x4004802C         DC32     0x4004802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x4000D000         DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x400C0024         DC32     0x400c0024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     ENET_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x4004A000         DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x4004A004         DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \   00000000   0x........         DC32     `?<Constant "PHY_PHYIDR1=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \   00000000   0x........         DC32     `?<Constant "PHY_PHYIDR2=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \   00000000   0x........         DC32     `?<Constant "PHY_ANLPAR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \   00000000   0x........         DC32     `?<Constant "PHY_ANLPARNP=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \   00000000   0x........         DC32     `?<Constant "PHY_PHYSTS=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \   00000000   0x........         DC32     `?<Constant "PHY_MICR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \   00000000   0x........         DC32     `?<Constant "PHY_MISR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \   00000000   0x........         DC32     `?<Constant "PHY_BMCR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \   00000000   0x........         DC32     `?<Constant "PHY_BMSR=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \   00000000   0x........         DC32     `?<Constant "PHY_STATUS=0x%X\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \   00000000   0x400C011C         DC32     0x400c011c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \   00000000   0x400C0118         DC32     0x400c0118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \   00000000   0x400C0124         DC32     0x400c0124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \   00000000   0x400C0120         DC32     0x400c0120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \   00000000   0x400C0084         DC32     0x400c0084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \   00000000   0x05F04104         DC32     0x5f04104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \   00000000   0x400C00C4         DC32     0x400c00c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \   00000000   0x400C0188         DC32     0x400c0188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_33:
   \   00000000   0x400C0180         DC32     0x400c0180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_34:
   \   00000000   0x........         DC32     xENETRxDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_35:
   \   00000000   0x400C0184         DC32     0x400c0184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_36:
   \   00000000   0x........         DC32     xENETTxDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_37:
   \   00000000   0x400C0004         DC32     0x400c0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_38:
   \   00000000   0x400C0008         DC32     0x400c0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_39:
   \   00000000   0x6B780000         DC32     0x6b780000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_40:
   \   00000000   0x400C0010         DC32     0x400c0010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_41:
   \   00000000   0x........         DC32     xENETTxDescriptors_unaligned

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_42:
   \   00000000   0x........         DC32     xENETRxDescriptors_unaligned

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_43:
   \   00000000   0x........         DC32     ucENETRxBuffers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_44:
   \   00000000   0x........         DC32     uxNextRxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_45:
   \   00000000   0x........         DC32     uxNextTxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_46:
   \   00000000   0x400C0014         DC32     0x400c0014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_47:
   \   00000000   0xEDB88320         DC32     0xedb88320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_48:
   \   00000000   0x400C00E4         DC32     0x400c00e4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_49:
   \   00000000   0x400C00E8         DC32     0x400c00e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_50:
   \   00000000   0x400C0044         DC32     0x400c0044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_51:
   \   00000000   0x50020000         DC32     0x50020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_52:
   \   00000000   0x400C0040         DC32     0x400c0040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_53:
   \   00000000   0x0001FFFF         DC32     0x1ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_54:
   \   00000000   0x60020000         DC32     0x60020000

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_PHYIDR1=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_PHYIDR1=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x49    
   \              0x44 0x52    
   \              0x31 0x3D    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_PHYIDR2=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_PHYIDR2=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x49    
   \              0x44 0x52    
   \              0x32 0x3D    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_ANLPAR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_ANLPAR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x41 0x4E    
   \              0x4C 0x50    
   \              0x41 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_ANLPARNP=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_ANLPARNP=0x%X\015\012"
   \              0x59 0x5F    
   \              0x41 0x4E    
   \              0x4C 0x50    
   \              0x41 0x52    
   \              0x4E 0x50    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_PHYSTS=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_PHYSTS=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x53    
   \              0x54 0x53    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_MICR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_MICR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x4D 0x49    
   \              0x43 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_MISR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_MISR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x4D 0x49    
   \              0x53 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_BMCR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_BMCR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x42 0x4D    
   \              0x43 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_BMSR=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_BMSR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x42 0x4D    
   \              0x53 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "PHY_STATUS=0x%X\\r\\n">`:
   \   00000000   0x50 0x48          DC8 "PHY_STATUS=0x%X\015\012"
   \              0x59 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Eth_Err_Misc_IRQHandler
         8   -- Indirect call
       8   Eth_IEEE1588_IRQHandler
         8   -- Indirect call
       8   Eth_RX_IRQHandler
         8   -- Indirect call
       8   Eth_TX_IRQHandler
         8   -- Indirect call
       0   LPLD_ENET_BDInit
       0   LPLD_ENET_Delay
      12   LPLD_ENET_HashAddress
      24   LPLD_ENET_Init
        24   -> LPLD_ENET_BDInit
        24   -> LPLD_ENET_Delay
        24   -> LPLD_ENET_MiiInit
        24   -> LPLD_ENET_MiiRead
        24   -> LPLD_ENET_MiiWrite
        24   -> LPLD_ENET_SetAddress
        24   -> NVIC_EnableIRQ
        24   -> printf
       8   LPLD_ENET_MacRecv
         8   -> memcpy
       0   LPLD_ENET_MacSend
       0   LPLD_ENET_MiiInit
       4   LPLD_ENET_MiiRead
       4   LPLD_ENET_MiiWrite
       8   LPLD_ENET_SetAddress
         8   -> LPLD_ENET_HashAddress
       0   LPLD_ENET_SetIsr
       0   NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "PHY_ANLPAR=0x%X\r\n">
      20  ?<Constant "PHY_ANLPARNP=0x%X\r\n">
      16  ?<Constant "PHY_BMCR=0x%X\r\n">
      16  ?<Constant "PHY_BMSR=0x%X\r\n">
      16  ?<Constant "PHY_MICR=0x%X\r\n">
      16  ?<Constant "PHY_MISR=0x%X\r\n">
      20  ?<Constant "PHY_PHYIDR1=0x%X\r\n">
      20  ?<Constant "PHY_PHYIDR2=0x%X\r\n">
      20  ?<Constant "PHY_PHYSTS=0x%X\r\n">
      20  ?<Constant "PHY_STATUS=0x%X\r\n">
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_33
       4  ??DataTable14_34
       4  ??DataTable14_35
       4  ??DataTable14_36
       4  ??DataTable14_37
       4  ??DataTable14_38
       4  ??DataTable14_39
       4  ??DataTable14_4
       4  ??DataTable14_40
       4  ??DataTable14_41
       4  ??DataTable14_42
       4  ??DataTable14_43
       4  ??DataTable14_44
       4  ??DataTable14_45
       4  ??DataTable14_46
       4  ??DataTable14_47
       4  ??DataTable14_48
       4  ??DataTable14_49
       4  ??DataTable14_5
       4  ??DataTable14_50
       4  ??DataTable14_51
       4  ??DataTable14_52
       4  ??DataTable14_53
       4  ??DataTable14_54
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      16  ENET_ISR
      22  Eth_Err_Misc_IRQHandler
      22  Eth_IEEE1588_IRQHandler
      38  Eth_RX_IRQHandler
      38  Eth_TX_IRQHandler
     204  LPLD_ENET_BDInit
      32  LPLD_ENET_Delay
      66  LPLD_ENET_HashAddress
     760  LPLD_ENET_Init
     140  LPLD_ENET_MacRecv
      96  LPLD_ENET_MacSend
      22  LPLD_ENET_MiiInit
      86  LPLD_ENET_MiiRead
      84  LPLD_ENET_MiiWrite
      88  LPLD_ENET_SetAddress
      24  LPLD_ENET_SetIsr
      24  NVIC_EnableIRQ
    2064  ucENETRxBuffers
       4  uxNextRxBuffer
       4  uxNextTxBuffer
       4  xENETRxDescriptors
      80  xENETRxDescriptors_unaligned
       4  xENETTxDescriptors
      24  xENETTxDescriptors_unaligned

 
 2 200 bytes in section .bss
   184 bytes in section .rodata
 1 966 bytes in section .text
 
 1 966 bytes of CODE  memory
   184 bytes of CONST memory
 2 200 bytes of DATA  memory

Errors: none
Warnings: none
