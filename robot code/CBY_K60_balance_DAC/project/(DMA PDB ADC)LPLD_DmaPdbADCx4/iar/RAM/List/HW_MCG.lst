###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.2.6274/W32 for ARM      16/Mar/2015  15:47:50 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\ChenBuyun\Desktop\CBY_K60\lib\LPLD\HW\HW_MCG.c  #
#    Command line =  C:\Users\ChenBuyun\Desktop\CBY_K60\lib\LPLD\HW\HW_MCG.c  #
#                    -D LPLD_K60 -lCN "C:\Users\ChenBuyun\Desktop\CBY_K60\pro #
#                    ject\(DMA PDB ADC)LPLD_DmaPdbADCx4\iar\RAM\List\" -lB    #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\List\" -o                   #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\Obj\" --no_cse --no_unroll  #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "E:\iar                      #
#                    systems\arm\INC\c\DLib_Config_Normal.h" -I               #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\app\" -I                     #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\CPU\" -I           #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\common\" -I        #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\" -I          #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\HW\" -I       #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\DEV\" -I      #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Ports\"    #
#                    -I "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB  #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Source\"   #
#                    -I "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB  #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\" -I         #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\option\" -I  #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\common\" -I    #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\driver\" -I    #
#                    "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB     #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\descriptor\"   #
#                    -I "C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB  #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\class\" -Ol    #
#                    -I "E:\iar systems\arm\CMSIS\Include\" -D ARM_MATH_CM4   #
#    List file    =  C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB      #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\List\HW_MCG.lst             #
#    Object file  =  C:\Users\ChenBuyun\Desktop\CBY_K60\project\(DMA PDB      #
#                    ADC)LPLD_DmaPdbADCx4\iar\RAM\Obj\HW_MCG.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\ChenBuyun\Desktop\CBY_K60\lib\LPLD\HW\HW_MCG.c
      1          /**
      2           * @file HW_MCG.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief MCG底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "HW_MCG.h"
     24          
     25          

   \                                 In section .data, align 4
     26          uint32 g_core_clock = -1ul;
   \                     g_core_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295

   \                                 In section .data, align 4
     27          uint32 g_bus_clock = -1ul;
   \                     g_bus_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295

   \                                 In section .data, align 4
     28          uint32 g_flash_clock = -1ul;
   \                     g_flash_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295

   \                                 In section .data, align 4
     29          uint32 g_flexbus_clock = -1ul;
   \                     g_flexbus_clock:
   \   00000000   0xFFFFFFFF         DC32 4294967295
     30          
     31          /*
     32           * LPLD_PLL_Setup
     33           * 初始化内核时钟及其他系统时钟
     34           * 
     35           * 参数:
     36           *    core_clk_mhz--期望内核时钟频率
     37           *      |__PLLx--参见HAL_MCG.h中的PLL_option定义
     38           *
     39           * 输出:
     40           *    内核频率，单位MHz
     41           */

   \                                 In section .text, align 4, keep-with-next
     42          uint8 LPLD_PLL_Setup(PllOptionEnum_Type core_clk_mhz)
     43          {
   \                     LPLD_PLL_Setup: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     44            uint8 pll_freq;
     45            uint8 prdiv, vdiv;
     46            uint8 core_div, bus_div, flexbus_div, flash_div;
     47            
     48          /*
     49           *************************************************
     50            【LPLD注解】MCG关键系数
     51            prdiv(PLL分频系数): 0~31(1~32)
     52            vdiv(PLL倍频系数): 0~31(24~55)
     53            PLL参考时钟范围: 2MHz~4MHz
     54            PLL参考时钟 = 外部参考时钟(CPU_XTAL_CLK_HZ)/prdiv
     55            CoreClk = PLL参考时钟 x PLL倍频系数 /OUTDIV1
     56           *************************************************
     57           */
     58            
     59            // 对于MK60DZ10来说，core_clk_mhz建议不要超过100，这里限制为最高200
     60            core_clk_mhz = (PllOptionEnum_Type)(core_clk_mhz>200u?200u:core_clk_mhz);
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x28C9             CMP      R0,#+201
   \   00000006   0xD301             BCC.N    ??LPLD_PLL_Setup_0
   \   00000008   0x20C8             MOVS     R0,#+200
   \   0000000A   0xE7FF             B.N      ??LPLD_PLL_Setup_1
     61            
     62            // 根据期望主频选择分频和倍频系数
     63            switch(core_clk_mhz)
   \                     ??LPLD_PLL_Setup_0: (+1)
   \                     ??LPLD_PLL_Setup_1: (+1)
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x0001             MOVS     R1,R0
   \   00000010   0x2930             CMP      R1,#+48
   \   00000012   0xD00E             BEQ.N    ??LPLD_PLL_Setup_2
   \   00000014   0x2932             CMP      R1,#+50
   \   00000016   0xD01B             BEQ.N    ??LPLD_PLL_Setup_3
   \   00000018   0x2960             CMP      R1,#+96
   \   0000001A   0xD01C             BEQ.N    ??LPLD_PLL_Setup_4
   \   0000001C   0x2964             CMP      R1,#+100
   \   0000001E   0xD01D             BEQ.N    ??LPLD_PLL_Setup_5
   \   00000020   0x2978             CMP      R1,#+120
   \   00000022   0xD01E             BEQ.N    ??LPLD_PLL_Setup_6
   \   00000024   0x2996             CMP      R1,#+150
   \   00000026   0xD01F             BEQ.N    ??LPLD_PLL_Setup_7
   \   00000028   0x29B4             CMP      R1,#+180
   \   0000002A   0xD020             BEQ.N    ??LPLD_PLL_Setup_8
   \   0000002C   0x29C8             CMP      R1,#+200
   \   0000002E   0xD021             BEQ.N    ??LPLD_PLL_Setup_9
   \   00000030   0xE023             B.N      ??LPLD_PLL_Setup_10
     64            {
     65            case PLL_48:
     66              prdiv = 24u;
   \                     ??LPLD_PLL_Setup_2: (+1)
   \   00000032   0x2718             MOVS     R7,#+24
     67              vdiv = 0u;
   \   00000034   0x2500             MOVS     R5,#+0
     68              break;
     69            case PLL_50:
     70              prdiv = 24u;
     71              vdiv = 1u;
     72              break;
     73            case PLL_96:
     74              prdiv = 24u;
     75              vdiv = 24u;
     76              break;
     77            case PLL_100:
     78              prdiv = 24u;
     79              vdiv = 26u;
     80              break;
     81            case PLL_120:
     82              prdiv = 19u;
     83              vdiv = 24u;
     84              break;
     85            case PLL_150:
     86              prdiv = 15u;
     87              vdiv = 24u;
     88              break;
     89            case PLL_180:
     90              prdiv = 14u;
     91              vdiv = 30u;
     92              break;
     93            case PLL_200:
     94              prdiv = 12u;
     95              vdiv = 28u;
     96              break;
     97            default:
     98              return LPLD_PLL_Setup(PLL_96);
     99            }
    100            
    101            pll_freq = core_clk_mhz * 1;
   \                     ??LPLD_PLL_Setup_11: (+1)
   \   00000036   0x0006             MOVS     R6,R0
    102            core_div = 0;
   \   00000038   0x2400             MOVS     R4,#+0
    103            if((bus_div = (uint8)(core_clk_mhz/BUS_CLK_MHZ - 1u)) == (uint8)-1)
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x2132             MOVS     R1,#+50
   \   0000003E   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000042   0x1E49             SUBS     R1,R1,#+1
   \   00000044   0x000A             MOVS     R2,R1
   \   00000046   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000048   0x2AFF             CMP      R2,#+255
   \   0000004A   0xD11A             BNE.N    ??LPLD_PLL_Setup_12
    104            {
    105              bus_div = 0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xE020             B.N      ??LPLD_PLL_Setup_13
    106            }
   \                     ??LPLD_PLL_Setup_3: (+1)
   \   00000050   0x2718             MOVS     R7,#+24
   \   00000052   0x2501             MOVS     R5,#+1
   \   00000054   0xE7EF             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_4: (+1)
   \   00000056   0x2718             MOVS     R7,#+24
   \   00000058   0x2518             MOVS     R5,#+24
   \   0000005A   0xE7EC             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_5: (+1)
   \   0000005C   0x2718             MOVS     R7,#+24
   \   0000005E   0x251A             MOVS     R5,#+26
   \   00000060   0xE7E9             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_6: (+1)
   \   00000062   0x2713             MOVS     R7,#+19
   \   00000064   0x2518             MOVS     R5,#+24
   \   00000066   0xE7E6             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_7: (+1)
   \   00000068   0x270F             MOVS     R7,#+15
   \   0000006A   0x2518             MOVS     R5,#+24
   \   0000006C   0xE7E3             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_8: (+1)
   \   0000006E   0x270E             MOVS     R7,#+14
   \   00000070   0x251E             MOVS     R5,#+30
   \   00000072   0xE7E0             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_9: (+1)
   \   00000074   0x270C             MOVS     R7,#+12
   \   00000076   0x251C             MOVS     R5,#+28
   \   00000078   0xE7DD             B.N      ??LPLD_PLL_Setup_11
   \                     ??LPLD_PLL_Setup_10: (+1)
   \   0000007A   0x2060             MOVS     R0,#+96
   \   0000007C   0xF7FF 0xFFC0      BL       LPLD_PLL_Setup
   \   00000080   0xE080             B.N      ??LPLD_PLL_Setup_14
    107            else if(core_clk_mhz/(bus_div+1) > BUS_CLK_MHZ)
   \                     ??LPLD_PLL_Setup_12: (+1)
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000086   0x1C4A             ADDS     R2,R1,#+1
   \   00000088   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   0000008C   0x2A33             CMP      R2,#+51
   \   0000008E   0xD300             BCC.N    ??LPLD_PLL_Setup_13
    108            {
    109              bus_div += 1;
   \   00000090   0x1C49             ADDS     R1,R1,#+1
    110            }
    111            if((flexbus_div = (core_clk_mhz/FLEXBUS_CLK_MHZ - 1u)) == (uint8)-1)
   \                     ??LPLD_PLL_Setup_13: (+1)
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x2232             MOVS     R2,#+50
   \   00000096   0xFBB0 0xF2F2      UDIV     R2,R0,R2
   \   0000009A   0x1E52             SUBS     R2,R2,#+1
   \   0000009C   0x0013             MOVS     R3,R2
   \   0000009E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000A0   0x2BFF             CMP      R3,#+255
   \   000000A2   0xD101             BNE.N    ??LPLD_PLL_Setup_15
    112            {
    113              flexbus_div = 0;
   \   000000A4   0x2200             MOVS     R2,#+0
   \   000000A6   0xE007             B.N      ??LPLD_PLL_Setup_16
    114            }
    115            else if(core_clk_mhz/(flexbus_div+1) > FLEXBUS_CLK_MHZ)
   \                     ??LPLD_PLL_Setup_15: (+1)
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000AC   0x1C53             ADDS     R3,R2,#+1
   \   000000AE   0xFB90 0xF3F3      SDIV     R3,R0,R3
   \   000000B2   0x2B33             CMP      R3,#+51
   \   000000B4   0xD300             BCC.N    ??LPLD_PLL_Setup_16
    116            {
    117              flexbus_div += 1;
   \   000000B6   0x1C52             ADDS     R2,R2,#+1
    118            }
    119            if((flash_div = (core_clk_mhz/FLASH_CLK_MHZ - 1u)) == (uint8)-1)
   \                     ??LPLD_PLL_Setup_16: (+1)
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x2319             MOVS     R3,#+25
   \   000000BC   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \   000000C0   0x1E5B             SUBS     R3,R3,#+1
   \   000000C2   0x469C             MOV      R12,R3
   \   000000C4   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000C8   0xF1BC 0x0FFF      CMP      R12,#+255
   \   000000CC   0xD101             BNE.N    ??LPLD_PLL_Setup_17
    120            {
    121              flash_div = 0;
   \   000000CE   0x2300             MOVS     R3,#+0
   \   000000D0   0xE008             B.N      ??LPLD_PLL_Setup_18
    122            }
    123            else if(core_clk_mhz/(flash_div+1) > FLASH_CLK_MHZ)
   \                     ??LPLD_PLL_Setup_17: (+1)
   \   000000D2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000D6   0xF113 0x0C01      ADDS     R12,R3,#+1
   \   000000DA   0xFB90 0xF0FC      SDIV     R0,R0,R12
   \   000000DE   0x281A             CMP      R0,#+26
   \   000000E0   0xD300             BCC.N    ??LPLD_PLL_Setup_18
    124            {
    125              flash_div += 1;
   \   000000E2   0x1C5B             ADDS     R3,R3,#+1
    126            }
    127            
    128            // 这里假设复位后 MCG 模块默认为 FEI 模式
    129            
    130            // 首先移动到 FBE 模式
    131            MCG->C2 = 0;
   \                     ??LPLD_PLL_Setup_18: (+1)
   \   000000E4   0x4828             LDR.N    R0,??LPLD_PLL_Setup_19  ;; 0x40064001
   \   000000E6   0xF05F 0x0C00      MOVS     R12,#+0
   \   000000EA   0xF880 0xC000      STRB     R12,[R0, #+0]
    132            
    133            // 振荡器初始化完成后,释放锁存状态下的 oscillator 和 GPIO 
    134            SIM->SCGC4 |= SIM_SCGC4_LLWU_MASK;
   \   000000EE   0x4827             LDR.N    R0,??LPLD_PLL_Setup_19+0x4  ;; 0x40048034
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   000000F6   0xF8DF 0xC094      LDR.W    R12,??LPLD_PLL_Setup_19+0x4  ;; 0x40048034
   \   000000FA   0xF8CC 0x0000      STR      R0,[R12, #+0]
    135            LLWU->CS |= LLWU_CS_ACKISO_MASK;
   \   000000FE   0x4824             LDR.N    R0,??LPLD_PLL_Setup_19+0x8  ;; 0x4007c008
   \   00000100   0x7800             LDRB     R0,[R0, #+0]
   \   00000102   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000106   0xF8DF 0xC088      LDR.W    R12,??LPLD_PLL_Setup_19+0x8  ;; 0x4007c008
   \   0000010A   0xF88C 0x0000      STRB     R0,[R12, #+0]
    136            
    137            // 选择外部 oscilator 、参考分频器 and 清零 IREFS 启动外部osc
    138            // CLKS=2, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    139            MCG->C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(3);  
   \   0000010E   0x4821             LDR.N    R0,??LPLD_PLL_Setup_19+0xC  ;; 0x40064000
   \   00000110   0xF05F 0x0C98      MOVS     R12,#+152
   \   00000114   0xF880 0xC000      STRB     R12,[R0, #+0]
    140            
    141            while (MCG->S & MCG_S_IREFST_MASK){}; // 等待参考时钟清零
   \                     ??LPLD_PLL_Setup_20: (+1)
   \   00000118   0x481F             LDR.N    R0,??LPLD_PLL_Setup_19+0x10  ;; 0x40064006
   \   0000011A   0x7800             LDRB     R0,[R0, #+0]
   \   0000011C   0x06C0             LSLS     R0,R0,#+27
   \   0000011E   0xD4FB             BMI.N    ??LPLD_PLL_Setup_20
    142            
    143            while (((MCG->S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2){}; // 等待时钟状态显示为外部参考时钟(ext ref clk)
   \                     ??LPLD_PLL_Setup_21: (+1)
   \   00000120   0x481D             LDR.N    R0,??LPLD_PLL_Setup_19+0x10  ;; 0x40064006
   \   00000122   0x7800             LDRB     R0,[R0, #+0]
   \   00000124   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   00000128   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012A   0x2802             CMP      R0,#+2
   \   0000012C   0xD1F8             BNE.N    ??LPLD_PLL_Setup_21
    144            
    145            // 进入FBE模式
    146            // 配置 PLL 参考分频器, PLLCLKEN=0, PLLSTEN=0, PRDIV=5
    147            // 用晶振频率来选择 PRDIV 值. 仅在有频率晶振的时候支持
    148            // 产生 2MHz 的参考时钟给 PLL.
    149            MCG->C5 = MCG_C5_PRDIV(prdiv); // 设置 PLL 匹配晶振的参考分频数 
   \   0000012E   0xF017 0x001F      ANDS     R0,R7,#0x1F
   \   00000132   0x4F1A             LDR.N    R7,??LPLD_PLL_Setup_19+0x14  ;; 0x40064004
   \   00000134   0x7038             STRB     R0,[R7, #+0]
    150            
    151            // 确保MCG_C6处于复位状态,禁止LOLIE、PLL、和时钟控制器,清PLL VCO分频器
    152            MCG->C6 = 0x0;
   \   00000136   0x481A             LDR.N    R0,??LPLD_PLL_Setup_19+0x18  ;; 0x40064005
   \   00000138   0x2700             MOVS     R7,#+0
   \   0000013A   0x7007             STRB     R7,[R0, #+0]
    153            
    154            //设置系统时钟分频系数
    155            LPLD_Set_SYS_DIV(core_div, bus_div, flexbus_div, flash_div);  
   \   0000013C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000013E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000140   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000142   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000144   0x0020             MOVS     R0,R4
   \   00000146   0x.... 0x....      BL       LPLD_Set_SYS_DIV
    156            
    157            //设置倍频系数
    158            MCG->C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(vdiv); 
   \   0000014A   0xF015 0x001F      ANDS     R0,R5,#0x1F
   \   0000014E   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000152   0x4913             LDR.N    R1,??LPLD_PLL_Setup_19+0x18  ;; 0x40064005
   \   00000154   0x7008             STRB     R0,[R1, #+0]
    159            
    160            while (!(MCG->S & MCG_S_PLLST_MASK)){}; // wait for PLL status bit to set
   \                     ??LPLD_PLL_Setup_22: (+1)
   \   00000156   0x4810             LDR.N    R0,??LPLD_PLL_Setup_19+0x10  ;; 0x40064006
   \   00000158   0x7800             LDRB     R0,[R0, #+0]
   \   0000015A   0x0680             LSLS     R0,R0,#+26
   \   0000015C   0xD5FB             BPL.N    ??LPLD_PLL_Setup_22
    161            
    162            while (!(MCG->S & MCG_S_LOCK_MASK)){}; // Wait for LOCK bit to set
   \                     ??LPLD_PLL_Setup_23: (+1)
   \   0000015E   0x480E             LDR.N    R0,??LPLD_PLL_Setup_19+0x10  ;; 0x40064006
   \   00000160   0x7800             LDRB     R0,[R0, #+0]
   \   00000162   0x0640             LSLS     R0,R0,#+25
   \   00000164   0xD5FB             BPL.N    ??LPLD_PLL_Setup_23
    163            
    164            // 已经进入PBE模式
    165            
    166            // Transition into PEE by setting CLKS to 0
    167            // CLKS=0, FRDIV=3, IREFS=0, IRCLKEN=0, IREFSTEN=0
    168            MCG->C1 &= ~MCG_C1_CLKS_MASK;
   \   00000166   0x480B             LDR.N    R0,??LPLD_PLL_Setup_19+0xC  ;; 0x40064000
   \   00000168   0x7800             LDRB     R0,[R0, #+0]
   \   0000016A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000016E   0x4909             LDR.N    R1,??LPLD_PLL_Setup_19+0xC  ;; 0x40064000
   \   00000170   0x7008             STRB     R0,[R1, #+0]
    169            
    170            // Wait for clock status bits to update
    171            while (((MCG->S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3){};
   \                     ??LPLD_PLL_Setup_24: (+1)
   \   00000172   0x4809             LDR.N    R0,??LPLD_PLL_Setup_19+0x10  ;; 0x40064006
   \   00000174   0x7800             LDRB     R0,[R0, #+0]
   \   00000176   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000017A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017C   0x2803             CMP      R0,#+3
   \   0000017E   0xD1F8             BNE.N    ??LPLD_PLL_Setup_24
    172            
    173            // 已经进入PEE模式
    174            
    175            return pll_freq;
   \   00000180   0x0030             MOVS     R0,R6
   \   00000182   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_PLL_Setup_14: (+1)
   \   00000184   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   \   00000186   0xBF00             Nop      
   \                     ??LPLD_PLL_Setup_19:
   \   00000188   0x40064001         DC32     0x40064001
   \   0000018C   0x40048034         DC32     0x40048034
   \   00000190   0x4007C008         DC32     0x4007c008
   \   00000194   0x40064000         DC32     0x40064000
   \   00000198   0x40064006         DC32     0x40064006
   \   0000019C   0x40064004         DC32     0x40064004
   \   000001A0   0x40064005         DC32     0x40064005
    176          } 
    177          
    178          
    179          /*
    180           * LPLD_Set_SYS_DIV
    181           * 设置系统始终分频
    182           *
    183           * 说明:
    184           * 这段代码必须放置在RAM中，目的是防止程序跑飞，详见官方文档errata e2448.
    185           * 当Flash时钟分频改变的时候，Flash预读取必须禁用.
    186           * 禁止从Flash中运行以下代码.
    187           * 在预读取被重新使能之前必须在时钟分频改变后有一段小的延时.
    188           *
    189           * 参数:
    190           *    outdiv1~outdiv4--分别为core, bus, FlexBus, Flash时钟分频系数
    191           */

   \                                 In section .textrw, align 4, keep-with-next
    192          RAMFUNC void LPLD_Set_SYS_DIV(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    193          {
   \                     LPLD_Set_SYS_DIV: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    194            uint32 temp_reg;
    195            uint8 i;
    196            
    197            temp_reg = FMC->PFAPR; // 备份 FMC_PFAPR 寄存器
   \   00000002   0x4C10             LDR.N    R4,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   00000004   0x6824             LDR      R4,[R4, #+0]
    198            
    199            // 设置 M0PFD 到 M7PFD 为 1 禁用预先读取
    200            FMC->PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    201                       | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    202                       | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000006   0x4D0F             LDR.N    R5,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   00000008   0x682D             LDR      R5,[R5, #+0]
   \   0000000A   0xF455 0x057F      ORRS     R5,R5,#0xFF0000
   \   0000000E   0x4E0D             LDR.N    R6,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   00000010   0x6035             STR      R5,[R6, #+0]
    203            
    204            // 设置时钟分频为期望值  
    205            SIM->CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2) 
    206                        | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000012   0x0609             LSLS     R1,R1,#+24
   \   00000014   0xF011 0x6170      ANDS     R1,R1,#0xF000000
   \   00000018   0xEA51 0x7000      ORRS     R0,R1,R0, LSL #+28
   \   0000001C   0x0511             LSLS     R1,R2,#+20
   \   0000001E   0xF411 0x0170      ANDS     R1,R1,#0xF00000
   \   00000022   0x4308             ORRS     R0,R1,R0
   \   00000024   0x0419             LSLS     R1,R3,#+16
   \   00000026   0xF411 0x2170      ANDS     R1,R1,#0xF0000
   \   0000002A   0x4308             ORRS     R0,R1,R0
   \   0000002C   0x4906             LDR.N    R1,??LPLD_Set_SYS_DIV_0+0x4  ;; 0x40048044
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    207          
    208            // 延时一小段时间等待改变
    209            for (i = 0 ; i < outdiv4 ; i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE000             B.N      ??LPLD_Set_SYS_DIV_1
   \                     ??LPLD_Set_SYS_DIV_2: (+1)
   \   00000034   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_Set_SYS_DIV_1: (+1)
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0x4298             CMP      R0,R3
   \   0000003A   0xD3FB             BCC.N    ??LPLD_Set_SYS_DIV_2
    210            {}
    211            
    212            FMC->PFAPR = temp_reg; // 回复原先的 FMC_PFAPR 寄存器值
   \   0000003C   0x4801             LDR.N    R0,??LPLD_Set_SYS_DIV_0  ;; 0x4001f000
   \   0000003E   0x6004             STR      R4,[R0, #+0]
    213            
    214            return;
   \   00000040   0xBC70             POP      {R4-R6}
   \   00000042   0x4770             BX       LR               ;; return
   \                     ??LPLD_Set_SYS_DIV_0:
   \   00000044   0x4001F000         DC32     0x4001f000
   \   00000048   0x40048044         DC32     0x40048044
    215          } // set_sys_dividers

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_PLL_Setup
        24   -> LPLD_PLL_Setup
        24   -> LPLD_Set_SYS_DIV
      12   LPLD_Set_SYS_DIV


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     420  LPLD_PLL_Setup
      76  LPLD_Set_SYS_DIV
       4  g_bus_clock
       4  g_core_clock
       4  g_flash_clock
       4  g_flexbus_clock

 
  16 bytes in section .data
 420 bytes in section .text
  76 bytes in section .textrw
 
 496 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
