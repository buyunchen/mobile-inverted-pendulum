###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.2.6274/W32 for ARM      03/Nov/2019  15:52:00 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Buyun\Progress\memristor based control\mcu            #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\lib\LPLD\HW\HW_CAN.c            #
#    Command line =  "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\lib\LPLD\HW\HW_CAN.c" -D        #
#                    LPLD_K60 -lCN "D:\Buyun\Progress\memristor based         #
#                    control\mcu code\paper code\0.1ms control period\test    #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\" -lB                #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\" -o                 #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\Obj\" --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5_2\arm\INC\c\DLib_Config_Normal.h" -I                 #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\app\" -I                     #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\CPU\" -I           #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\common\" -I        #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\" -I          #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\HW\" -I       #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\DEV\" -I      #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Ports\"    #
#                    -I "D:\Buyun\Progress\memristor based control\mcu        #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Source\"   #
#                    -I "D:\Buyun\Progress\memristor based control\mcu        #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\" -I         #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\option\" -I  #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\common\" -I    #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\driver\" -I    #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\descriptor\"   #
#                    -I "D:\Buyun\Progress\memristor based control\mcu        #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\class\" -Ol    #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5_2\arm\CMSIS\Include\" -D ARM_MATH_CM4      #
#    List file    =  D:\Buyun\Progress\memristor based control\mcu            #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\HW_CAN.lst           #
#    Object file  =  D:\Buyun\Progress\memristor based control\mcu            #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\Obj\HW_CAN.o              #
#                                                                             #
#                                                                             #
###############################################################################

D:\Buyun\Progress\memristor based control\mcu code\paper code\0.1ms control period\test code\CBY_K60_balance_DAC\lib\LPLD\HW\HW_CAN.c
      1          /**
      2           * @file HW_CAN.c
      3           * @version 3.03[By LPLD]
      4           * @date 2014-3-9
      5           * @brief CAN底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable19  ;; 0xe000e100
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable19_1  ;; 0xe000e180
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return
     24          #include "HW_CAN.h"
     25          //FlexCAN模块设置波特率函数
     26          static void LPLD_CAN_SetBaudRate(CAN_Type *,uint32 );
     27          //FlexCAN 清楚中断标志位函数
     28          static void LPLD_CAN_Interrupt_ClearPending(CAN_Type *, uint8 );
     29          //FlexCAN 获得中断标志位函数
     30          static uint8 LPLD_CAN_Interrupt_GetFlag(CAN_Type *, uint8 );
     31          //FlexCAN 解锁Msg缓冲区函数
     32          static uint16 LPLD_CAN_UnlockMsg(CAN_Type *);
     33          //FlexCAN 使能Msg缓冲区中断函数
     34          static void LPLD_CAN_EnableMsgInterrupt(CAN_Type *, uint8 );
     35          //FlexCAN 设置Msg缓冲区的CODE
     36          static void LPLD_CAN_SetMsgCode(CAN_Type *, uint8 , uint8 );
     37          //FlexCAN 获得Msg缓冲区的CODE
     38          static uint32 LPLD_CAN_GetMsgCode(CAN_Type *, uint8 );
     39          //FlexCAN 获得Msg缓冲区的TIMESTAMP
     40          static uint16 LPLD_CAN_GetMsgTimeStamp(CAN_Type *, uint8 );
     41          //FlexCAN 设置Msg缓冲区的ID
     42          void LPLD_CAN_SetMsgID(CAN_Type *, uint8 ,uint8, uint32 );
     43          //FlexCAN 获得Msg缓冲区的ID
     44          static uint32 LPLD_CAN_GetMsgID(CAN_Type *, uint8 );
     45          //FlexCAN 获得Msg缓冲区的长度
     46          uint8 LPLD_CAN_GetMsgLength(CAN_Type *canx, uint8 MSG_NUM);
     47          //FlexCAN 获得Msg缓冲区的数据
     48          static void LPLD_CAN_GetData(CAN_Type *canx, uint8 , uint8 ,  uint8 *);
     49          //FlexCAN 写Msg缓冲区的数据
     50          static void LPLD_CAN_WriteData(CAN_Type *, uint8 , uint8, uint8 * );
     51          //FlexCAN 传输中断函数
     52          void LPLD_CAN_Transmit_Interrupt(CAN_Type *, uint8 );
     53          //FlexCAN 接收中断函数
     54          static void LPLD_CAN_Receive_Interrupt(CAN_Type *, uint8 );
     55          //FlexCAN CANx的中断处理函数
     56          static void LPLD_CAN_MB_ISR(void);
     57          //设置16个Msg的结构体

   \                                 In section .bss, align 4
     58          CAN_MSGOBJ_InitTypeDef  flexcan_msgobj_param_t[MSG_MAX_NO] = {0};
   \                     flexcan_msgobj_param_t:
   \   00000000                      DS8 256
     59          //设置CANx Msg的中断回掉函数

   \                                 In section .bss, align 4
     60          CAN_ISR_CALLBACK CAN0_ISR[MSG_MAX_NO];
   \                     CAN0_ISR:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     61          CAN_ISR_CALLBACK CAN1_ISR[MSG_MAX_NO];
   \                     CAN1_ISR:
   \   00000000                      DS8 64
     62          
     63          /*
     64           * LPLD_CAN_Init
     65           * 在该函数中使能CANx，设置CANx的波特率，选择相应的工作模式
     66           * 通过CAN_InitTypeDef结构体对CAN进行初始化。
     67           * 
     68           * 参数:
     69           *    CAN_InitTypeDef--can_init_structure
     70           *                     具体定义见HW_CAN.h can_init_structure
     71           *
     72           * 输出:
     73           *    无
     74           *
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          void LPLD_CAN_Init(CAN_InitTypeDef can_init_structure)
     77          {
   \                     LPLD_CAN_Init: (+1)
   \   00000000   0xE92D 0x41F7      PUSH     {R0-R2,R4-R8,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
     78            uint8 i;
     79            CAN_Type *canx = can_init_structure.CAN_Canx;
   \   00000006   0x9C01             LDR      R4,[SP, #+4]
     80            uint32 baud = can_init_structure.CAN_BaudRate;
   \   00000008   0x9D02             LDR      R5,[SP, #+8]
     81            uint8  mask_mode = can_init_structure.CAN_RxMaskMode;
   \   0000000A   0xF89D 0x600C      LDRB     R6,[SP, #+12]
     82            PortPinsEnum_Type tx_pin = can_init_structure.CAN_TxPin;
   \   0000000E   0xF89D 0x700D      LDRB     R7,[SP, #+13]
     83            PortPinsEnum_Type rx_pin = can_init_structure.CAN_RxPin;
   \   00000012   0xF89D 0x800E      LDRB     R8,[SP, #+14]
     84          
     85            ASSERT(mask_mode <= CAN_MSGOBJ_GLOBAL_MASKING);
   \   00000016   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000018   0x2E02             CMP      R6,#+2
   \   0000001A   0xDB04             BLT.N    ??LPLD_CAN_Init_0
   \   0000001C   0x2155             MOVS     R1,#+85
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000022   0x.... 0x....      BL       assert_failed
     86            ASSERT(baud <= CAN_BAUD_RATE_1MBPS);
   \                     ??LPLD_CAN_Init_0: (+1)
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0xf4241
   \   0000002A   0x4285             CMP      R5,R0
   \   0000002C   0xD304             BCC.N    ??LPLD_CAN_Init_1
   \   0000002E   0x2156             MOVS     R1,#+86
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000034   0x.... 0x....      BL       assert_failed
     87              
     88            OSC->CR |= OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK;
   \                     ??LPLD_CAN_Init_1: (+1)
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable19_4  ;; 0x40065000
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0xF050 0x00A0      ORRS     R0,R0,#0xA0
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_4  ;; 0x40065000
   \   00000046   0x7008             STRB     R0,[R1, #+0]
     89            
     90            if(canx == CAN0)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x40024000
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD108             BNE.N    ??LPLD_CAN_Init_2
     91              SIM->SCGC6 |= SIM_SCGC6_FLEXCAN0_MASK;
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4004803c
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4004803c
   \   0000005E   0x6008             STR      R0,[R1, #+0]
   \   00000060   0xE007             B.N      ??LPLD_CAN_Init_3
     92            else
     93              SIM->SCGC3 |= SIM_SCGC3_FLEXCAN1_MASK;
   \                     ??LPLD_CAN_Init_2: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40048030
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40048030
   \   00000070   0x6008             STR      R0,[R1, #+0]
     94            
     95            if(canx == CAN0)
   \                     ??LPLD_CAN_Init_3: (+1)
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x40024000
   \   00000076   0x4284             CMP      R4,R0
   \   00000078   0xD11E             BNE.N    ??LPLD_CAN_Init_4
     96            {
     97              if(tx_pin == PTB18)//CAN0_TX
   \   0000007A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007C   0x2F32             CMP      R7,#+50
   \   0000007E   0xD105             BNE.N    ??LPLD_CAN_Init_5
     98              {
     99                PORTB->PCR[18] = PORT_PCR_MUX(2)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; 
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable19_8  ;; 0x4004a048
   \   00000084   0xF240 0x2103      MOVW     R1,#+515
   \   00000088   0x6001             STR      R1,[R0, #+0]
   \   0000008A   0xE004             B.N      ??LPLD_CAN_Init_6
    100              }
    101              else
    102              {
    103                PORTA->PCR[12] = PORT_PCR_MUX(2); 
   \                     ??LPLD_CAN_Init_5: (+1)
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable19_9  ;; 0x40049030
   \   00000090   0xF44F 0x7100      MOV      R1,#+512
   \   00000094   0x6001             STR      R1,[R0, #+0]
    104              }
    105          
    106              if(rx_pin == PTB19)//CAN0_RX
   \                     ??LPLD_CAN_Init_6: (+1)
   \   00000096   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000009A   0xF1B8 0x0F33      CMP      R8,#+51
   \   0000009E   0xD105             BNE.N    ??LPLD_CAN_Init_7
    107              {
    108                PORTB->PCR[19] = PORT_PCR_MUX(2)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; 
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_10  ;; 0x4004a04c
   \   000000A4   0xF240 0x2103      MOVW     R1,#+515
   \   000000A8   0x6001             STR      R1,[R0, #+0]
   \   000000AA   0xE023             B.N      ??LPLD_CAN_Init_8
    109              }
    110              else
    111              {
    112                PORTA->PCR[13] = PORT_PCR_MUX(2); 
   \                     ??LPLD_CAN_Init_7: (+1)
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable19_11  ;; 0x40049034
   \   000000B0   0xF44F 0x7100      MOV      R1,#+512
   \   000000B4   0x6001             STR      R1,[R0, #+0]
   \   000000B6   0xE01D             B.N      ??LPLD_CAN_Init_8
    113              }
    114            }
    115            else
    116            {
    117              if(tx_pin == PTC17)//CAN1_TX
   \                     ??LPLD_CAN_Init_4: (+1)
   \   000000B8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000BA   0x2F51             CMP      R7,#+81
   \   000000BC   0xD105             BNE.N    ??LPLD_CAN_Init_9
    118              {
    119                PORTC->PCR[17] = PORT_PCR_MUX(2)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; 
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable19_12  ;; 0x4004b044
   \   000000C2   0xF240 0x2103      MOVW     R1,#+515
   \   000000C6   0x6001             STR      R1,[R0, #+0]
   \   000000C8   0xE004             B.N      ??LPLD_CAN_Init_10
    120              }
    121              else
    122              {
    123                PORTE->PCR[24] = PORT_PCR_MUX(2)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
   \                     ??LPLD_CAN_Init_9: (+1)
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable19_13  ;; 0x4004d060
   \   000000CE   0xF240 0x2103      MOVW     R1,#+515
   \   000000D2   0x6001             STR      R1,[R0, #+0]
    124              }
    125          
    126              if(rx_pin == PTC16)//CAN1_RX
   \                     ??LPLD_CAN_Init_10: (+1)
   \   000000D4   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000000D8   0xF1B8 0x0F50      CMP      R8,#+80
   \   000000DC   0xD105             BNE.N    ??LPLD_CAN_Init_11
    127              {
    128                PORTC->PCR[16] = PORT_PCR_MUX(2)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; 
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable19_14  ;; 0x4004b040
   \   000000E2   0xF240 0x2103      MOVW     R1,#+515
   \   000000E6   0x6001             STR      R1,[R0, #+0]
   \   000000E8   0xE004             B.N      ??LPLD_CAN_Init_8
    129              }
    130              else
    131              {
    132                PORTE->PCR[25] = PORT_PCR_MUX(2)| PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
   \                     ??LPLD_CAN_Init_11: (+1)
   \   000000EA   0x.... 0x....      LDR.W    R0,??DataTable19_15  ;; 0x4004d064
   \   000000EE   0xF240 0x2103      MOVW     R1,#+515
   \   000000F2   0x6001             STR      R1,[R0, #+0]
    133              }
    134            } 
    135            //禁止CAN外设
    136            canx->MCR   |= CAN_MCR_MDIS_MASK;
   \                     ??LPLD_CAN_Init_8: (+1)
   \   000000F4   0x6820             LDR      R0,[R4, #+0]
   \   000000F6   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000000FA   0x6020             STR      R0,[R4, #+0]
    137            //只有在LPM_ACK = 1情况下才可以选择钟源
    138            canx->CTRL1 |= CAN_CTRL1_CLKSRC_MASK;  //选择peripheral clock作为CAN外设的时钟源
   \   000000FC   0x6860             LDR      R0,[R4, #+4]
   \   000000FE   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   00000102   0x6060             STR      R0,[R4, #+4]
    139                                                   //设置此位必须在CAN停止模式下
    140            //在时钟初始化完毕和CAN总线使能完毕后，
    141            //单片机自动进入冻结模式
    142            //只有在冻结模式下才能配置大多数CAN总线寄存器
    143            //使能冻结模式 
    144            canx->MCR |= CAN_MCR_FRZ_MASK;
   \   00000104   0x6820             LDR      R0,[R4, #+0]
   \   00000106   0xF050 0x4080      ORRS     R0,R0,#0x40000000
   \   0000010A   0x6020             STR      R0,[R4, #+0]
    145            canx->MCR &= ~CAN_MCR_MDIS_MASK; 
   \   0000010C   0x6820             LDR      R0,[R4, #+0]
   \   0000010E   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   00000110   0x0840             LSRS     R0,R0,#+1
   \   00000112   0x6020             STR      R0,[R4, #+0]
    146            
    147            while(!(canx->MCR & CAN_MCR_LPMACK_MASK));	
   \                     ??LPLD_CAN_Init_12: (+1)
   \   00000114   0x6820             LDR      R0,[R4, #+0]
   \   00000116   0x02C0             LSLS     R0,R0,#+11
   \   00000118   0xD5FC             BPL.N    ??LPLD_CAN_Init_12
    148          
    149            //进行软件复位
    150            canx->MCR ^= CAN_MCR_SOFTRST_MASK;
   \   0000011A   0x6820             LDR      R0,[R4, #+0]
   \   0000011C   0xF090 0x7000      EORS     R0,R0,#0x2000000
   \   00000120   0x6020             STR      R0,[R4, #+0]
    151            while(canx->MCR & CAN_MCR_SOFTRST_MASK);
   \                     ??LPLD_CAN_Init_13: (+1)
   \   00000122   0x6820             LDR      R0,[R4, #+0]
   \   00000124   0x0180             LSLS     R0,R0,#+6
   \   00000126   0xD4FC             BMI.N    ??LPLD_CAN_Init_13
    152                      
    153            //等待进入冻结模式 
    154            while(!(canx->MCR & CAN_MCR_FRZACK_MASK));
   \                     ??LPLD_CAN_Init_14: (+1)
   \   00000128   0x6820             LDR      R0,[R4, #+0]
   \   0000012A   0x01C0             LSLS     R0,R0,#+7
   \   0000012C   0xD5FC             BPL.N    ??LPLD_CAN_Init_14
    155            
    156            if(mask_mode == CAN_MSGOBJ_GLOBAL_MASKING)
   \   0000012E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000130   0x2E01             CMP      R6,#+1
   \   00000132   0xD104             BNE.N    ??LPLD_CAN_Init_15
    157            {
    158              canx->MCR &= ~CAN_MCR_IRMQ_MASK;   //使能全局匹配寄存器禁止单独匹配 
   \   00000134   0x6820             LDR      R0,[R4, #+0]
   \   00000136   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   0000013A   0x6020             STR      R0,[R4, #+0]
   \   0000013C   0xE003             B.N      ??LPLD_CAN_Init_16
    159            }
    160            else
    161            {
    162              canx->MCR |= CAN_MCR_IRMQ_MASK;   //使能Msg单独匹配 
   \                     ??LPLD_CAN_Init_15: (+1)
   \   0000013E   0x6820             LDR      R0,[R4, #+0]
   \   00000140   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000144   0x6020             STR      R0,[R4, #+0]
    163            }
    164            //将MB_MAX个邮箱缓冲区内容清0
    165            for(i = 0;i < MSG_MAX_NO; i++)
   \                     ??LPLD_CAN_Init_16: (+1)
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0xE018             B.N      ??LPLD_CAN_Init_17
    166            {
    167              canx->MB[i].CS    = 0x00000000;
   \                     ??LPLD_CAN_Init_18: (+1)
   \   0000014A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000014C   0xEB14 0x1100      ADDS     R1,R4,R0, LSL #+4
   \   00000150   0x2200             MOVS     R2,#+0
   \   00000152   0xF8C1 0x2080      STR      R2,[R1, #+128]
    168              canx->MB[i].ID    = 0x00000000;
   \   00000156   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000158   0xEB14 0x1100      ADDS     R1,R4,R0, LSL #+4
   \   0000015C   0x2200             MOVS     R2,#+0
   \   0000015E   0xF8C1 0x2084      STR      R2,[R1, #+132]
    169              canx->MB[i].WORD0 = 0x00000000;
   \   00000162   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000164   0xEB14 0x1100      ADDS     R1,R4,R0, LSL #+4
   \   00000168   0x2200             MOVS     R2,#+0
   \   0000016A   0xF8C1 0x2088      STR      R2,[R1, #+136]
    170              canx->MB[i].WORD1 = 0x00000000;        
   \   0000016E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000170   0xEB14 0x1100      ADDS     R1,R4,R0, LSL #+4
   \   00000174   0x2200             MOVS     R2,#+0
   \   00000176   0xF8C1 0x208C      STR      R2,[R1, #+140]
    171            }
   \   0000017A   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_CAN_Init_17: (+1)
   \   0000017C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000017E   0x2810             CMP      R0,#+16
   \   00000180   0xDBE3             BLT.N    ??LPLD_CAN_Init_18
    172            
    173            canx->MCR |= CAN_MCR_SRXDIS_MASK ; //禁止自我接收
   \   00000182   0x6820             LDR      R0,[R4, #+0]
   \   00000184   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000188   0x6020             STR      R0,[R4, #+0]
    174            //canx->MCR |= CAN_MCR_RFEN_MASK ;   //使能接收FIFO
    175            //canx->CTRL2 |= CAN_CTRL2_RFFN(0);
    176            //canx->MCR |= CAN_MCR_IDAM(0);
    177            
    178            //配置相关的寄存器
    179            canx->CTRL2 &= ~CAN_CTRL2_EACEN_MASK; //接收邮箱过滤IDE匹配，RTR不匹配
   \   0000018A   0x6B60             LDR      R0,[R4, #+52]
   \   0000018C   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   00000190   0x6360             STR      R0,[R4, #+52]
    180            canx->CTRL2 &= ~CAN_CTRL2_RRS_MASK;  //不自动产生远程请求帧产生
   \   00000192   0x6B60             LDR      R0,[R4, #+52]
   \   00000194   0xF430 0x3000      BICS     R0,R0,#0x20000
   \   00000198   0x6360             STR      R0,[R4, #+52]
    181            canx->CTRL2 &= ~CAN_CTRL2_MRP_MASK;   //ID首先从邮箱中匹配
   \   0000019A   0x6B60             LDR      R0,[R4, #+52]
   \   0000019C   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   000001A0   0x6360             STR      R0,[R4, #+52]
    182          
    183            //canx->CTRL1 |= CAN_CTRL1_LBUF_MASK;  //发送的时候从低Msg开始
    184            canx->CTRL1 &= ~CAN_CTRL1_LBUF_MASK;   //发送的时候从低优先级发送
   \   000001A2   0x6860             LDR      R0,[R4, #+4]
   \   000001A4   0xF030 0x0010      BICS     R0,R0,#0x10
   \   000001A8   0x6060             STR      R0,[R4, #+4]
    185                                       
    186            //canx->CTRL1 |= CAN_CTRL1_LPB_MASK;  //loop 模式,用于测试
    187            canx->CTRL1 &= ~CAN_CTRL1_LPB_MASK;   //使用正常模式
   \   000001AA   0x6860             LDR      R0,[R4, #+4]
   \   000001AC   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   000001B0   0x6060             STR      R0,[R4, #+4]
    188            //设置CAN总线通信的波特率
    189            LPLD_CAN_SetBaudRate(canx,baud);
   \   000001B2   0x0029             MOVS     R1,R5
   \   000001B4   0x0020             MOVS     R0,R4
   \   000001B6   0x.... 0x....      BL       LPLD_CAN_SetBaudRate
    190          
    191            //清空CAN自由计数器 
    192            canx->TIMER = 0x0000; 
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0x60A0             STR      R0,[R4, #+8]
    193             /*
    194            如果MCR的IRMQ为1，表示每个邮箱都可以单独进行ID匹配
    195            注意：如果是low cost MCUs（低配置的MCU），没有单独匹配这项功能。
    196                    1\ID匹配会选择free to receive状态的邮箱作为胜者，
    197                    获胜的邮箱可以从接收缓冲区内将接收的帧 Move in 到MB中；
    198                    2\如果出现ID号相同的邮箱，会首先从序号低的邮箱进行匹配，如果
    199                    低序号邮箱是non free to receive状态，那么匹配过程将会查找
    200                    下一个邮箱直到找到free to receive状态且ID相同的邮箱；
    201                    3\如果ID号相同的邮箱都处于non free to receive状态，那么匹配过程
    202                    将停止在最后一个有相同ID的邮箱位置，将帧Move in 到MB中并且将该邮
    203                    箱的状态设置成OVERRUN。
    204                    RXIMR[i]存储在单片机的RAM中，只有在CAN冻结模式下可写。
    205                    此时CANx_RXMGMASK、CANx_RX14MASK、CANx_RX15MASK不起作用
    206            */
    207            if(canx->MCR & CAN_MCR_IRMQ_MASK)
   \   000001BE   0x6820             LDR      R0,[R4, #+0]
   \   000001C0   0x03C0             LSLS     R0,R0,#+15
   \   000001C2   0xD50C             BPL.N    ??LPLD_CAN_Init_19
    208            {
    209              for(i = 0;i < MSG_MAX_NO; i++)
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0xE007             B.N      ??LPLD_CAN_Init_20
    210              {
    211                canx->RXIMR[i] = 0x1FFFFFFFL;//设置邮箱29位全部屏蔽
   \                     ??LPLD_CAN_Init_21: (+1)
   \   000001C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001CA   0xEB14 0x0180      ADDS     R1,R4,R0, LSL #+2
   \   000001CE   0xF07F 0x4260      MVNS     R2,#-536870912
   \   000001D2   0xF8C1 0x2880      STR      R2,[R1, #+2176]
    212              }
   \   000001D6   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_CAN_Init_20: (+1)
   \   000001D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001DA   0x2810             CMP      R0,#+16
   \   000001DC   0xDBF4             BLT.N    ??LPLD_CAN_Init_21
    213            } 
    214           /*
    215            如果MCR的IRMQ为0，表示使用全局匹配寄存器进行匹配，
    216                    此时CANx_RXMGMASK、CANx_RX14MASK、CANx_RX15MASK起作用；
    217                    CANx_RXMGMASK管理除CANx_RX14MASK、CANx_RX15MASK以外的所有Msg；
    218                    ID匹配过程会停止在找到的第一个ID相同的邮箱位置，不管该邮箱是否处于
    219                    free to receive状态。
    220            */
    221          
    222            canx->RXMGMASK = 0x1FFFFFFF; //29位ID全部匹配            
   \                     ??LPLD_CAN_Init_19: (+1)
   \   000001DE   0xF07F 0x4060      MVNS     R0,#-536870912
   \   000001E2   0x6120             STR      R0,[R4, #+16]
    223            canx->RX14MASK = 0x1FFFFFFF;
   \   000001E4   0xF07F 0x4060      MVNS     R0,#-536870912
   \   000001E8   0x6160             STR      R0,[R4, #+20]
    224            canx->RX15MASK = 0x1FFFFFFF; 
   \   000001EA   0xF07F 0x4060      MVNS     R0,#-536870912
   \   000001EE   0x61A0             STR      R0,[R4, #+24]
    225           
    226            canx->MCR &= ~(CAN_MCR_HALT_MASK); 
   \   000001F0   0x6820             LDR      R0,[R4, #+0]
   \   000001F2   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   000001F6   0x6020             STR      R0,[R4, #+0]
    227            //等到不在冻结模式，休眠模式或者停止模式
    228            while( canx->MCR & CAN_MCR_FRZACK_MASK); 
   \                     ??LPLD_CAN_Init_22: (+1)
   \   000001F8   0x6820             LDR      R0,[R4, #+0]
   \   000001FA   0x01C0             LSLS     R0,R0,#+7
   \   000001FC   0xD4FC             BMI.N    ??LPLD_CAN_Init_22
    229            
    230            while( canx->MCR & CAN_MCR_NOTRDY_MASK);
   \                     ??LPLD_CAN_Init_23: (+1)
   \   000001FE   0x6820             LDR      R0,[R4, #+0]
   \   00000200   0x0100             LSLS     R0,R0,#+4
   \   00000202   0xD4FC             BMI.N    ??LPLD_CAN_Init_23
    231          }
   \   00000204   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return
    232          /*
    233           * LPLD_CAN_SetBaudRate
    234           * 设置CAN波特率,PLL必须是100Mhz
    235           * 参数:
    236           *    CAN_Type *canx
    237           *      |___CAN0 --CAN0号模块
    238           *      |___CAN1 --CAN0号模块
    239           *    baud 波特率
    240           *      |__CAN_BAUD_RATE_50KBPS  --波特率50KBPS
    241           *      |__CAN_BAUD_RATE_100KBPS --波特率100KBPS
    242           *      |__CAN_BAUD_RATE_250KBPS --波特率250KBPS
    243           *      |__CAN_BAUD_RATE_500KBPS --波特率500KBPS
    244           *      |__CAN_BAUD_RATE_1MBPS   --波特率1MBPS
    245           *  输出：
    246           *    无
    247          */

   \                                 In section .text, align 2, keep-with-next
    248          static void LPLD_CAN_SetBaudRate(CAN_Type *canx,uint32 baud)
    249          {
   \                     LPLD_CAN_SetBaudRate: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    250            uint8 prescale;
    251            //1个CAN总线位的时间量子：Time Quanta = SYNC_SEG + (PROP_SEG + PSEG1 + 2) + (PSEG2 + 1)，
    252            //SYNC_SEG =  1 （固定值）
    253            ASSERT(baud <= CAN_BAUD_RATE_1MBPS);
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable19_3  ;; 0xf4241
   \   0000000A   0x4285             CMP      R5,R0
   \   0000000C   0xD304             BCC.N    ??LPLD_CAN_SetBaudRate_0
   \   0000000E   0x21FD             MOVS     R1,#+253
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable19_2
   \   00000014   0x.... 0x....      BL       assert_failed
    254            switch(baud)
   \                     ??LPLD_CAN_SetBaudRate_0: (+1)
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0xF248 0x2135      MOVW     R1,#+33333
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD02A             BEQ.N    ??LPLD_CAN_SetBaudRate_1
   \   00000022   0xF24C 0x3150      MOVW     R1,#+50000
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD037             BEQ.N    ??LPLD_CAN_SetBaudRate_2
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable19_16  ;; 0x14585
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD022             BEQ.N    ??LPLD_CAN_SetBaudRate_1
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable19_17  ;; 0x186a0
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD01E             BEQ.N    ??LPLD_CAN_SetBaudRate_1
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable19_18  ;; 0x1e848
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD01A             BEQ.N    ??LPLD_CAN_SetBaudRate_1
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable19_19  ;; 0x3d090
   \   00000046   0x4288             CMP      R0,R1
   \   00000048   0xD027             BEQ.N    ??LPLD_CAN_SetBaudRate_2
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable19_20  ;; 0x7a120
   \   0000004E   0x4288             CMP      R0,R1
   \   00000050   0xD023             BEQ.N    ??LPLD_CAN_SetBaudRate_2
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable19_21  ;; 0xf4240
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD130             BNE.N    ??LPLD_CAN_SetBaudRate_3
    255            {
    256              case CAN_BAUD_RATE_1MBPS:
    257                {
    258                  prescale = CAN_GET_PRESCALE(g_bus_clock,baud,8); 
   \                     ??LPLD_CAN_SetBaudRate_4: (+1)
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable19_22
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x00E9             LSLS     R1,R5,#+3
   \   00000062   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000066   0x1E40             SUBS     R0,R0,#+1
    259                  //设置CAN总线通信的波特率
    260                  canx->CTRL1 = (0 | CAN_CTRL1_PROPSEG(3)
    261                                   | CAN_CTRL1_RJW(0)   
    262                                   | CAN_CTRL1_PSEG1(0) 
    263                                   | CAN_CTRL1_PSEG2(1)
    264                                   | CAN_CTRL1_PRESDIV(prescale)); 
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0x0600             LSLS     R0,R0,#+24
   \   0000006C   0xF440 0x3080      ORR      R0,R0,#0x10000
   \   00000070   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000074   0x6060             STR      R0,[R4, #+4]
    265                  break;
   \   00000076   0xE021             B.N      ??LPLD_CAN_SetBaudRate_5
    266                }
    267              case CAN_BAUD_RATE_33KBPS:
    268              case CAN_BAUD_RATE_83KBPS:
    269              case CAN_BAUD_RATE_100KBPS:
    270              case CAN_BAUD_RATE_125KBPS:
    271                {
    272                  //设置time_quanta = 12 
    273                  prescale = CAN_GET_PRESCALE(g_bus_clock,baud,12); 
   \                     ??LPLD_CAN_SetBaudRate_1: (+1)
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable19_22
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x210C             MOVS     R1,#+12
   \   00000080   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000084   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000088   0x1E40             SUBS     R0,R0,#+1
    274                  //设置CAN总线通信的波特率
    275                  canx->CTRL1 = (0 | CAN_CTRL1_PROPSEG(2) 
    276                                   | CAN_CTRL1_RJW(2)  
    277                                   | CAN_CTRL1_PSEG1(3) 
    278                                   | CAN_CTRL1_PSEG2(3)
    279                                   | CAN_CTRL1_PRESDIV(prescale)); 
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0x0600             LSLS     R0,R0,#+24
   \   0000008E   0xF440 0x001B      ORR      R0,R0,#0x9B0000
   \   00000092   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000096   0x6060             STR      R0,[R4, #+4]
    280                  break;
   \   00000098   0xE010             B.N      ??LPLD_CAN_SetBaudRate_5
    281                }
    282              case CAN_BAUD_RATE_50KBPS:
    283              case CAN_BAUD_RATE_500KBPS:
    284              case CAN_BAUD_RATE_250KBPS:
    285                {
    286                  //设置time_quanta = 12 
    287                  prescale = CAN_GET_PRESCALE(g_bus_clock,baud,12); 
   \                     ??LPLD_CAN_SetBaudRate_2: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable19_22
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x210C             MOVS     R1,#+12
   \   000000A2   0xFB01 0xF105      MUL      R1,R1,R5
   \   000000A6   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000AA   0x1E40             SUBS     R0,R0,#+1
    288                  //设置CAN总线通信的波特率
    289                  canx->CTRL1 = (0 | CAN_CTRL1_PROPSEG(2)
    290                                   | CAN_CTRL1_RJW(1)  
    291                                   | CAN_CTRL1_PSEG1(3) 
    292                                   | CAN_CTRL1_PSEG2(3)
    293                                   | CAN_CTRL1_PRESDIV(prescale)); 
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x0600             LSLS     R0,R0,#+24
   \   000000B0   0xF440 0x00B6      ORR      R0,R0,#0x5B0000
   \   000000B4   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000B8   0x6060             STR      R0,[R4, #+4]
    294                  break;
   \   000000BA   0xE7FF             B.N      ??LPLD_CAN_SetBaudRate_5
    295                }
    296              default:break;
    297            }
    298          }
   \                     ??LPLD_CAN_SetBaudRate_3: (+1)
   \                     ??LPLD_CAN_SetBaudRate_5: (+1)
   \   000000BC   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    299          
    300          /*
    301           * LPLD_CAN_Deinit
    302           * CAN反初始化函数，在该函数中禁止CANx的总线时钟，禁止模块中断，关闭CAN模块
    303           * 
    304           * 参数:
    305           *    CAN_InitTypeDef--can_init_structure
    306           *                     具体定义见HW_CAN.h can_init_structure
    307           * 输出:
    308           *    无
    309           *
    310          */

   \                                 In section .text, align 2, keep-with-next
    311          void LPLD_CAN_Deinit(CAN_InitTypeDef can_init_structure)
    312          {
   \                     LPLD_CAN_Deinit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    313            CAN_Type *canx = can_init_structure.CAN_Canx;
   \   00000002   0x0004             MOVS     R4,R0
    314            
    315            if(canx == CAN0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x40024000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD10B             BNE.N    ??LPLD_CAN_Deinit_0
    316            {
    317              SIM->SCGC6 &= ~SIM_SCGC6_FLEXCAN0_MASK;
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable19_6  ;; 0x4004803c
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable19_6  ;; 0x4004803c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    318              disable_irq(CAN0_ORed_Message_buffer_IRQn);
   \   0000001C   0x201D             MOVS     R0,#+29
   \   0000001E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000022   0xE00A             B.N      ??LPLD_CAN_Deinit_1
    319            }
    320            else
    321            {
    322              SIM->SCGC3 &= ~SIM_SCGC3_FLEXCAN1_MASK;
   \                     ??LPLD_CAN_Deinit_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable19_7  ;; 0x40048030
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF030 0x0010      BICS     R0,R0,#0x10
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable19_7  ;; 0x40048030
   \   00000032   0x6008             STR      R0,[R1, #+0]
    323              enable_irq(CAN1_ORed_Message_buffer_IRQn);
   \   00000034   0x2025             MOVS     R0,#+37
   \   00000036   0x.... 0x....      BL       NVIC_EnableIRQ
    324            }
    325            //禁止CAN外设
    326            canx->MCR |= CAN_MCR_MDIS_MASK;
   \                     ??LPLD_CAN_Deinit_1: (+1)
   \   0000003A   0x6820             LDR      R0,[R4, #+0]
   \   0000003C   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000040   0x6020             STR      R0,[R4, #+0]
    327            canx->MCR |= CAN_MCR_HALT_MASK; 
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000048   0x6020             STR      R0,[R4, #+0]
    328            canx->MCR |= CAN_MCR_FRZ_MASK;
   \   0000004A   0x6820             LDR      R0,[R4, #+0]
   \   0000004C   0xF050 0x4080      ORRS     R0,R0,#0x40000000
   \   00000050   0x6020             STR      R0,[R4, #+0]
    329          }
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
    330          /*
    331           * LPLD_CAN_EnableIrq
    332           * 使能CAN模块中断
    333           * 
    334           * 参数:
    335           *    CAN_InitTypeDef--can_init_structure
    336           *                     具体定义见HW_CAN.h can_init_structure
    337           * 输出:
    338           *    无
    339           *
    340          */

   \                                 In section .text, align 2, keep-with-next
    341          void LPLD_CAN_EnableIrq(CAN_InitTypeDef can_init_structure)
    342          {
   \                     LPLD_CAN_EnableIrq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    343            CAN_Type *canx = can_init_structure.CAN_Canx;
    344              
    345            if(canx == CAN0)
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable19_5  ;; 0x40024000
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD103             BNE.N    ??LPLD_CAN_EnableIrq_0
    346            {
    347              enable_irq(CAN0_ORed_Message_buffer_IRQn);
   \   0000000A   0x201D             MOVS     R0,#+29
   \   0000000C   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000010   0xE006             B.N      ??LPLD_CAN_EnableIrq_1
    348            }
    349            else if(canx == CAN1)
   \                     ??LPLD_CAN_EnableIrq_0: (+1)
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable19_23  ;; 0x400a4000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD102             BNE.N    ??LPLD_CAN_EnableIrq_1
    350            {
    351              enable_irq(CAN1_ORed_Message_buffer_IRQn);
   \   0000001A   0x2025             MOVS     R0,#+37
   \   0000001C   0x.... 0x....      BL       NVIC_EnableIRQ
    352            }
    353          }
   \                     ??LPLD_CAN_EnableIrq_1: (+1)
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    354          
    355          /*
    356           * LPLD_CAN_DisableIrq
    357           * 禁止CAN模块中断
    358           * 
    359           * 参数:
    360           *    CAN_InitTypeDef--can_init_structure
    361           *                     具体定义见HW_CAN.h can_init_structure
    362           * 输出:
    363           *    无
    364           *
    365          */

   \                                 In section .text, align 2, keep-with-next
    366          void LPLD_CAN_DisableIrq(CAN_InitTypeDef can_init_structure)
    367          {
   \                     LPLD_CAN_DisableIrq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    368            CAN_Type *canx = can_init_structure.CAN_Canx;
    369              
    370            if(canx == CAN0)
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable19_5  ;; 0x40024000
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD103             BNE.N    ??LPLD_CAN_DisableIrq_0
    371            {
    372              disable_irq(CAN0_ORed_Message_buffer_IRQn);
   \   0000000A   0x201D             MOVS     R0,#+29
   \   0000000C   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000010   0xE006             B.N      ??LPLD_CAN_DisableIrq_1
    373            }
    374            else if(canx == CAN1)
   \                     ??LPLD_CAN_DisableIrq_0: (+1)
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable19_23  ;; 0x400a4000
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD102             BNE.N    ??LPLD_CAN_DisableIrq_1
    375            {
    376              disable_irq(CAN1_ORed_Message_buffer_IRQn);
   \   0000001A   0x2025             MOVS     R0,#+37
   \   0000001C   0x.... 0x....      BL       NVIC_DisableIRQ
    377            }
    378          }
   \                     ??LPLD_CAN_DisableIrq_1: (+1)
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    379          
    380          /*
    381           * LPLD_CAN_InitMessageObject
    382           *
    383           * 设置CAN Message buffer（Msg）格式，通过CAN_MSGOBJ_InitTypeDef
    384           * 结构体对CAN Message buffer进行初始化。
    385           * 
    386           * 参数:
    387           *    CAN_MSGOBJ_InitTypeDef--can_msg_init_structure
    388           *                            具体定义见HW_CAN.h CAN_MSGOBJ_InitTypeDef
    389           *    message_id
    390           *      设置message_id，id长度根据CAN_MSGOBJ_InitTypeDef的参数而定
    391           *      id的长度分为11位标准帧和29位扩展帧两种
    392           *      CAN_MSGOBJ_ID_STD 表示标准帧，如CAN_MSGOBJ_InitTypeDef中设置id长度为CAN_MSGOBJ_ID_STD
    393           *      此时message_id最长为11位，不能超过0x0FFF；
    394           *      CAN_MSGOBJ_ID_EXT 表示扩展帧，如CAN_MSGOBJ_InitTypeDef中设置id长度为CAN_MSGOBJ_ID_EXT
    395           *      此时message_id最长为29位，不能超过0x1FFFFFFF；
    396           * 输出:
    397           *    无
    398           *
    399           */

   \                                 In section .text, align 2, keep-with-next
    400          void LPLD_CAN_InitMessageObject(CAN_MSGOBJ_InitTypeDef can_msg_init_structure,uint32 rx_id)
    401          { 
   \                     LPLD_CAN_InitMessageObject: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
    402            uint8     msg_num_temp  = can_msg_init_structure.CAN_MsgNum;
   \   00000002   0xF89D 0x4004      LDRB     R4,[SP, #+4]
    403            uint8     dir           = can_msg_init_structure.CAN_MsgDirection;
   \   00000006   0xF89D 0x1008      LDRB     R1,[SP, #+8]
    404            CAN_Type *canx_ptr      = can_msg_init_structure.CAN_Canx;
   \   0000000A   0x9D00             LDR      R5,[SP, #+0]
    405            uint32    id_type       = can_msg_init_structure.CAN_MsgIdLength;
   \   0000000C   0xF89D 0x2005      LDRB     R2,[SP, #+5]
    406            uint32    cs_temp = CAN_MB_CS_CODE(CAN_MSGOBJ_RX_EMPTY);
   \   00000010   0xF05F 0x6080      MOVS     R0,#+67108864
    407            CAN_ISR_CALLBACK isr_func = can_msg_init_structure.CAN_Isr;
   \   00000014   0x9E03             LDR      R6,[SP, #+12]
    408            uint32    id_temp;	
    409            
    410            if(dir == CAN_MSGOBJ_DIR_RX)
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x2901             CMP      R1,#+1
   \   0000001A   0xD11D             BNE.N    ??LPLD_CAN_InitMessageObject_0
    411            {
    412              canx_ptr->MB[msg_num_temp].CS = CAN_MB_CS_CODE(CAN_MSGOBJ_RX_INACTIVE); 
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0xEB15 0x1104      ADDS     R1,R5,R4, LSL #+4
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0xF8C1 0x3080      STR      R3,[R1, #+128]
   \   00000028   0x9908             LDR      R1,[SP, #+32]
    413              //设置Msg的ID
    414              if(id_type == CAN_MSGOBJ_ID_STD)
   \   0000002A   0x2A00             CMP      R2,#+0
   \   0000002C   0xD104             BNE.N    ??LPLD_CAN_InitMessageObject_1
    415              {
    416                id_temp =  CAN_MB_ID_STD(rx_id);
   \   0000002E   0x.... 0x....      LDR.W    R3,??DataTable19_24  ;; 0x1ffc0000
   \   00000032   0xEA13 0x4181      ANDS     R1,R3,R1, LSL #+18
   \   00000036   0xE001             B.N      ??LPLD_CAN_InitMessageObject_2
    417              }
    418              else
    419              {
    420                id_temp =  CAN_MB_ID_EXT(rx_id);
   \                     ??LPLD_CAN_InitMessageObject_1: (+1)
   \   00000038   0x00C9             LSLS     R1,R1,#+3        ;; ZeroExtS R1,R1,#+3,#+3
   \   0000003A   0x08C9             LSRS     R1,R1,#+3
    421              }
    422              canx_ptr->MB[msg_num_temp].ID = id_temp;  
   \                     ??LPLD_CAN_InitMessageObject_2: (+1)
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0xEB15 0x1304      ADDS     R3,R5,R4, LSL #+4
   \   00000042   0xF8C3 0x1084      STR      R1,[R3, #+132]
    423              canx_ptr->MB[msg_num_temp].CS = cs_temp | CAN_MB_CS_IDE(id_type);
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0xEB15 0x1104      ADDS     R1,R5,R4, LSL #+4
   \   0000004C   0x0552             LSLS     R2,R2,#+21
   \   0000004E   0xF412 0x1200      ANDS     R2,R2,#0x200000
   \   00000052   0x4310             ORRS     R0,R2,R0
   \   00000054   0xF8C1 0x0080      STR      R0,[R1, #+128]
    424            }
    425            if(can_msg_init_structure.CAN_MsgInterrupt == TRUE)
   \                     ??LPLD_CAN_InitMessageObject_0: (+1)
   \   00000058   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xD11A             BNE.N    ??LPLD_CAN_InitMessageObject_3
    426            {
    427              LPLD_CAN_EnableMsgInterrupt(canx_ptr,msg_num_temp);//使能Msg中断 
   \   00000060   0x0021             MOVS     R1,R4
   \   00000062   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0x.... 0x....      BL       LPLD_CAN_EnableMsgInterrupt
    428              //设置Msg中断回掉函数
    429              if(canx_ptr == CAN0)
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x40024000
   \   0000006E   0x4285             CMP      R5,R0
   \   00000070   0xD108             BNE.N    ??LPLD_CAN_InitMessageObject_4
    430              {
    431                if(isr_func != NULL)
   \   00000072   0x0030             MOVS     R0,R6
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD01F             BEQ.N    ??LPLD_CAN_InitMessageObject_5
    432                {
    433                  CAN0_ISR[msg_num_temp] = isr_func;
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable19_25
   \   0000007E   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
   \   00000082   0xE019             B.N      ??LPLD_CAN_InitMessageObject_5
    434                }
    435              }
    436              else
    437              {
    438                if(isr_func != NULL)
   \                     ??LPLD_CAN_InitMessageObject_4: (+1)
   \   00000084   0x0030             MOVS     R0,R6
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD016             BEQ.N    ??LPLD_CAN_InitMessageObject_5
    439                {
    440                  CAN1_ISR[msg_num_temp] = isr_func;
   \   0000008A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable19_26
   \   00000090   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
   \   00000094   0xE010             B.N      ??LPLD_CAN_InitMessageObject_5
    441                }
    442              }
    443            }
    444            else
    445            {
    446              if(canx_ptr == CAN0)
   \                     ??LPLD_CAN_InitMessageObject_3: (+1)
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable19_5  ;; 0x40024000
   \   0000009A   0x4285             CMP      R5,R0
   \   0000009C   0xD106             BNE.N    ??LPLD_CAN_InitMessageObject_6
    447              {
    448                  CAN0_ISR[msg_num_temp] = NULL; 
   \   0000009E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable19_25
   \   000000A4   0x2100             MOVS     R1,#+0
   \   000000A6   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
   \   000000AA   0xE005             B.N      ??LPLD_CAN_InitMessageObject_5
    449              }
    450              else
    451              {
    452                  CAN1_ISR[msg_num_temp] = NULL;
   \                     ??LPLD_CAN_InitMessageObject_6: (+1)
   \   000000AC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable19_26
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0xF840 0x1024      STR      R1,[R0, R4, LSL #+2]
    453              }
    454            }
    455          }
   \                     ??LPLD_CAN_InitMessageObject_5: (+1)
   \   000000B8   0xBD7F             POP      {R0-R6,PC}       ;; return
    456          /*
    457           * LPLD_CAN_TransmitMessage
    458           * CAN 发送消息函数
    459           * 参数:
    460           *    CAN_MSGOBJ_InitTypeDef--can_msg_init_structure
    461           *                            具体定义见HW_CAN.h CAN_MSGOBJ_InitTypeDef
    462           *    CAN_MessageFormat_TypeDef--*can_rx_msg
    463           *                            具体定义见HW_CAN.h CAN_MessageFormat_TypeDef
    464           *    该结构体用于定义CAN的消息格式，当CAN发送消息时，会从CAN_MessageFormat_TypeDef定义的结构体对象中
    465           *    提取信息并存储到MSG中，MSG会将消息发送到CAN总线上。
    466           *    该结构体中的主要变量为 消息ID、时间戳、数据长度、存储数据的缓冲区
    467           * 输出:
    468           *    1 发送完毕
    469           *    0 发送失败
    470           *
    471           */

   \                                 In section .text, align 2, keep-with-next
    472          uint8 LPLD_CAN_TransmitMessage(CAN_MSGOBJ_InitTypeDef can_msg_init_structure,
    473                                         CAN_MessageFormat_TypeDef *can_tx_msg )
    474          {
   \                     LPLD_CAN_TransmitMessage: (+1)
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
    475            uint8  request;
    476            uint8  msg_num_temp  = can_msg_init_structure.CAN_MsgNum;
   \   00000006   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    477            CAN_Type *canx_ptr   = can_msg_init_structure.CAN_Canx;
   \   0000000A   0x9D01             LDR      R5,[SP, #+4]
    478            uint32  id_type      = can_msg_init_structure.CAN_MsgIdLength;
   \   0000000C   0xF89D 0x6009      LDRB     R6,[SP, #+9]
   \   00000010   0x980E             LDR      R0,[SP, #+56]
    479            
    480            uint32  message_id = can_tx_msg->CAN_MsgID; ;
   \   00000012   0x6807             LDR      R7,[R0, #+0]
    481            uint8   priority = can_tx_msg->CAN_MsgPriority; 
   \   00000014   0xF890 0x800F      LDRB     R8,[R0, #+15]
    482            uint8  *in_data_buffer = can_tx_msg->CAN_MsgDataBuffer;
   \   00000018   0xF200 0x0906      ADDW     R9,R0,#+6
    483            uint8   in_data_length = can_tx_msg->CAN_MsgDataLength;
   \   0000001C   0xF890 0xA00E      LDRB     R10,[R0, #+14]
    484            uint32  id_temp;
    485            uint32  cs_temp = CAN_MB_CS_RTR(can_msg_init_structure.CAN_MsgRTR) | 
    486                              CAN_MB_CS_SRR(can_msg_init_structure.CAN_MsgSRR) |
    487                              CAN_MB_CS_IDE(can_msg_init_structure.CAN_MsgIdLength);
   \   00000020   0xF89D 0x000B      LDRB     R0,[SP, #+11]
   \   00000024   0x0500             LSLS     R0,R0,#+20
   \   00000026   0xF410 0x1080      ANDS     R0,R0,#0x100000
   \   0000002A   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   0000002E   0x0589             LSLS     R1,R1,#+22
   \   00000030   0xF411 0x0180      ANDS     R1,R1,#0x400000
   \   00000034   0x4308             ORRS     R0,R1,R0
   \   00000036   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   0000003A   0x0549             LSLS     R1,R1,#+21
   \   0000003C   0xF411 0x1100      ANDS     R1,R1,#0x200000
   \   00000040   0xEA51 0x0B00      ORRS     R11,R1,R0
    488            
    489            if(msg_num_temp >= MSG_MAX_NO || in_data_length > 8)
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x2C10             CMP      R4,#+16
   \   00000048   0xDA04             BGE.N    ??LPLD_CAN_TransmitMessage_0
   \   0000004A   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000004E   0xF1BA 0x0F09      CMP      R10,#+9
   \   00000052   0xDB01             BLT.N    ??LPLD_CAN_TransmitMessage_1
    490            {
    491              return 0; // 超出阈值
   \                     ??LPLD_CAN_TransmitMessage_0: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xE040             B.N      ??LPLD_CAN_TransmitMessage_2
    492            }
    493            //如果发送Msg缓冲区中的CODE不等于CAN_MSGOBJ_TX_ONCE
    494            if( LPLD_CAN_GetMsgCode(canx_ptr,msg_num_temp) != CAN_MSGOBJ_TX_ONCE)
   \                     ??LPLD_CAN_TransmitMessage_1: (+1)
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005C   0x0028             MOVS     R0,R5
   \   0000005E   0x.... 0x....      BL       LPLD_CAN_GetMsgCode
   \   00000062   0x280C             CMP      R0,#+12
   \   00000064   0xD037             BEQ.N    ??LPLD_CAN_TransmitMessage_3
    495            {
    496              //设置Msg的ID
    497              if(id_type == CAN_MSGOBJ_ID_STD)
   \   00000066   0x2E00             CMP      R6,#+0
   \   00000068   0xD104             BNE.N    ??LPLD_CAN_TransmitMessage_4
    498              {
    499                id_temp =  CAN_MB_ID_STD(message_id);
   \   0000006A   0x.... 0x....      LDR.W    R0,??DataTable19_24  ;; 0x1ffc0000
   \   0000006E   0xEA10 0x4087      ANDS     R0,R0,R7, LSL #+18
   \   00000072   0xE001             B.N      ??LPLD_CAN_TransmitMessage_5
    500              }
    501              else
    502              {
    503                id_temp =  CAN_MB_ID_EXT(message_id);
   \                     ??LPLD_CAN_TransmitMessage_4: (+1)
   \   00000074   0x00F8             LSLS     R0,R7,#+3        ;; ZeroExtS R0,R7,#+3,#+3
   \   00000076   0x08C0             LSRS     R0,R0,#+3
    504              }
    505              //向发送Msg缓冲区中的CODE中写INACTIVE命令
    506              canx_ptr->MB[msg_num_temp].CS = CAN_MB_CS_CODE(CAN_MSGOBJ_TX_INACTIVE) | cs_temp;
   \                     ??LPLD_CAN_TransmitMessage_5: (+1)
   \   00000078   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007A   0xEB15 0x1104      ADDS     R1,R5,R4, LSL #+4
   \   0000007E   0xF05B 0x6200      ORRS     R2,R11,#0x8000000
   \   00000082   0xF8C1 0x2080      STR      R2,[R1, #+128]
    507              canx_ptr->MB[msg_num_temp].ID = CAN_MB_ID_PRIO(priority) | id_temp;
   \   00000086   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000088   0xEB15 0x1104      ADDS     R1,R5,R4, LSL #+4
   \   0000008C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000090   0xEA50 0x7048      ORRS     R0,R0,R8, LSL #+29
   \   00000094   0xF8C1 0x0084      STR      R0,[R1, #+132]
    508              //向Msg中写入要发送的数据
    509              LPLD_CAN_WriteData(canx_ptr,msg_num_temp,in_data_length,in_data_buffer);
   \   00000098   0x464B             MOV      R3,R9
   \   0000009A   0x4652             MOV      R2,R10
   \   0000009C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000009E   0x0021             MOVS     R1,R4
   \   000000A0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A2   0x0028             MOVS     R0,R5
   \   000000A4   0x.... 0x....      BL       LPLD_CAN_WriteData
    510              //向发送Msg缓冲区中的CODE中写TX_ONCE命令，等待发送完成
    511              canx_ptr->MB[msg_num_temp].CS = (canx_ptr->MB[msg_num_temp].CS & (~CAN_MB_CS_CODE_MASK)) | 
    512                                               CAN_MB_CS_CODE(CAN_MSGOBJ_TX_ONCE)|
    513                                               CAN_MB_CS_DLC(in_data_length);
   \   000000A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AA   0xEB15 0x1004      ADDS     R0,R5,R4, LSL #+4
   \   000000AE   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   000000B2   0xF030 0x6070      BICS     R0,R0,#0xF000000
   \   000000B6   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   000000BA   0xEA5F 0x410A      LSLS     R1,R10,#+16
   \   000000BE   0xF411 0x2170      ANDS     R1,R1,#0xF0000
   \   000000C2   0x4308             ORRS     R0,R1,R0
   \   000000C4   0xF050 0x6040      ORRS     R0,R0,#0xC000000
   \   000000C8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CA   0xEB15 0x1104      ADDS     R1,R5,R4, LSL #+4
   \   000000CE   0xF8C1 0x0080      STR      R0,[R1, #+128]
    514              //如果开启发送中断，发送完毕后会触发中断
    515              request = 1;
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0xE000             B.N      ??LPLD_CAN_TransmitMessage_6
    516            }
    517            else
    518            {
    519              request = 0;
   \                     ??LPLD_CAN_TransmitMessage_3: (+1)
   \   000000D6   0x2000             MOVS     R0,#+0
    520            }
    521            return (request);
   \                     ??LPLD_CAN_TransmitMessage_6: (+1)
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_CAN_TransmitMessage_2: (+1)
   \   000000DA   0xB005             ADD      SP,SP,#+20
   \   000000DC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    522          }
    523          
    524          /*
    525           * LPLD_CAN_ReceivedMessage
    526           * CAN 处理接收函数，此函数一般在CAN中断函数中调用
    527           * 参数:
    528           *    CAN_MSGOBJ_InitTypeDef--can_msg_init_structure
    529           *                            具体定义见HW_CAN.h CAN_MSGOBJ_InitTypeDef
    530           *    CAN_MessageFormat_TypeDef--*can_rx_msg
    531           *                            具体定义见HW_CAN.h CAN_MessageFormat_TypeDef
    532           *    该结构体用于定义CAN的消息格式，当CAN成功接收消息以后，会从MSG中将信息存储到
    533           *    CAN_MessageFormat_TypeDef定义的结构体对象中。
    534           *    该结构体中的主要变量为 消息ID、时间戳、数据长度、存储数据的缓冲区
    535           *    
    536           *  输出：
    537           *    无
    538           */

   \                                 In section .text, align 2, keep-with-next
    539          void LPLD_CAN_ReceivedMessage(CAN_MSGOBJ_InitTypeDef can_msg_init_structure,\
    540                                        CAN_MessageFormat_TypeDef *can_rx_msg)
    541          {
   \                     LPLD_CAN_ReceivedMessage: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    542            uint32 message_code,i;
    543            volatile uint16 timer;
    544            uint8 rx_data[CAN_DATA_MAX_BYTES];
    545            uint8 data_length;
    546            uint16 time_stamp;
    547            uint32 msg_id;
    548            CAN_Type *canx = can_msg_init_structure.CAN_Canx;
   \   00000004   0x9C03             LDR      R4,[SP, #+12]
    549            uint8 msg_num = can_msg_init_structure.CAN_MsgNum;
   \   00000006   0xF89D 0x5010      LDRB     R5,[SP, #+16]
    550            //获得Msg缓冲区中的code值
    551            message_code = LPLD_CAN_GetMsgCode(canx,msg_num);
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       LPLD_CAN_GetMsgCode
    552            
    553            if ((message_code != CAN_MSGOBJ_RX_BUSY) && 
    554               (message_code != CAN_MSGOBJ_RX_OVERRUN))
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD03E             BEQ.N    ??LPLD_CAN_ReceivedMessage_0
   \   00000018   0x2806             CMP      R0,#+6
   \   0000001A   0xD03C             BEQ.N    ??LPLD_CAN_ReceivedMessage_0
    555            {
    556              //读取ID(可选)
    557              msg_id = LPLD_CAN_GetMsgID(canx, msg_num);
   \   0000001C   0x0029             MOVS     R1,R5
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       LPLD_CAN_GetMsgID
   \   00000026   0x0006             MOVS     R6,R0
    558             
    559              //读取Msg缓冲区接收数据的长度
    560              data_length    = (uint8_t)LPLD_CAN_GetMsgLength(canx, msg_num);
   \   00000028   0x0029             MOVS     R1,R5
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       LPLD_CAN_GetMsgLength
   \   00000032   0x0007             MOVS     R7,R0
    561              //读取Msg缓冲区接收数据
    562              LPLD_CAN_GetData(canx, msg_num,data_length,rx_data);
   \   00000034   0xAB01             ADD      R3,SP,#+4
   \   00000036   0x003A             MOVS     R2,R7
   \   00000038   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003A   0x0029             MOVS     R1,R5
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       LPLD_CAN_GetData
    563              //获得Msg缓冲区时间戳
    564              time_stamp = LPLD_CAN_GetMsgTimeStamp(canx, msg_num);
   \   00000044   0x0029             MOVS     R1,R5
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0x.... 0x....      BL       LPLD_CAN_GetMsgTimeStamp
    565              
    566              for(i = data_length; i < 8; i++)
   \   0000004E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000050   0x0039             MOVS     R1,R7
   \   00000052   0xE003             B.N      ??LPLD_CAN_ReceivedMessage_1
    567              {
    568                 rx_data[i] = 0;
   \                     ??LPLD_CAN_ReceivedMessage_2: (+1)
   \   00000054   0xAA01             ADD      R2,SP,#+4
   \   00000056   0x2300             MOVS     R3,#+0
   \   00000058   0x548B             STRB     R3,[R1, R2]
    569              }
   \   0000005A   0x1C49             ADDS     R1,R1,#+1
   \                     ??LPLD_CAN_ReceivedMessage_1: (+1)
   \   0000005C   0x2908             CMP      R1,#+8
   \   0000005E   0xD3F9             BCC.N    ??LPLD_CAN_ReceivedMessage_2
   \   00000060   0x9B0C             LDR      R3,[SP, #+48]
    570              //将MSG中的消息存储到can_rx_msg中
    571              can_rx_msg->CAN_MsgID = msg_id;
   \   00000062   0x601E             STR      R6,[R3, #+0]
    572              can_rx_msg->CAN_MsgDataLength = data_length;
   \   00000064   0x739F             STRB     R7,[R3, #+14]
    573              can_rx_msg->CAN_MsgTimeStamp  = time_stamp;
   \   00000066   0x8098             STRH     R0,[R3, #+4]
    574              memcpy(can_rx_msg->CAN_MsgDataBuffer,rx_data,data_length);
   \   00000068   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   0x003A             MOVS     R2,R7
   \   0000006C   0xA901             ADD      R1,SP,#+4
   \   0000006E   0x1D98             ADDS     R0,R3,#+6
   \   00000070   0x.... 0x....      BL       memcpy
    575               
    576              //读取自由计数器，解锁当前Msg缓冲区
    577              timer = LPLD_CAN_UnlockMsg(canx);
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      BL       LPLD_CAN_UnlockMsg
   \   0000007A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    578              //清空Msg缓冲区的中断标志位
    579              LPLD_CAN_Interrupt_ClearPending(canx,msg_num);
   \   0000007E   0x0029             MOVS     R1,R5
   \   00000080   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000082   0x0020             MOVS     R0,R4
   \   00000084   0x.... 0x....      BL       LPLD_CAN_Interrupt_ClearPending
    580              //再次写邮箱的code为empty状态
    581              LPLD_CAN_SetMsgCode(canx,msg_num,CAN_MSGOBJ_RX_EMPTY);
   \   00000088   0x2204             MOVS     R2,#+4
   \   0000008A   0x0029             MOVS     R1,R5
   \   0000008C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008E   0x0020             MOVS     R0,R4
   \   00000090   0x.... 0x....      BL       LPLD_CAN_SetMsgCode
   \   00000094   0xE009             B.N      ??LPLD_CAN_ReceivedMessage_3
    582            }
    583            else
    584            {
    585              //接收邮箱溢出
    586              LPLD_CAN_Interrupt_ClearPending(canx,msg_num);
   \                     ??LPLD_CAN_ReceivedMessage_0: (+1)
   \   00000096   0x0029             MOVS     R1,R5
   \   00000098   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0x.... 0x....      BL       LPLD_CAN_Interrupt_ClearPending
    587              //读取自由计数器，解锁当前Msg缓冲区
    588              timer = LPLD_CAN_UnlockMsg(canx);
   \   000000A0   0x0020             MOVS     R0,R4
   \   000000A2   0x.... 0x....      BL       LPLD_CAN_UnlockMsg
   \   000000A6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    589            }
    590          }
   \                     ??LPLD_CAN_ReceivedMessage_3: (+1)
   \   000000AA   0xB007             ADD      SP,SP,#+28
   \   000000AC   0xBDF0             POP      {R4-R7,PC}       ;; return
    591          
    592          /*
    593           * LPLD_CAN_Interrupt_ClearPending
    594           * 清除Msg的中断标志位
    595           * 参数:
    596           *    CAN_Type *canx
    597           *      |___ CAN0 --CAN0号模块
    598           *      |___ CAN1 --CAN1号模块
    599           *    msg_num 选择要清除中断标志的Msg缓冲区
    600           *      |___ MSG_NUM_0 --Msg缓冲区0
    601           *      |___ MSG_NUM_1 --Msg缓冲区1
    602           *      |___ MSG_NUM_2 --Msg缓冲区2
    603           *      |___ MSG_NUM_3 --Msg缓冲区3
    604           *      |___ MSG_NUM_4 --Msg缓冲区4
    605           *      ...... 
    606           *      |___ MSG_NUM_15 --Msg缓冲区15
    607           * 输出:
    608           *   无
    609           */

   \                                 In section .text, align 2, keep-with-next
    610          static void LPLD_CAN_Interrupt_ClearPending(CAN_Type *canx, uint8 msg_num)
    611          {   
    612            if(msg_num < 32)
   \                     LPLD_CAN_Interrupt_ClearPending: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2920             CMP      R1,#+32
   \   00000004   0xDA06             BGE.N    ??LPLD_CAN_Interrupt_ClearPending_0
    613            {
    614              canx->IFLAG1 |= (1<<msg_num); 
   \   00000006   0x6B02             LDR      R2,[R0, #+48]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000000E   0x4311             ORRS     R1,R1,R2
   \   00000010   0x6301             STR      R1,[R0, #+48]
   \   00000012   0xE006             B.N      ??LPLD_CAN_Interrupt_ClearPending_1
    615            }
    616            else
    617            {
    618              canx->IFLAG2 |= (1<<(msg_num-32));
   \                     ??LPLD_CAN_Interrupt_ClearPending_0: (+1)
   \   00000014   0x6AC2             LDR      R2,[R0, #+44]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x3920             SUBS     R1,R1,#+32
   \   0000001A   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000001E   0x4311             ORRS     R1,R1,R2
   \   00000020   0x62C1             STR      R1,[R0, #+44]
    619            }
    620          }
   \                     ??LPLD_CAN_Interrupt_ClearPending_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    621          
    622          /*
    623           * LPLD_CAN_Interrupt_GetFlag
    624           * 获得CAN 的中断标志位
    625           * 参数:
    626           *    CAN_Type *canx
    627           *      |___ CAN0 --CAN0号模块
    628           *      |___ CAN1 --CAN1号模块
    629           *    msg_num 选择要获得中断标志的Msg缓冲区
    630           *      |___ MSG_NUM_0 --Msg缓冲区0
    631           *      |___ MSG_NUM_1 --Msg缓冲区1
    632           *      |___ MSG_NUM_2 --Msg缓冲区2
    633           *      |___ MSG_NUM_3 --Msg缓冲区3
    634           *      |___ MSG_NUM_4 --Msg缓冲区4
    635           *      ...... 
    636           *      |___ MSG_NUM_15 --Msg缓冲区15
    637           * 输出:
    638           *    返回需要 Msg缓冲区的中断标志位
    639           */

   \                                 In section .text, align 2, keep-with-next
    640          static uint8 LPLD_CAN_Interrupt_GetFlag(CAN_Type *canx, uint8 msg_num)
    641          {   
    642            uint8 status;
    643            if(msg_num < 32)
   \                     LPLD_CAN_Interrupt_GetFlag: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2920             CMP      R1,#+32
   \   00000004   0xDA04             BGE.N    ??LPLD_CAN_Interrupt_GetFlag_0
    644            {
    645              status = (canx->IFLAG1 >> msg_num) & 0x01; 
   \   00000006   0x6B00             LDR      R0,[R0, #+48]
   \   00000008   0x40C8             LSRS     R0,R0,R1
   \   0000000A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000E   0xE004             B.N      ??LPLD_CAN_Interrupt_GetFlag_1
    646            }
    647            else
    648            {
    649              status = (canx->IFLAG2 >> (msg_num - 32) )& 0x01; 
   \                     ??LPLD_CAN_Interrupt_GetFlag_0: (+1)
   \   00000010   0x6AC0             LDR      R0,[R0, #+44]
   \   00000012   0x3920             SUBS     R1,R1,#+32
   \   00000014   0x40C8             LSRS     R0,R0,R1
   \   00000016   0xF010 0x0001      ANDS     R0,R0,#0x1
    650            }
    651            return status;
   \                     ??LPLD_CAN_Interrupt_GetFlag_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x4770             BX       LR               ;; return
    652          }
    653          
    654          /*
    655           * LPLD_CAN_UnlockMsg
    656           * 该函数通过读取自由计数器，解锁Msg
    657           * 参数:
    658           *    canx--设置CAN总线通道
    659           *      |__CAN0 --CAN0号模块
    660           *      |__CAN1 --CAN1号模块
    661           * 输出:
    662           *    16位CAN自由计数器记录的时间戳
    663           */

   \                                 In section .text, align 2, keep-with-next
    664          static uint16 LPLD_CAN_UnlockMsg(CAN_Type *canx)
    665          {
    666            return (canx->TIMER);
   \                     LPLD_CAN_UnlockMsg: (+1)
   \   00000000   0x6880             LDR      R0,[R0, #+8]
   \   00000002   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000004   0x4770             BX       LR               ;; return
    667          }
    668          
    669          /*
    670           * LPLD_CAN_EnableMsgInterrupt
    671           * 该函数用于使能Msg中断
    672           * 
    673           * 参数:
    674           *    canx--设置CAN总线通道
    675           *      |__CAN0 --CAN0号模块
    676           *      |__CAN1 --CAN1号模块
    677           *    msg_num 选择需要使能中断的Msg缓冲区
    678           *      |___ MSG_NUM_0 --Msg缓冲区0
    679           *      |___ MSG_NUM_1 --Msg缓冲区1
    680           *      |___ MSG_NUM_2 --Msg缓冲区2
    681           *      |___ MSG_NUM_3 --Msg缓冲区3
    682           *      |___ MSG_NUM_4 --Msg缓冲区4
    683           *      ...... 
    684           *      |___ MSG_NUM_15 --Msg缓冲区15
    685           * 输出:
    686           *    无
    687           *
    688           */

   \                                 In section .text, align 2, keep-with-next
    689          static void LPLD_CAN_EnableMsgInterrupt(CAN_Type *canx, uint8 msg_num)
    690          {
    691            if(msg_num < 32)
   \                     LPLD_CAN_EnableMsgInterrupt: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2920             CMP      R1,#+32
   \   00000004   0xDA06             BGE.N    ??LPLD_CAN_EnableMsgInterrupt_0
    692            {
    693              canx->IMASK1 |= (1<<msg_num); 
   \   00000006   0x6A82             LDR      R2,[R0, #+40]
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000000E   0x4311             ORRS     R1,R1,R2
   \   00000010   0x6281             STR      R1,[R0, #+40]
   \   00000012   0xE006             B.N      ??LPLD_CAN_EnableMsgInterrupt_1
    694            }
    695            else
    696            {
    697              canx->IMASK2 |= (1<<(msg_num-32));
   \                     ??LPLD_CAN_EnableMsgInterrupt_0: (+1)
   \   00000014   0x6A42             LDR      R2,[R0, #+36]
   \   00000016   0x2301             MOVS     R3,#+1
   \   00000018   0x3920             SUBS     R1,R1,#+32
   \   0000001A   0xFA13 0xF101      LSLS     R1,R3,R1
   \   0000001E   0x4311             ORRS     R1,R1,R2
   \   00000020   0x6241             STR      R1,[R0, #+36]
    698            }
    699          }
   \                     ??LPLD_CAN_EnableMsgInterrupt_1: (+1)
   \   00000022   0x4770             BX       LR               ;; return
    700          
    701          /*
    702           * LPLD_CAN_SetMsgCode
    703           * 该函数用于设置Msg的code值
    704           * 
    705           * 参数:
    706           *    canx--设置CAN总线通道
    707           *      |__CAN0 --CAN0号模块
    708           *      |__CAN1 --CAN1号模块
    709           *    msg_num 选择需要设置CODE的Msg缓冲区
    710           *      |___ MSG_NUM_0 --Msg缓冲区0
    711           *      |___ MSG_NUM_1 --Msg缓冲区1
    712           *      |___ MSG_NUM_2 --Msg缓冲区2
    713           *      |___ MSG_NUM_3 --Msg缓冲区3
    714           *      |___ MSG_NUM_4 --Msg缓冲区4
    715           *      ...... 
    716           *      |___ MSG_NUM_15 --Msg缓冲区15
    717           *    code--需要设置的code值
    718           * 输出:
    719           *    无
    720           *
    721           */

   \                                 In section .text, align 2, keep-with-next
    722          static void LPLD_CAN_SetMsgCode(CAN_Type *canx, uint8 msg_num, uint8 code)
    723          {
    724            //canx->MB[msg_num].CS &= (~CAN_MB_CS_CODE_MASK);
    725            canx->MB[msg_num].CS |= CAN_MB_CS_CODE(code);
   \                     LPLD_CAN_SetMsgCode: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x1301      ADDS     R3,R0,R1, LSL #+4
   \   00000006   0xF8D3 0x3080      LDR      R3,[R3, #+128]
   \   0000000A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000C   0x0612             LSLS     R2,R2,#+24
   \   0000000E   0xF012 0x6270      ANDS     R2,R2,#0xF000000
   \   00000012   0x431A             ORRS     R2,R2,R3
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   0000001A   0xF8C0 0x2080      STR      R2,[R0, #+128]
    726          }
   \   0000001E   0x4770             BX       LR               ;; return
    727          
    728          /*
    729           * LPLD_CAN_GetMsgCode
    730           * 该函数用于获得Msg缓冲区的code值
    731           * 
    732           * 参数:
    733           *    canx--设置CAN总线通道
    734           *      |__CAN0 --CAN0号模块
    735           *      |__CAN1 --CAN1号模块
    736           *    msg_num 选择需要获得CODE的Msg缓冲区
    737           *      |___ MSG_NUM_0 --Msg缓冲区0
    738           *      |___ MSG_NUM_1 --Msg缓冲区1
    739           *      |___ MSG_NUM_2 --Msg缓冲区2
    740           *      |___ MSG_NUM_3 --Msg缓冲区3
    741           *      |___ MSG_NUM_4 --Msg缓冲区4
    742           *      ...... 
    743           *      |___ MSG_NUM_15 --Msg缓冲区15
    744           * 输出:
    745           *     返回相应Msg缓冲区的code
    746           *
    747           */

   \                                 In section .text, align 2, keep-with-next
    748          static uint32 LPLD_CAN_GetMsgCode(CAN_Type *canx, uint8 msg_num)
    749          {
    750             return CAN_GET_MB_CS_CODE(canx->MB[msg_num].CS);
   \                     LPLD_CAN_GetMsgCode: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   00000006   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   0000000A   0xF3C0 0x6003      UBFX     R0,R0,#+24,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    751          }
    752          /*
    753           * LPLD_CAN_GetMsgTimeStamp
    754           * 该函数用于获得Msg缓冲区的时间戳
    755           * 
    756           * 参数:
    757           *    canx--设置CAN总线通道
    758           *      |__CAN0 --CAN0号模块
    759           *      |__CAN1 --CAN1号模块
    760           *    msg_num 选择需要获得时间戳的Msg缓冲区
    761           *      |___ MSG_NUM_0 --Msg缓冲区0
    762           *      |___ MSG_NUM_1 --Msg缓冲区1
    763           *      |___ MSG_NUM_2 --Msg缓冲区2
    764           *      |___ MSG_NUM_3 --Msg缓冲区3
    765           *      |___ MSG_NUM_4 --Msg缓冲区4
    766           *      ...... 
    767           *      |___ MSG_NUM_15 --Msg缓冲区15
    768           * 输出:
    769           *     返回相应Msg缓冲区的时间戳
    770           *
    771           */

   \                                 In section .text, align 2, keep-with-next
    772          static uint16 LPLD_CAN_GetMsgTimeStamp(CAN_Type *canx, uint8 msg_num)
    773          {
    774            return CAN_GET_MB_CS_TIMESTAMP(canx->MB[msg_num].CS);
   \                     LPLD_CAN_GetMsgTimeStamp: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   00000006   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4770             BX       LR               ;; return
    775          }
    776          /*
    777           * LPLD_CAN_GetMsgID
    778           * 该函数用于获得Msg缓冲区的ID值
    779           * 
    780           * 参数:
    781           *    canx--设置CAN总线通道
    782           *      |__CAN0 --CAN0号模块
    783           *      |__CAN1 --CAN1号模块
    784           *    msg_num 选择需要获得ID的Msg缓冲区
    785           *      |___ MSG_NUM_0 --Msg缓冲区0
    786           *      |___ MSG_NUM_1 --Msg缓冲区1
    787           *      |___ MSG_NUM_2 --Msg缓冲区2
    788           *      |___ MSG_NUM_3 --Msg缓冲区3
    789           *      |___ MSG_NUM_4 --Msg缓冲区4
    790           *      ...... 
    791           *      |___ MSG_NUM_15 --Msg缓冲区15
    792           * 输出:
    793           *     返回相应Msg缓冲区的ID
    794           *
    795           */

   \                                 In section .text, align 2, keep-with-next
    796          static uint32 LPLD_CAN_GetMsgID(CAN_Type *canx, uint8 msg_num)
    797          {
    798            uint32 id_temp;
    799            if(CAN_GET_MB_CS_IDE(canx->MB[msg_num].CS) == CAN_MSGOBJ_ID_STD)
   \                     LPLD_CAN_GetMsgID: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x1201      ADDS     R2,R0,R1, LSL #+4
   \   00000006   0xF8D2 0x2080      LDR      R2,[R2, #+128]
   \   0000000A   0xF3C2 0x5240      UBFX     R2,R2,#+21,#+1
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xD107             BNE.N    ??LPLD_CAN_GetMsgID_0
    800            {
    801              id_temp =  CAN_GET_MB_ID_STD(canx->MB[msg_num].ID);
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   00000018   0xF8D0 0x0084      LDR      R0,[R0, #+132]
   \   0000001C   0xF3C0 0x408A      UBFX     R0,R0,#+18,#+11
   \   00000020   0xE006             B.N      ??LPLD_CAN_GetMsgID_1
    802            }
    803            else
    804            {
    805              id_temp =  CAN_GET_MB_ID_EXT(canx->MB[msg_num].ID);
   \                     ??LPLD_CAN_GetMsgID_0: (+1)
   \   00000022   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000024   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   00000028   0xF8D0 0x0084      LDR      R0,[R0, #+132]
   \   0000002C   0x00C0             LSLS     R0,R0,#+3        ;; ZeroExtS R0,R0,#+3,#+3
   \   0000002E   0x08C0             LSRS     R0,R0,#+3
    806            }
    807            return id_temp;
   \                     ??LPLD_CAN_GetMsgID_1: (+1)
   \   00000030   0x4770             BX       LR               ;; return
    808          }
    809          /*
    810           * LPLD_CAN_GetMsgLength
    811           * 该函数用于获得Msg缓冲区的数据长度
    812           * 
    813           * 参数:
    814           *    canx--设置CAN总线通道
    815           *      |__CAN0 --CAN0号模块
    816           *      |__CAN1 --CAN1号模块
    817           *    msg_num 选择需要获得数据长度的Msg缓冲区
    818           *      |___ MSG_NUM_0 --Msg缓冲区0
    819           *      |___ MSG_NUM_1 --Msg缓冲区1
    820           *      |___ MSG_NUM_2 --Msg缓冲区2
    821           *      |___ MSG_NUM_3 --Msg缓冲区3
    822           *      |___ MSG_NUM_4 --Msg缓冲区4
    823           *      ...... 
    824           *      |___ MSG_NUM_15 --Msg缓冲区15
    825           * 输出:
    826           *     数据的长度
    827           *
    828           */

   \                                 In section .text, align 2, keep-with-next
    829          static uint8 LPLD_CAN_GetMsgLength(CAN_Type *canx, uint8 msg_num)
    830          {
    831            return CAN_GET_MB_CS_LENGTH(canx->MB[msg_num].CS);
   \                     LPLD_CAN_GetMsgLength: (+1)
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   00000006   0xF8D0 0x0080      LDR      R0,[R0, #+128]
   \   0000000A   0x0C00             LSRS     R0,R0,#+16
   \   0000000C   0xF010 0x000F      ANDS     R0,R0,#0xF
   \   00000010   0x4770             BX       LR               ;; return
    832          }
    833          
    834          /*
    835           * LPLD_CAN_GetData
    836           * 该函数用于获得Msg缓冲区中的数据
    837           * 
    838           * 参数:
    839           *    canx--设置CAN总线通道
    840           *      |__CAN0 --CAN0号模块
    841           *      |__CAN1 --CAN1号模块
    842           *    msg_num 选择需要获得数据的Msg缓冲区
    843           *      |___ MSG_NUM_0 --Msg缓冲区0
    844           *      |___ MSG_NUM_1 --Msg缓冲区1
    845           *      |___ MSG_NUM_2 --Msg缓冲区2
    846           *      |___ MSG_NUM_3 --Msg缓冲区3
    847           *      |___ MSG_NUM_4 --Msg缓冲区4
    848           *      ...... 
    849           *      |___ MSG_NUM_15 --Msg缓冲区15
    850           *    in_length
    851           *      |__获得数据长度
    852           *    *in_buffer
    853           *      |__获得数据的缓冲区
    854           * 输出:
    855           *    无 
    856           */

   \                                 In section .text, align 2, keep-with-next
    857          static void LPLD_CAN_GetData(
    858              CAN_Type *canx, 
    859              uint8     msg_num, 
    860              uint8     in_length, 
    861              uint8    *in_buffer)
    862          {
   \                     LPLD_CAN_GetData: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    863            int i;
    864            uint8  *pMBData;
    865            uint8  *pRecieve  = in_buffer;
    866            uint8  word_num   = (in_length - 1)/ 4; //Get the Message buffer word number
   \   00000002   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   0x1E54             SUBS     R4,R2,#+1
   \   00000006   0x2504             MOVS     R5,#+4
   \   00000008   0xFB94 0xF4F5      SDIV     R4,R4,R5
    867            uint8  rest_bytes = (in_length - 1)% 4; //Get the reset bytes of buffer
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x1E55             SUBS     R5,R2,#+1
   \   00000010   0x2604             MOVS     R6,#+4
   \   00000012   0xFB95 0xF2F6      SDIV     R2,R5,R6
   \   00000016   0xFB02 0x5216      MLS      R2,R2,R6,R5
    868            if(word_num > 0)
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0xD012             BEQ.N    ??LPLD_CAN_GetData_0
    869            {  
    870              pMBData = (uint8*)&canx->MB[msg_num].WORD0+3;
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0xEB10 0x1501      ADDS     R5,R0,R1, LSL #+4
   \   00000026   0xF205 0x068B      ADDW     R6,R5,#+139
    871              for(i = 0 ; i < 4 ; i++)   
   \   0000002A   0x2500             MOVS     R5,#+0
   \   0000002C   0xE003             B.N      ??LPLD_CAN_GetData_1
    872              {
    873                pRecieve[i] = *pMBData--;
   \                     ??LPLD_CAN_GetData_2: (+1)
   \   0000002E   0x7837             LDRB     R7,[R6, #+0]
   \   00000030   0x54EF             STRB     R7,[R5, R3]
   \   00000032   0x1E76             SUBS     R6,R6,#+1
    874              }
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_CAN_GetData_1: (+1)
   \   00000036   0x2D04             CMP      R5,#+4
   \   00000038   0xDBF9             BLT.N    ??LPLD_CAN_GetData_2
    875              pMBData = (uint8*)&canx->MB[msg_num].WORD1+3;
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   00000040   0xF200 0x068F      ADDW     R6,R0,#+143
   \   00000044   0xE004             B.N      ??LPLD_CAN_GetData_3
    876            }
    877            else
    878            {
    879              pMBData = (uint8*)&canx->MB[msg_num].WORD0+3;
   \                     ??LPLD_CAN_GetData_0: (+1)
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   0000004C   0xF200 0x068B      ADDW     R6,R0,#+139
    880            }
    881          
    882            for(i = 0; i <= rest_bytes; i++)
   \                     ??LPLD_CAN_GetData_3: (+1)
   \   00000050   0x2500             MOVS     R5,#+0
   \   00000052   0xE006             B.N      ??LPLD_CAN_GetData_4
    883            {
    884              pRecieve[i+(word_num<<2)] = *pMBData--;    
   \                     ??LPLD_CAN_GetData_5: (+1)
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0xEB15 0x0084      ADDS     R0,R5,R4, LSL #+2
   \   0000005A   0x7831             LDRB     R1,[R6, #+0]
   \   0000005C   0x54C1             STRB     R1,[R0, R3]
   \   0000005E   0x1E76             SUBS     R6,R6,#+1
    885            }
   \   00000060   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_CAN_GetData_4: (+1)
   \   00000062   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000064   0x42AA             CMP      R2,R5
   \   00000066   0xDAF5             BGE.N    ??LPLD_CAN_GetData_5
    886          }
   \   00000068   0xBCF0             POP      {R4-R7}
   \   0000006A   0x4770             BX       LR               ;; return
    887          
    888          /*
    889           * LPLD_CAN_WriteData
    890           * 该函数用于向Msg缓冲区中的写数据
    891           * 
    892           * 参数:
    893           *    canx--设置CAN总线通道
    894           *      |__CAN0 --CAN0号模块
    895           *      |__CAN1 --CAN1号模块
    896           *    msg_num 选择需要写数据的Msg缓冲区
    897           *      |___ MSG_NUM_0 --Msg缓冲区0
    898           *      |___ MSG_NUM_1 --Msg缓冲区1
    899           *      |___ MSG_NUM_2 --Msg缓冲区2
    900           *      |___ MSG_NUM_3 --Msg缓冲区3
    901           *      |___ MSG_NUM_4 --Msg缓冲区4
    902           *      ...... 
    903           *      |___ MSG_NUM_15 --Msg缓冲区15
    904           *    in_length
    905           *      |__写入数据长度
    906           *    *in_buffer
    907           *      |__写入数据的缓冲区
    908           * 输出:
    909           *    无 
    910           */

   \                                 In section .text, align 2, keep-with-next
    911          static void LPLD_CAN_WriteData(
    912              CAN_Type *canx, 
    913              uint8     msg_num, 
    914              uint8     in_length, 
    915              uint8    *in_buffer )
    916          {
   \                     LPLD_CAN_WriteData: (+1)
   \   00000000   0xB4FC             PUSH     {R2-R7}
    917            int i;
    918            uint32 word[2] = {0};  
   \   00000002   0xAC00             ADD      R4,SP,#+0
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0xC460             STM      R4!,{R5,R6}
   \   0000000A   0x3C08             SUBS     R4,R4,#+8
    919            uint8  word_num   = (in_length - 1)/ 4; //获得 Msg 的Word 值
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x1E54             SUBS     R4,R2,#+1
   \   00000010   0x2504             MOVS     R5,#+4
   \   00000012   0xFB94 0xF4F5      SDIV     R4,R4,R5
    920            uint8  rest_bytes = (in_length - 1)% 4; //获得剩余字节的值
   \   00000016   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   0x1E56             SUBS     R6,R2,#+1
   \   0000001A   0x2704             MOVS     R7,#+4
   \   0000001C   0xFB96 0xF5F7      SDIV     R5,R6,R7
   \   00000020   0xFB05 0x6517      MLS      R5,R5,R7,R6
    921          
    922            if( msg_num >= MSG_MAX_NO || in_length >8)
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x2910             CMP      R1,#+16
   \   00000028   0xDA02             BGE.N    ??LPLD_CAN_WriteData_0
   \   0000002A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002C   0x2A09             CMP      R2,#+9
   \   0000002E   0xDB00             BLT.N    ??LPLD_CAN_WriteData_1
    923            {
    924                return; 
   \                     ??LPLD_CAN_WriteData_0: (+1)
   \   00000030   0xE054             B.N      ??LPLD_CAN_WriteData_2
    925            }
    926          
    927            if(word_num < 1)
   \                     ??LPLD_CAN_WriteData_1: (+1)
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0x2C00             CMP      R4,#+0
   \   00000036   0xD115             BNE.N    ??LPLD_CAN_WriteData_3
    928            {
    929              for (i = 0; i <= rest_bytes ; i++)
   \   00000038   0x2200             MOVS     R2,#+0
   \                     ??LPLD_CAN_WriteData_4: (+1)
   \   0000003A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000003C   0x4295             CMP      R5,R2
   \   0000003E   0xDB41             BLT.N    ??LPLD_CAN_WriteData_5
    930              {
    931                word[word_num] |=  (uint32)in_buffer[i] << (24-(i<<3));
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0xAE00             ADD      R6,SP,#+0
   \   00000044   0xF856 0x6024      LDR      R6,[R6, R4, LSL #+2]
   \   00000048   0x5CD7             LDRB     R7,[R2, R3]
   \   0000004A   0xEA5F 0x0CC2      LSLS     R12,R2,#+3
   \   0000004E   0xF1DC 0x0C18      RSBS     R12,R12,#+24
   \   00000052   0xFA17 0xF70C      LSLS     R7,R7,R12
   \   00000056   0x433E             ORRS     R6,R7,R6
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0xAF00             ADD      R7,SP,#+0
   \   0000005C   0xF847 0x6024      STR      R6,[R7, R4, LSL #+2]
    932              }
   \   00000060   0x1C52             ADDS     R2,R2,#+1
   \   00000062   0xE7EA             B.N      ??LPLD_CAN_WriteData_4
    933            }
    934            else
    935            {
    936              for (i = 0; i < 4; i++)
   \                     ??LPLD_CAN_WriteData_3: (+1)
   \   00000064   0x2200             MOVS     R2,#+0
   \   00000066   0xE014             B.N      ??LPLD_CAN_WriteData_6
    937              {
    938                word[word_num-1] |= (uint32)in_buffer[i] << (24-(i<<3));
   \                     ??LPLD_CAN_WriteData_7: (+1)
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0xAE00             ADD      R6,SP,#+0
   \   0000006C   0xEB16 0x0684      ADDS     R6,R6,R4, LSL #+2
   \   00000070   0xF856 0x6C04      LDR      R6,[R6, #-4]
   \   00000074   0x5CD7             LDRB     R7,[R2, R3]
   \   00000076   0xEA5F 0x0CC2      LSLS     R12,R2,#+3
   \   0000007A   0xF1DC 0x0C18      RSBS     R12,R12,#+24
   \   0000007E   0xFA17 0xF70C      LSLS     R7,R7,R12
   \   00000082   0x433E             ORRS     R6,R7,R6
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0xAF00             ADD      R7,SP,#+0
   \   00000088   0xEB17 0x0784      ADDS     R7,R7,R4, LSL #+2
   \   0000008C   0xF847 0x6C04      STR      R6,[R7, #-4]
    939              }
   \   00000090   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_CAN_WriteData_6: (+1)
   \   00000092   0x2A04             CMP      R2,#+4
   \   00000094   0xDBE8             BLT.N    ??LPLD_CAN_WriteData_7
    940              for (i = 0; i <= rest_bytes ; i++)
   \   00000096   0x2200             MOVS     R2,#+0
   \   00000098   0xE011             B.N      ??LPLD_CAN_WriteData_8
    941              {
    942                word[word_num] |=  (uint32)in_buffer[i+4] << (24-(i<<3));
   \                     ??LPLD_CAN_WriteData_9: (+1)
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0xAE00             ADD      R6,SP,#+0
   \   0000009E   0xF856 0x6024      LDR      R6,[R6, R4, LSL #+2]
   \   000000A2   0x18D7             ADDS     R7,R2,R3
   \   000000A4   0x793F             LDRB     R7,[R7, #+4]
   \   000000A6   0xEA5F 0x0CC2      LSLS     R12,R2,#+3
   \   000000AA   0xF1DC 0x0C18      RSBS     R12,R12,#+24
   \   000000AE   0xFA17 0xF70C      LSLS     R7,R7,R12
   \   000000B2   0x433E             ORRS     R6,R7,R6
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0xAF00             ADD      R7,SP,#+0
   \   000000B8   0xF847 0x6024      STR      R6,[R7, R4, LSL #+2]
    943              }
   \   000000BC   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_CAN_WriteData_8: (+1)
   \   000000BE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000C0   0x4295             CMP      R5,R2
   \   000000C2   0xDAEA             BGE.N    ??LPLD_CAN_WriteData_9
    944            }
    945            canx->MB[msg_num].WORD0 = word[0];
   \                     ??LPLD_CAN_WriteData_5: (+1)
   \   000000C4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000C6   0xEB10 0x1201      ADDS     R2,R0,R1, LSL #+4
   \   000000CA   0x9B00             LDR      R3,[SP, #+0]
   \   000000CC   0xF8C2 0x3088      STR      R3,[R2, #+136]
    946            canx->MB[msg_num].WORD1 = word[1];
   \   000000D0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D2   0xEB10 0x1001      ADDS     R0,R0,R1, LSL #+4
   \   000000D6   0x9901             LDR      R1,[SP, #+4]
   \   000000D8   0xF8C0 0x108C      STR      R1,[R0, #+140]
    947          }
   \                     ??LPLD_CAN_WriteData_2: (+1)
   \   000000DC   0xBCF3             POP      {R0,R1,R4-R7}
   \   000000DE   0x4770             BX       LR               ;; return
    948          
    949          /*
    950           * LPLD_CAN_Transmit_Interrupt
    951           * 该函数用于处理Msg缓冲区发送中断函数
    952           * 
    953           * 参数:
    954           *    canx--设置CAN总线通道
    955           *      |__CAN0 --CAN0号模块
    956           *      |__CAN1 --CAN1号模块
    957           *    msg_num 选择需要处理发送中断的Msg缓冲区
    958           *      |___ MSG_NUM_0 --Msg缓冲区0
    959           *      |___ MSG_NUM_1 --Msg缓冲区1
    960           *      |___ MSG_NUM_2 --Msg缓冲区2
    961           *      |___ MSG_NUM_3 --Msg缓冲区3
    962           *      |___ MSG_NUM_4 --Msg缓冲区4
    963           *      ...... 
    964           *      |___ MSG_NUM_15 --Msg缓冲区15
    965           * 输出:
    966           *    无 
    967           */

   \                                 In section .text, align 2, keep-with-next
    968          void LPLD_CAN_Transmit_Interrupt(CAN_Type *canx, uint8 msg_num)
    969          {
   \                     LPLD_CAN_Transmit_Interrupt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    970            if(LPLD_CAN_Interrupt_GetFlag(canx,msg_num))
   \   00000006   0x0021             MOVS     R1,R4
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x.... 0x....      BL       LPLD_CAN_Interrupt_GetFlag
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD021             BEQ.N    ??LPLD_CAN_Transmit_Interrupt_0
    971            {
    972             LPLD_CAN_Interrupt_ClearPending(canx,msg_num);
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x.... 0x....      BL       LPLD_CAN_Interrupt_ClearPending
    973             if(canx == CAN0)
   \   0000001E   0x....             LDR.N    R0,??DataTable19_5  ;; 0x40024000
   \   00000020   0x4285             CMP      R5,R0
   \   00000022   0xD10B             BNE.N    ??LPLD_CAN_Transmit_Interrupt_1
    974             {
    975              if( CAN0_ISR[msg_num] != NULL)
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0x....             LDR.N    R0,??DataTable19_25
   \   00000028   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD013             BEQ.N    ??LPLD_CAN_Transmit_Interrupt_0
    976              {
    977                CAN0_ISR[msg_num]();
   \   00000030   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000032   0x....             LDR.N    R0,??DataTable19_25
   \   00000034   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000038   0x4780             BLX      R0
   \   0000003A   0xE00D             B.N      ??LPLD_CAN_Transmit_Interrupt_0
    978              }
    979             }
    980             else if (canx == CAN1)
   \                     ??LPLD_CAN_Transmit_Interrupt_1: (+1)
   \   0000003C   0x....             LDR.N    R0,??DataTable19_23  ;; 0x400a4000
   \   0000003E   0x4285             CMP      R5,R0
   \   00000040   0xD10A             BNE.N    ??LPLD_CAN_Transmit_Interrupt_0
    981             {
    982              if( CAN1_ISR[msg_num] != NULL)
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x....             LDR.N    R0,??DataTable19_26
   \   00000046   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD004             BEQ.N    ??LPLD_CAN_Transmit_Interrupt_0
    983              {
    984                CAN1_ISR[msg_num]();
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x....             LDR.N    R0,??DataTable19_26
   \   00000052   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000056   0x4780             BLX      R0
    985              }
    986             }
    987             else
    988             {
    989             }
    990             
    991            }
    992          }
   \                     ??LPLD_CAN_Transmit_Interrupt_0: (+1)
   \   00000058   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    993          
    994          /*
    995           * LPLD_CAN_Receive_Interrupt
    996           * 该函数用于处理Msg缓冲区接收中断函数
    997           * 
    998           * 参数:
    999           *    canx--设置CAN总线通道
   1000           *      |__CAN0 --CAN0号模块
   1001           *      |__CAN1 --CAN1号模块
   1002           *    msg_num 选择需要处理接收中断的Msg缓冲区
   1003           *      |___ MSG_NUM_0 --Msg缓冲区0
   1004           *      |___ MSG_NUM_1 --Msg缓冲区1
   1005           *      |___ MSG_NUM_2 --Msg缓冲区2
   1006           *      |___ MSG_NUM_3 --Msg缓冲区3
   1007           *      |___ MSG_NUM_4 --Msg缓冲区4
   1008           *      ...... 
   1009           *      |___ MSG_NUM_15 --Msg缓冲区15
   1010           * 输出:
   1011           *    无 
   1012           */

   \                                 In section .text, align 2, keep-with-next
   1013          static void LPLD_CAN_Receive_Interrupt(CAN_Type *canx, uint8 msg_num)
   1014          {
   \                     LPLD_CAN_Receive_Interrupt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   1015            if(LPLD_CAN_Interrupt_GetFlag(canx,msg_num) == 1)
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       LPLD_CAN_Interrupt_GetFlag
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD112             BNE.N    ??LPLD_CAN_Receive_Interrupt_0
   1016            {
   1017              //如果定义了中断回掉函数，在此执行
   1018              if(canx == CAN0)
   \   00000014   0x....             LDR.N    R0,??DataTable19_5  ;; 0x40024000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD110             BNE.N    ??LPLD_CAN_Receive_Interrupt_1
   1019              {
   1020                if( CAN0_ISR[msg_num] != NULL)
   \   0000001A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable19_25
   \   0000001E   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD004             BEQ.N    ??LPLD_CAN_Receive_Interrupt_2
   1021                {
   1022                    CAN0_ISR[msg_num]();
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x....             LDR.N    R0,??DataTable19_25
   \   0000002A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000002E   0x4780             BLX      R0
   1023                }
   1024              }
   1025              else if (canx == CAN1)
   1026              {
   1027                if( CAN1_ISR[msg_num] != NULL)
   1028                {
   1029                    CAN1_ISR[msg_num]();
   1030                }
   1031              }
   1032              else
   1033              {
   1034                return;
   1035              }
   1036              LPLD_CAN_Interrupt_ClearPending(canx,msg_num);
   \                     ??LPLD_CAN_Receive_Interrupt_2: (+1)
   \   00000030   0x0029             MOVS     R1,R5
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       LPLD_CAN_Interrupt_ClearPending
   1037            }
   1038          }
   \                     ??LPLD_CAN_Receive_Interrupt_0: (+1)
   \                     ??LPLD_CAN_Receive_Interrupt_3: (+1)
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \                     ??LPLD_CAN_Receive_Interrupt_1: (+1)
   \   0000003C   0x....             LDR.N    R0,??DataTable19_23  ;; 0x400a4000
   \   0000003E   0x4284             CMP      R4,R0
   \   00000040   0xD10B             BNE.N    ??LPLD_CAN_Receive_Interrupt_4
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x....             LDR.N    R0,??DataTable19_26
   \   00000046   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD0F0             BEQ.N    ??LPLD_CAN_Receive_Interrupt_2
   \   0000004E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000050   0x....             LDR.N    R0,??DataTable19_26
   \   00000052   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000056   0x4780             BLX      R0
   \   00000058   0xE7EA             B.N      ??LPLD_CAN_Receive_Interrupt_2
   \                     ??LPLD_CAN_Receive_Interrupt_4: (+1)
   \   0000005A   0xE7EE             B.N      ??LPLD_CAN_Receive_Interrupt_3
   1039          /*
   1040           * LPLD_CAN_MB_ISR
   1041           * CANx中断处理函数
   1042           * 
   1043           * 参数:
   1044           *    无
   1045           * 输出:
   1046           *    无 
   1047           */

   \                                 In section .text, align 2, keep-with-next
   1048          static void LPLD_CAN_MB_ISR(void)
   1049          {
   \                     LPLD_CAN_MB_ISR: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1050            uint8 msg_obj;
   1051            
   1052            for (msg_obj = 0; msg_obj < MSG_MAX_NO; msg_obj++)
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0xE00F             B.N      ??LPLD_CAN_MB_ISR_0
   1053            {
   1054              if(flexcan_msgobj_param_t[msg_obj].CAN_Canx != NULL)
   1055              {
   1056                if(flexcan_msgobj_param_t[msg_obj].CAN_MsgDirection == CAN_MSGOBJ_DIR_TX)
   1057                {
   1058                  LPLD_CAN_Transmit_Interrupt(flexcan_msgobj_param_t[msg_obj].CAN_Canx,msg_obj);
   1059                }
   1060                else if(flexcan_msgobj_param_t[msg_obj].CAN_MsgDirection == CAN_MSGOBJ_DIR_RX)
   \                     ??LPLD_CAN_MB_ISR_1: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x....             LDR.N    R0,??DataTable19_27
   \   0000000A   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   0000000E   0x7A00             LDRB     R0,[R0, #+8]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD107             BNE.N    ??LPLD_CAN_MB_ISR_2
   1061                {
   1062                  LPLD_CAN_Receive_Interrupt(flexcan_msgobj_param_t[msg_obj].CAN_Canx,msg_obj);
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x0120             LSLS     R0,R4,#+4
   \   0000001C   0x....             LDR.N    R2,??DataTable19_27
   \   0000001E   0x5880             LDR      R0,[R0, R2]
   \   00000020   0x.... 0x....      BL       LPLD_CAN_Receive_Interrupt
   1063                }
   \                     ??LPLD_CAN_MB_ISR_2: (+1)
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \                     ??LPLD_CAN_MB_ISR_0: (+1)
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x2C10             CMP      R4,#+16
   \   0000002A   0xDA15             BGE.N    ??LPLD_CAN_MB_ISR_3
   \   0000002C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002E   0x0120             LSLS     R0,R4,#+4
   \   00000030   0x....             LDR.N    R1,??DataTable19_27
   \   00000032   0x5840             LDR      R0,[R0, R1]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD0F5             BEQ.N    ??LPLD_CAN_MB_ISR_2
   \   00000038   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003A   0x....             LDR.N    R0,??DataTable19_27
   \   0000003C   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   00000040   0x7A00             LDRB     R0,[R0, #+8]
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD1DF             BNE.N    ??LPLD_CAN_MB_ISR_1
   \   00000046   0x0021             MOVS     R1,R4
   \   00000048   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x0120             LSLS     R0,R4,#+4
   \   0000004E   0x....             LDR.N    R2,??DataTable19_27
   \   00000050   0x5880             LDR      R0,[R0, R2]
   \   00000052   0x.... 0x....      BL       LPLD_CAN_Transmit_Interrupt
   \   00000056   0xE7E5             B.N      ??LPLD_CAN_MB_ISR_2
   1064                else
   1065                {}
   1066              }
   1067            }
   1068          }
   \                     ??LPLD_CAN_MB_ISR_3: (+1)
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
   1069          /*
   1070           * CAN0中断处理函数
   1071           * 与启动文件startup_K60.s中的中断向量表关联
   1072           * 用户无需修改，程序自动进入对应通道中断函数
   1073           */

   \                                 In section .text, align 2, keep-with-next
   1074          void CAN0_MESS_IRQHandler(void)
   1075          {
   \                     CAN0_MESS_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1076          #if (UCOS_II > 0u)
   1077            OS_CPU_SR  cpu_sr = 0u;
   1078            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1079            OSIntEnter();
   1080            OS_EXIT_CRITICAL();
   1081          #endif
   1082            LPLD_CAN_MB_ISR();
   \   00000002   0x.... 0x....      BL       LPLD_CAN_MB_ISR
   1083          #if (UCOS_II > 0u)
   1084            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1085          #endif
   1086          }      
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
   1087          //29:  CAM 0 OR'ed Message buffer (0-15)
   1088          

   \                                 In section .text, align 2, keep-with-next
   1089          void CAN0_BUS_OFF_IRQHandler(void)
   1090          {
   1091            CAN0->ESR1 = CAN_ESR1_BOFFINT_MASK;
   \                     CAN0_BUS_OFF_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_28  ;; 0x40024020
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x6001             STR      R1,[R0, #+0]
   1092          }   //38:  CAM 0 Bus Off
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1093          void CAN0_ERR_IRQHandler(void)
   1094          {
   1095            uint32_t status;
   1096          
   1097            status = CAN0->ESR1;
   \                     CAN0_ERR_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_28  ;; 0x40024020
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   1098          
   1099            if( status  & CAN_ESR1_ERRINT_MASK)
   \   00000004   0x0781             LSLS     R1,R0,#+30
   \   00000006   0xD501             BPL.N    ??CAN0_ERR_IRQHandler_0
   1100            {
   1101              CAN0->ESR1 = status;		
   \   00000008   0x....             LDR.N    R1,??DataTable19_28  ;; 0x40024020
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1102            }	
   1103          }       //39:  CAM 0 Error
   \                     ??CAN0_ERR_IRQHandler_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1104          void CAN0_TW_IRQHandler(void)
   1105          {
   1106            CAN0->ESR1 = CAN_ESR1_TWRNINT_MASK;
   \                     CAN0_TW_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_28  ;; 0x40024020
   \   00000002   0xF45F 0x3100      MOVS     R1,#+131072
   \   00000006   0x6001             STR      R1,[R0, #+0]
   1107          }        //40:  CAM 0 Transmit Warning
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1108          void CAN0_RW_IRQHandler(void)
   1109          {
   1110            CAN0->ESR1 = CAN_ESR1_RWRNINT_MASK;
   \                     CAN0_RW_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_28  ;; 0x40024020
   \   00000002   0xF45F 0x3180      MOVS     R1,#+65536
   \   00000006   0x6001             STR      R1,[R0, #+0]
   1111          }        //41:  CAM 0 Receive Warning
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1112          void CAN0_WAKE_UP_IRQHandler(void){}   //42:  CAM 0 WakeUp
   \                     CAN0_WAKE_UP_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1113          void CAN0_IMEU_IRQHandler(void){}      //43:  CAM 0 Individual Matching Elements Update (IMEU)
   \                     CAN0_IMEU_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1114          void CAN0_LR_IRQHandler(void){}        //44:  CAM 0 Lost receive
   \                     CAN0_LR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1115          
   1116          /*
   1117           * CAN1中断处理函数
   1118           * 与启动文件startup_K60.s中的中断向量表关联
   1119           * 用户无需修改，程序自动进入对应通道中断函数
   1120           */

   \                                 In section .text, align 2, keep-with-next
   1121          void CAN1_MESS_IRQHandler(void)
   1122          {
   \                     CAN1_MESS_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1123          #if (UCOS_II > 0u)
   1124            OS_CPU_SR  cpu_sr = 0u;
   1125            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
   1126            OSIntEnter();
   1127            OS_EXIT_CRITICAL();
   1128          #endif
   1129            LPLD_CAN_MB_ISR();
   \   00000002   0x.... 0x....      BL       LPLD_CAN_MB_ISR
   1130          #if (UCOS_II > 0u)
   1131            OSIntExit();          //告知系统此时即将离开中断服务子函数
   1132          #endif
   1133          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
   1134          //37:  CAM 1 OR'ed Message buffer (0-15)
   1135          

   \                                 In section .text, align 2, keep-with-next
   1136          void CAN1_BUS_OFF_IRQHandler(void)
   1137          {
   1138            CAN1->ESR1 = CAN_ESR1_BOFFINT_MASK;
   \                     CAN1_BUS_OFF_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_29  ;; 0x400a4020
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x6001             STR      R1,[R0, #+0]
   1139          }   //38:  CAM 1 Bus Off
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1140          void CAN1_ERR_IRQHandler(void)
   1141          {
   1142            uint32_t status;
   1143          
   1144            status = CAN1->ESR1;
   \                     CAN1_ERR_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_29  ;; 0x400a4020
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   1145          
   1146            if( status  & CAN_ESR1_ERRINT_MASK)
   \   00000004   0x0781             LSLS     R1,R0,#+30
   \   00000006   0xD501             BPL.N    ??CAN1_ERR_IRQHandler_0
   1147            {
   1148              CAN1->ESR1 = status;		
   \   00000008   0x....             LDR.N    R1,??DataTable19_29  ;; 0x400a4020
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   1149            }	
   1150          }       //39:  CAM 1 Error
   \                     ??CAN1_ERR_IRQHandler_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1151          void CAN1_TW_IRQHandler(void)
   1152          {
   1153            CAN1->ESR1 = CAN_ESR1_TWRNINT_MASK;
   \                     CAN1_TW_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_29  ;; 0x400a4020
   \   00000002   0xF45F 0x3100      MOVS     R1,#+131072
   \   00000006   0x6001             STR      R1,[R0, #+0]
   1154          }        //40:  CAM 1 Transmit Warning
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1155          void CAN1_RW_IRQHandler(void)
   1156          {
   1157            CAN1->ESR1 = CAN_ESR1_RWRNINT_MASK;
   \                     CAN1_RW_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable19_29  ;; 0x400a4020
   \   00000002   0xF45F 0x3180      MOVS     R1,#+65536
   \   00000006   0x6001             STR      R1,[R0, #+0]
   1158          }        //41:  CAM 1 Receive Warning
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1159          void CAN1_WAKE_UP_IRQHandler(void){}   //42:  CAM 1 WakeUp
   \                     CAN1_WAKE_UP_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1160          void CAN1_IMEU_IRQHandler(void){}      //43:  CAM 1 Individual Matching Elements Update (IMEU)
   \                     CAN1_IMEU_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   1161          void CAN1_LR_IRQHandler(void){}        //44:  CAM 1 Lost receive
   \                     CAN1_LR_IRQHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   0x........         DC32     `?<Constant "D:\\\\Buyun\\\\Progress\\\\mem...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   0x000F4241         DC32     0xf4241

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   0x40065000         DC32     0x40065000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   0x40024000         DC32     0x40024000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_7:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_8:
   \   00000000   0x4004A048         DC32     0x4004a048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_9:
   \   00000000   0x40049030         DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_10:
   \   00000000   0x4004A04C         DC32     0x4004a04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_11:
   \   00000000   0x40049034         DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_12:
   \   00000000   0x4004B044         DC32     0x4004b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_13:
   \   00000000   0x4004D060         DC32     0x4004d060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_14:
   \   00000000   0x4004B040         DC32     0x4004b040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_15:
   \   00000000   0x4004D064         DC32     0x4004d064

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_16:
   \   00000000   0x00014585         DC32     0x14585

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_17:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_18:
   \   00000000   0x0001E848         DC32     0x1e848

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_19:
   \   00000000   0x0003D090         DC32     0x3d090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_20:
   \   00000000   0x0007A120         DC32     0x7a120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_21:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_22:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_23:
   \   00000000   0x400A4000         DC32     0x400a4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_24:
   \   00000000   0x1FFC0000         DC32     0x1ffc0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_25:
   \   00000000   0x........         DC32     CAN0_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_26:
   \   00000000   0x........         DC32     CAN1_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_27:
   \   00000000   0x........         DC32     flexcan_msgobj_param_t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_28:
   \   00000000   0x40024020         DC32     0x40024020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_29:
   \   00000000   0x400A4020         DC32     0x400a4020

   \                                 In section .rodata, align 4
   \                     `?<Constant "D:\\\\Buyun\\\\Progress\\\\mem...">`:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 42H, 75H, 79H, 75H, 6EH
   \              0x5C 0x42    
   \              0x75 0x79    
   \              0x75 0x6E    
   \   00000008   0x5C 0x50          DC8 5CH, 50H, 72H, 6FH, 67H, 72H, 65H, 73H
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x65 0x73    
   \   00000010   0x73 0x5C          DC8 73H, 5CH, 6DH, 65H, 6DH, 72H, 69H, 73H
   \              0x6D 0x65    
   \              0x6D 0x72    
   \              0x69 0x73    
   \   00000018   0x74 0x6F          DC8 74H, 6FH, 72H, 20H, 62H, 61H, 73H, 65H
   \              0x72 0x20    
   \              0x62 0x61    
   \              0x73 0x65    
   \   00000020   0x64 0x20          DC8 64H, 20H, 63H, 6FH, 6EH, 74H, 72H, 6FH
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x72 0x6F    
   \   00000028   0x6C 0x5C          DC8 6CH, 5CH, 6DH, 63H, 75H, 20H, 63H, 6FH
   \              0x6D 0x63    
   \              0x75 0x20    
   \              0x63 0x6F    
   \   00000030   0x64 0x65          DC8 64H, 65H, 5CH, 70H, 61H, 70H, 65H, 72H
   \              0x5C 0x70    
   \              0x61 0x70    
   \              0x65 0x72    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 64H, 65H, 5CH, 30H, 2EH
   \              0x6F 0x64    
   \              0x65 0x5C    
   \              0x30 0x2E    
   \   00000040   0x31 0x6D          DC8 31H, 6DH, 73H, 20H, 63H, 6FH, 6EH, 74H
   \              0x73 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \   00000048   0x72 0x6F          DC8 72H, 6FH, 6CH, 20H, 70H, 65H, 72H, 69H
   \              0x6C 0x20    
   \              0x70 0x65    
   \              0x72 0x69    
   \   00000050   0x6F 0x64          DC8 6FH, 64H, 5CH, 74H, 65H, 73H, 74H, 20H
   \              0x5C 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \   00000058   0x63 0x6F          DC8 63H, 6FH, 64H, 65H, 5CH, 43H, 42H, 59H
   \              0x64 0x65    
   \              0x5C 0x43    
   \              0x42 0x59    
   \   00000060   0x5F 0x4B          DC8 5FH, 4BH, 36H, 30H, 5FH, 62H, 61H, 6CH
   \              0x36 0x30    
   \              0x5F 0x62    
   \              0x61 0x6C    
   \   00000068   0x61 0x6E          DC8 61H, 6EH, 63H, 65H, 5FH, 44H, 41H, 43H
   \              0x63 0x65    
   \              0x5F 0x44    
   \              0x41 0x43    
   \   00000070   0x5C 0x6C          DC8 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H, 4CH
   \              0x69 0x62    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \   00000078   0x44 0x5C          DC8 44H, 5CH, 48H, 57H, 5CH, 48H, 57H, 5FH
   \              0x48 0x57    
   \              0x5C 0x48    
   \              0x57 0x5F    
   \   00000080   0x43 0x41          DC8 43H, 41H, 4EH, 2EH, 63H, 0
   \              0x4E 0x2E    
   \              0x63 0x00    
   \   00000086   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   1162          
   1163          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CAN0_BUS_OFF_IRQHandler
       0   CAN0_ERR_IRQHandler
       0   CAN0_IMEU_IRQHandler
       0   CAN0_LR_IRQHandler
       8   CAN0_MESS_IRQHandler
         8   -> LPLD_CAN_MB_ISR
       0   CAN0_RW_IRQHandler
       0   CAN0_TW_IRQHandler
       0   CAN0_WAKE_UP_IRQHandler
       0   CAN1_BUS_OFF_IRQHandler
       0   CAN1_ERR_IRQHandler
       0   CAN1_IMEU_IRQHandler
       0   CAN1_LR_IRQHandler
       8   CAN1_MESS_IRQHandler
         8   -> LPLD_CAN_MB_ISR
       0   CAN1_RW_IRQHandler
       0   CAN1_TW_IRQHandler
       0   CAN1_WAKE_UP_IRQHandler
       8   LPLD_CAN_Deinit
         8   -> NVIC_DisableIRQ
         8   -> NVIC_EnableIRQ
       8   LPLD_CAN_DisableIrq
         8   -> NVIC_DisableIRQ
       8   LPLD_CAN_EnableIrq
         8   -> NVIC_EnableIRQ
       0   LPLD_CAN_EnableMsgInterrupt
      16   LPLD_CAN_GetData
       0   LPLD_CAN_GetMsgCode
       0   LPLD_CAN_GetMsgID
       0   LPLD_CAN_GetMsgLength
       0   LPLD_CAN_GetMsgTimeStamp
      40   LPLD_CAN_Init
        40   -> LPLD_CAN_SetBaudRate
        40   -> assert_failed
      32   LPLD_CAN_InitMessageObject
        32   -> LPLD_CAN_EnableMsgInterrupt
       0   LPLD_CAN_Interrupt_ClearPending
       0   LPLD_CAN_Interrupt_GetFlag
       8   LPLD_CAN_MB_ISR
         8   -> LPLD_CAN_Receive_Interrupt
         8   -> LPLD_CAN_Transmit_Interrupt
      16   LPLD_CAN_Receive_Interrupt
        16   -- Indirect call
        16   -> LPLD_CAN_Interrupt_ClearPending
        16   -> LPLD_CAN_Interrupt_GetFlag
      48   LPLD_CAN_ReceivedMessage
        48   -> LPLD_CAN_GetData
        48   -> LPLD_CAN_GetMsgCode
        48   -> LPLD_CAN_GetMsgID
        48   -> LPLD_CAN_GetMsgLength
        48   -> LPLD_CAN_GetMsgTimeStamp
        48   -> LPLD_CAN_Interrupt_ClearPending
        48   -> LPLD_CAN_SetMsgCode
        48   -> LPLD_CAN_UnlockMsg
        48   -> memcpy
      16   LPLD_CAN_SetBaudRate
        16   -> assert_failed
       0   LPLD_CAN_SetMsgCode
      56   LPLD_CAN_TransmitMessage
        56   -> LPLD_CAN_GetMsgCode
        56   -> LPLD_CAN_WriteData
      16   LPLD_CAN_Transmit_Interrupt
        16   -- Indirect call
        16   -> LPLD_CAN_Interrupt_ClearPending
        16   -> LPLD_CAN_Interrupt_GetFlag
       0   LPLD_CAN_UnlockMsg
      24   LPLD_CAN_WriteData
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     136  ?<Constant "D:\\Buyun\\Progress\\mem...">
       8  ?<Constant {0L}>
       4  ??DataTable19
       4  ??DataTable19_1
       4  ??DataTable19_10
       4  ??DataTable19_11
       4  ??DataTable19_12
       4  ??DataTable19_13
       4  ??DataTable19_14
       4  ??DataTable19_15
       4  ??DataTable19_16
       4  ??DataTable19_17
       4  ??DataTable19_18
       4  ??DataTable19_19
       4  ??DataTable19_2
       4  ??DataTable19_20
       4  ??DataTable19_21
       4  ??DataTable19_22
       4  ??DataTable19_23
       4  ??DataTable19_24
       4  ??DataTable19_25
       4  ??DataTable19_26
       4  ??DataTable19_27
       4  ??DataTable19_28
       4  ??DataTable19_29
       4  ??DataTable19_3
       4  ??DataTable19_4
       4  ??DataTable19_5
       4  ??DataTable19_6
       4  ??DataTable19_7
       4  ??DataTable19_8
       4  ??DataTable19_9
       8  CAN0_BUS_OFF_IRQHandler
      14  CAN0_ERR_IRQHandler
       2  CAN0_IMEU_IRQHandler
      64  CAN0_ISR
       2  CAN0_LR_IRQHandler
       8  CAN0_MESS_IRQHandler
      10  CAN0_RW_IRQHandler
      10  CAN0_TW_IRQHandler
       2  CAN0_WAKE_UP_IRQHandler
       8  CAN1_BUS_OFF_IRQHandler
      14  CAN1_ERR_IRQHandler
       2  CAN1_IMEU_IRQHandler
      64  CAN1_ISR
       2  CAN1_LR_IRQHandler
       8  CAN1_MESS_IRQHandler
      10  CAN1_RW_IRQHandler
      10  CAN1_TW_IRQHandler
       2  CAN1_WAKE_UP_IRQHandler
      84  LPLD_CAN_Deinit
      34  LPLD_CAN_DisableIrq
      34  LPLD_CAN_EnableIrq
      36  LPLD_CAN_EnableMsgInterrupt
     108  LPLD_CAN_GetData
      16  LPLD_CAN_GetMsgCode
      50  LPLD_CAN_GetMsgID
      18  LPLD_CAN_GetMsgLength
      14  LPLD_CAN_GetMsgTimeStamp
     520  LPLD_CAN_Init
     186  LPLD_CAN_InitMessageObject
      36  LPLD_CAN_Interrupt_ClearPending
      30  LPLD_CAN_Interrupt_GetFlag
      90  LPLD_CAN_MB_ISR
      92  LPLD_CAN_Receive_Interrupt
     174  LPLD_CAN_ReceivedMessage
     190  LPLD_CAN_SetBaudRate
      32  LPLD_CAN_SetMsgCode
     224  LPLD_CAN_TransmitMessage
      90  LPLD_CAN_Transmit_Interrupt
       6  LPLD_CAN_UnlockMsg
     224  LPLD_CAN_WriteData
      24  NVIC_DisableIRQ
      24  NVIC_EnableIRQ
     256  flexcan_msgobj_param_t

 
   384 bytes in section .bss
   144 bytes in section .rodata
 2 568 bytes in section .text
 
 2 568 bytes of CODE  memory
   144 bytes of CONST memory
   384 bytes of DATA  memory

Errors: none
Warnings: none
