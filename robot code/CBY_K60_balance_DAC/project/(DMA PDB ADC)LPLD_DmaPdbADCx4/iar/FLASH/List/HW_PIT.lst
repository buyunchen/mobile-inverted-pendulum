###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.2.6274/W32 for ARM      03/Nov/2019  15:52:02 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Buyun\Progress\memristor based control\mcu            #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\lib\LPLD\HW\HW_PIT.c            #
#    Command line =  "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\lib\LPLD\HW\HW_PIT.c" -D        #
#                    LPLD_K60 -lCN "D:\Buyun\Progress\memristor based         #
#                    control\mcu code\paper code\0.1ms control period\test    #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\" -lB                #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\" -o                 #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\Obj\" --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5_2\arm\INC\c\DLib_Config_Normal.h" -I                 #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\app\" -I                     #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\CPU\" -I           #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\common\" -I        #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\" -I          #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\HW\" -I       #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\DEV\" -I      #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Ports\"    #
#                    -I "D:\Buyun\Progress\memristor based control\mcu        #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Source\"   #
#                    -I "D:\Buyun\Progress\memristor based control\mcu        #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\" -I         #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\option\" -I  #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\common\" -I    #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\driver\" -I    #
#                    "D:\Buyun\Progress\memristor based control\mcu           #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\descriptor\"   #
#                    -I "D:\Buyun\Progress\memristor based control\mcu        #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\class\" -Ol    #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5_2\arm\CMSIS\Include\" -D ARM_MATH_CM4      #
#    List file    =  D:\Buyun\Progress\memristor based control\mcu            #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\HW_PIT.lst           #
#    Object file  =  D:\Buyun\Progress\memristor based control\mcu            #
#                    code\paper code\0.1ms control period\test                #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\Obj\HW_PIT.o              #
#                                                                             #
#                                                                             #
###############################################################################

D:\Buyun\Progress\memristor based control\mcu code\paper code\0.1ms control period\test code\CBY_K60_balance_DAC\lib\LPLD\HW\HW_PIT.c
      1          /**
      2           * @file HW_PIT.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief PIT底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable9  ;; 0xe000e100
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000C   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000010   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x....             LDR.N    R2,??DataTable9_1  ;; 0xe000e180
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000C   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000010   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000014   0x4770             BX       LR               ;; return
     23          #include "HW_PIT.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          PIT_ISR_CALLBACK PIT_ISR[4];
   \                     PIT_ISR:
   \   00000000                      DS8 16
     27          
     28          /*
     29           * LPLD_PIT_Init
     30           * PIT通用初始化函数，选择PITx、配置中断周期、中断函数
     31           * 
     32           * 参数:
     33           *    pit_init_structure--PIT初始化结构体，
     34           *                        具体定义见PIT_InitTypeDef
     35           *
     36           * 输出:
     37           *    0--配置错误
     38           *    1--配置成功
     39           */

   \                                 In section .text, align 2, keep-with-next
     40          uint8 LPLD_PIT_Init(PIT_InitTypeDef pit_init_structure)
     41          { 
   \                     LPLD_PIT_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
     42            //计算定时加载值
     43            uint32 ldval = pit_init_structure.PIT_PeriodUs*(g_bus_clock/1000000)
     44                         + pit_init_structure.PIT_PeriodMs*1000*(g_bus_clock/1000000)
     45                         + pit_init_structure.PIT_PeriodS*1000000*(g_bus_clock/1000000);
   \   00000004   0x9805             LDR      R0,[SP, #+20]
   \   00000006   0x....             LDR.N    R1,??DataTable9_2
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x....             LDR.N    R2,??DataTable9_3  ;; 0xf4240
   \   0000000C   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000010   0x9A06             LDR      R2,[SP, #+24]
   \   00000012   0x....             LDR.N    R3,??DataTable9_2
   \   00000014   0x681B             LDR      R3,[R3, #+0]
   \   00000016   0x....             LDR.N    R4,??DataTable9_3  ;; 0xf4240
   \   00000018   0xFBB3 0xF3F4      UDIV     R3,R3,R4
   \   0000001C   0x435A             MULS     R2,R3,R2
   \   0000001E   0xF44F 0x737A      MOV      R3,#+1000
   \   00000022   0x435A             MULS     R2,R3,R2
   \   00000024   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000028   0x9907             LDR      R1,[SP, #+28]
   \   0000002A   0x....             LDR.N    R2,??DataTable9_2
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0x....             LDR.N    R3,??DataTable9_3  ;; 0xf4240
   \   00000030   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000034   0x4351             MULS     R1,R2,R1
   \   00000036   0x....             LDR.N    R2,??DataTable9_3  ;; 0xf4240
   \   00000038   0xFB02 0x0401      MLA      R4,R2,R1,R0
     46            PITx pitx = pit_init_structure.PIT_Pitx;
   \   0000003C   0xF89D 0x5010      LDRB     R5,[SP, #+16]
     47            PIT_ISR_CALLBACK isr_func = pit_init_structure.PIT_Isr;
   \   00000040   0x9E08             LDR      R6,[SP, #+32]
     48            
     49            //参数检查
     50            ASSERT( pitx <= PIT3);        //判断模块号
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x2D04             CMP      R5,#+4
   \   00000046   0xDB03             BLT.N    ??LPLD_PIT_Init_0
   \   00000048   0x2132             MOVS     R1,#+50
   \   0000004A   0x....             LDR.N    R0,??DataTable9_4
   \   0000004C   0x.... 0x....      BL       assert_failed
     51            ASSERT( ldval > 0);           //判断时加载值                
   \                     ??LPLD_PIT_Init_0: (+1)
   \   00000050   0x2C00             CMP      R4,#+0
   \   00000052   0xD103             BNE.N    ??LPLD_PIT_Init_1
   \   00000054   0x2133             MOVS     R1,#+51
   \   00000056   0x....             LDR.N    R0,??DataTable9_4
   \   00000058   0x.... 0x....      BL       assert_failed
     52            
     53            //开启定时模块时钟
     54            SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
   \                     ??LPLD_PIT_Init_1: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable9_5  ;; 0x4004803c
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   00000064   0x....             LDR.N    R1,??DataTable9_5  ;; 0x4004803c
   \   00000066   0x6008             STR      R0,[R1, #+0]
     55            
     56            // 开启 PIT
     57            PIT->MCR = 0x00;
   \   00000068   0x....             LDR.N    R0,??DataTable9_6  ;; 0x40037000
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x6001             STR      R1,[R0, #+0]
     58           
     59            if(isr_func != NULL){
   \   0000006E   0x0030             MOVS     R0,R6
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD009             BEQ.N    ??LPLD_PIT_Init_2
     60              PIT_ISR[pitx] = isr_func;
   \   00000074   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000076   0x....             LDR.N    R0,??DataTable9_7
   \   00000078   0xF840 0x6025      STR      R6,[R0, R5, LSL #+2]
     61              //使能中断
     62              PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
   \   0000007C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000007E   0x....             LDR.N    R0,??DataTable9_8  ;; 0x40037100
   \   00000080   0xEB10 0x1005      ADDS     R0,R0,R5, LSL #+4
   \   00000084   0x2102             MOVS     R1,#+2
   \   00000086   0x6081             STR      R1,[R0, #+8]
     63              //在NVIC中使能PIT中断
     64              //enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
     65            }
     66            
     67            //period = (period_ns/bus_period_ns)-1
     68            PIT->CHANNEL[pitx].LDVAL = ldval-1;
   \                     ??LPLD_PIT_Init_2: (+1)
   \   00000088   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000008A   0x0128             LSLS     R0,R5,#+4
   \   0000008C   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \   0000008E   0x1E62             SUBS     R2,R4,#+1
   \   00000090   0x5042             STR      R2,[R0, R1]
     69            //使能中断
     70            //PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
     71            //开始定时
     72            PIT->CHANNEL[pitx].TCTRL |= PIT_TCTRL_TEN_MASK;
   \   00000092   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000094   0x....             LDR.N    R0,??DataTable9_8  ;; 0x40037100
   \   00000096   0xEB10 0x1005      ADDS     R0,R0,R5, LSL #+4
   \   0000009A   0x6880             LDR      R0,[R0, #+8]
   \   0000009C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A2   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \   000000A4   0xEB11 0x1105      ADDS     R1,R1,R5, LSL #+4
   \   000000A8   0x6088             STR      R0,[R1, #+8]
     73            
     74            return 1;
   \   000000AA   0x2001             MOVS     R0,#+1
   \   000000AC   0xBC70             POP      {R4-R6}
   \   000000AE   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
     75          }
     76          
     77          /*
     78           * LPLD_PIT_Deinit
     79           * PIT反初始化函数，关闭选择的PITx
     80           * 
     81           * 参数:
     82           *    pit_init_structure--PIT初始化结构体，
     83           *                        具体定义见PIT_InitTypeDef
     84           *
     85           * 输出:
     86           *    无
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          void LPLD_PIT_Deinit(PIT_InitTypeDef pit_init_structure)
     89          { 
   \                     LPLD_PIT_Deinit: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
     90            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
     91            
     92            //参数检查
     93            ASSERT( pitx <= PIT3);        //判断模块号              
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDB03             BLT.N    ??LPLD_PIT_Deinit_0
   \   0000000E   0x215D             MOVS     R1,#+93
   \   00000010   0x....             LDR.N    R0,??DataTable9_4
   \   00000012   0x.... 0x....      BL       assert_failed
     94          
     95            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \                     ??LPLD_PIT_Deinit_0: (+1)
   \   00000016   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       NVIC_DisableIRQ
     96          
     97            //禁用中断\停止定时
     98            PIT->CHANNEL[pitx].TCTRL = 0;
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable9_8  ;; 0x40037100
   \   00000024   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6081             STR      R1,[R0, #+8]
     99          }
   \   0000002C   0xBC10             POP      {R4}
   \   0000002E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    100          
    101          /*
    102           * LPLD_PIT_EnableIrq
    103           * 使能PITx中断
    104           * 
    105           * 参数:
    106           *    pit_init_structure--PIT初始化结构体，
    107           *                        具体定义见PIT_InitTypeDef
    108           *
    109           * 输出:
    110           *    无
    111           *
    112           */

   \                                 In section .text, align 2, keep-with-next
    113          void LPLD_PIT_EnableIrq(PIT_InitTypeDef pit_init_structure)
    114          {
   \                     LPLD_PIT_EnableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    115            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    116            
    117            //参数检查
    118            ASSERT( pitx <= PIT3);                //判断PITx
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDB03             BLT.N    ??LPLD_PIT_EnableIrq_0
   \   0000000E   0x2176             MOVS     R1,#+118
   \   00000010   0x....             LDR.N    R0,??DataTable9_4
   \   00000012   0x.... 0x....      BL       assert_failed
    119          
    120            enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \                     ??LPLD_PIT_EnableIrq_0: (+1)
   \   00000016   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       NVIC_EnableIRQ
    121          }
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    122          
    123          /*
    124           * LPLD_PIT_DisableIrq
    125           * 禁用PITx中断
    126           * 
    127           * 参数:
    128           *    pit_init_structure--PIT初始化结构体，
    129           *                        具体定义见PIT_InitTypeDef
    130           *
    131           * 输出:
    132           *    无
    133           *
    134           */

   \                                 In section .text, align 2, keep-with-next
    135          void LPLD_PIT_DisableIrq(PIT_InitTypeDef pit_init_structure)
    136          {
   \                     LPLD_PIT_DisableIrq: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    137            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    138            
    139            //参数检查
    140            ASSERT( pitx <= PIT3);                //判断PITx
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x2C04             CMP      R4,#+4
   \   0000000C   0xDB03             BLT.N    ??LPLD_PIT_DisableIrq_0
   \   0000000E   0x218C             MOVS     R1,#+140
   \   00000010   0x....             LDR.N    R0,??DataTable9_4
   \   00000012   0x.... 0x....      BL       assert_failed
    141            
    142            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx));
   \                     ??LPLD_PIT_DisableIrq_0: (+1)
   \   00000016   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000001A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       NVIC_DisableIRQ
    143          }
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    144          
    145          
    146          /*
    147           * PIT0--PIT3中断处理函数
    148           * 与启动文件startup_K60.s中的中断向量表关联
    149           * 用户无需修改，程序自动进入对应通道中断函数
    150           */
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void PIT0_IRQHandler(void)
    153          {
   \                     PIT0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    154          #if (UCOS_II > 0u)
    155            OS_CPU_SR  cpu_sr = 0u;
    156            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    157            OSIntEnter();
    158            OS_EXIT_CRITICAL();
    159          #endif
    160            
    161            //调用用户自定义中断服务
    162            PIT_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    163            //清除中断标志位
    164            PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_9  ;; 0x4003710c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_9  ;; 0x4003710c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    165            
    166          #if (UCOS_II > 0u)
    167            OSIntExit();          //告知系统此时即将离开中断服务子函数
    168          #endif
    169          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    170          void PIT1_IRQHandler(void)
    171          {
   \                     PIT1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    172          #if (UCOS_II > 0u)
    173            OS_CPU_SR  cpu_sr = 0u;
    174            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    175            OSIntEnter();
    176            OS_EXIT_CRITICAL();
    177          #endif
    178            
    179            //调用用户自定义中断服务
    180            PIT_ISR[1]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
    181            //清除中断标志位
    182            PIT->CHANNEL[1].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_10  ;; 0x4003711c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_10  ;; 0x4003711c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    183            
    184          #if (UCOS_II > 0u)
    185            OSIntExit();          //告知系统此时即将离开中断服务子函数
    186          #endif
    187          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    188          void PIT2_IRQHandler(void)
    189          {
   \                     PIT2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    190          #if (UCOS_II > 0u)
    191            OS_CPU_SR  cpu_sr = 0u;
    192            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    193            OSIntEnter();
    194            OS_EXIT_CRITICAL();
    195          #endif
    196            
    197            //调用用户自定义中断服务
    198            PIT_ISR[2]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
    199            //清除中断标志位
    200            PIT->CHANNEL[2].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_11  ;; 0x4003712c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_11  ;; 0x4003712c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    201            
    202          #if (UCOS_II > 0u)
    203            OSIntExit();          //告知系统此时即将离开中断服务子函数
    204          #endif
    205          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    206          void PIT3_IRQHandler(void)
    207          {
   \                     PIT3_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    208          #if (UCOS_II > 0u)
    209            OS_CPU_SR  cpu_sr = 0u;
    210            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    211            OSIntEnter();
    212            OS_EXIT_CRITICAL();
    213          #endif
    214            
    215            //调用用户自定义中断服务
    216            PIT_ISR[3]();  
   \   00000002   0x....             LDR.N    R0,??DataTable9_7
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x4780             BLX      R0
    217            //清除中断标志位
    218            PIT->CHANNEL[3].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable9_12  ;; 0x4003713c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable9_12  ;; 0x4003713c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    219            
    220          #if (UCOS_II > 0u)
    221            OSIntExit();          //告知系统此时即将离开中断服务子函数
    222          #endif
    223          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x........         DC32     `?<Constant "D:\\\\Buyun\\\\Progress\\\\mem...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     PIT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x40037100         DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x4003712C         DC32     0x4003712c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x4003713C         DC32     0x4003713c

   \                                 In section .rodata, align 4
   \                     `?<Constant "D:\\\\Buyun\\\\Progress\\\\mem...">`:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 42H, 75H, 79H, 75H, 6EH
   \              0x5C 0x42    
   \              0x75 0x79    
   \              0x75 0x6E    
   \   00000008   0x5C 0x50          DC8 5CH, 50H, 72H, 6FH, 67H, 72H, 65H, 73H
   \              0x72 0x6F    
   \              0x67 0x72    
   \              0x65 0x73    
   \   00000010   0x73 0x5C          DC8 73H, 5CH, 6DH, 65H, 6DH, 72H, 69H, 73H
   \              0x6D 0x65    
   \              0x6D 0x72    
   \              0x69 0x73    
   \   00000018   0x74 0x6F          DC8 74H, 6FH, 72H, 20H, 62H, 61H, 73H, 65H
   \              0x72 0x20    
   \              0x62 0x61    
   \              0x73 0x65    
   \   00000020   0x64 0x20          DC8 64H, 20H, 63H, 6FH, 6EH, 74H, 72H, 6FH
   \              0x63 0x6F    
   \              0x6E 0x74    
   \              0x72 0x6F    
   \   00000028   0x6C 0x5C          DC8 6CH, 5CH, 6DH, 63H, 75H, 20H, 63H, 6FH
   \              0x6D 0x63    
   \              0x75 0x20    
   \              0x63 0x6F    
   \   00000030   0x64 0x65          DC8 64H, 65H, 5CH, 70H, 61H, 70H, 65H, 72H
   \              0x5C 0x70    
   \              0x61 0x70    
   \              0x65 0x72    
   \   00000038   0x20 0x63          DC8 20H, 63H, 6FH, 64H, 65H, 5CH, 30H, 2EH
   \              0x6F 0x64    
   \              0x65 0x5C    
   \              0x30 0x2E    
   \   00000040   0x31 0x6D          DC8 31H, 6DH, 73H, 20H, 63H, 6FH, 6EH, 74H
   \              0x73 0x20    
   \              0x63 0x6F    
   \              0x6E 0x74    
   \   00000048   0x72 0x6F          DC8 72H, 6FH, 6CH, 20H, 70H, 65H, 72H, 69H
   \              0x6C 0x20    
   \              0x70 0x65    
   \              0x72 0x69    
   \   00000050   0x6F 0x64          DC8 6FH, 64H, 5CH, 74H, 65H, 73H, 74H, 20H
   \              0x5C 0x74    
   \              0x65 0x73    
   \              0x74 0x20    
   \   00000058   0x63 0x6F          DC8 63H, 6FH, 64H, 65H, 5CH, 43H, 42H, 59H
   \              0x64 0x65    
   \              0x5C 0x43    
   \              0x42 0x59    
   \   00000060   0x5F 0x4B          DC8 5FH, 4BH, 36H, 30H, 5FH, 62H, 61H, 6CH
   \              0x36 0x30    
   \              0x5F 0x62    
   \              0x61 0x6C    
   \   00000068   0x61 0x6E          DC8 61H, 6EH, 63H, 65H, 5FH, 44H, 41H, 43H
   \              0x63 0x65    
   \              0x5F 0x44    
   \              0x41 0x43    
   \   00000070   0x5C 0x6C          DC8 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H, 4CH
   \              0x69 0x62    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \   00000078   0x44 0x5C          DC8 44H, 5CH, 48H, 57H, 5CH, 48H, 57H, 5FH
   \              0x48 0x57    
   \              0x5C 0x48    
   \              0x57 0x5F    
   \   00000080   0x50 0x49          DC8 50H, 49H, 54H, 2EH, 63H, 0
   \              0x54 0x2E    
   \              0x63 0x00    
   \   00000086   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_PIT_Deinit
        24   -> NVIC_DisableIRQ
        24   -> assert_failed
      24   LPLD_PIT_DisableIrq
        24   -> NVIC_DisableIRQ
        24   -> assert_failed
      24   LPLD_PIT_EnableIrq
        24   -> NVIC_EnableIRQ
        24   -> assert_failed
      32   LPLD_PIT_Init
        32   -> assert_failed
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       8   PIT0_IRQHandler
         8   -- Indirect call
       8   PIT1_IRQHandler
         8   -- Indirect call
       8   PIT2_IRQHandler
         8   -- Indirect call
       8   PIT3_IRQHandler
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     136  ?<Constant "D:\\Buyun\\Progress\\mem...">
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      50  LPLD_PIT_Deinit
      38  LPLD_PIT_DisableIrq
      38  LPLD_PIT_EnableIrq
     178  LPLD_PIT_Init
      22  NVIC_DisableIRQ
      22  NVIC_EnableIRQ
      22  PIT0_IRQHandler
      22  PIT1_IRQHandler
      22  PIT2_IRQHandler
      22  PIT3_IRQHandler
      16  PIT_ISR

 
  16 bytes in section .bss
 136 bytes in section .rodata
 488 bytes in section .text
 
 488 bytes of CODE  memory
 136 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
