###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.2.6274/W32 for ARM      12/May/2020  21:23:50 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Current Projects\#1 Memristor tuning                  #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\app\LPLD_DmaPdbADCx4.c              #
#    Command line =  "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\app\LPLD_DmaPdbADCx4.c" -D          #
#                    LPLD_K60 -lCN "D:\Current Projects\#1 Memristor tuning   #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\" -lB "D:\Current    #
#                    Projects\#1 Memristor tuning circuit\memristor based     #
#                    control\mcu code\paper code\0.1ms control period\test    #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\" -o "D:\Current     #
#                    Projects\#1 Memristor tuning circuit\memristor based     #
#                    control\mcu code\paper code\0.1ms control period\test    #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\Obj\" --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5_2\arm\INC\c\DLib_Config_Normal.h" -I "D:\Current     #
#                    Projects\#1 Memristor tuning circuit\memristor based     #
#                    control\mcu code\paper code\0.1ms control period\test    #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\app\" -I "D:\Current         #
#                    Projects\#1 Memristor tuning circuit\memristor based     #
#                    control\mcu code\paper code\0.1ms control period\test    #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\CPU\" -I           #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\common\" -I        #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\" -I          #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\HW\" -I       #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\LPLD\DEV\" -I      #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Ports\"    #
#                    -I "D:\Current Projects\#1 Memristor tuning              #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\uCOS-II\Source\"   #
#                    -I "D:\Current Projects\#1 Memristor tuning              #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\" -I         #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\FatFs\option\" -I  #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\common\" -I    #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\driver\" -I    #
#                    "D:\Current Projects\#1 Memristor tuning                 #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\descriptor\"   #
#                    -I "D:\Current Projects\#1 Memristor tuning              #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\..\..\..\lib\USB\class\" -Ol    #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5_2\arm\CMSIS\Include\" -D ARM_MATH_CM4      #
#    List file    =  D:\Current Projects\#1 Memristor tuning                  #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\List\LPLD_DmaPdbADCx4.lst #
#    Object file  =  D:\Current Projects\#1 Memristor tuning                  #
#                    circuit\memristor based control\mcu code\paper           #
#                    code\0.1ms control period\test                           #
#                    code\CBY_K60_balance_DAC\project\(DMA PDB                #
#                    ADC)LPLD_DmaPdbADCx4\iar\FLASH\Obj\LPLD_DmaPdbADCx4.o    #
#                                                                             #
#                                                                             #
###############################################################################

D:\Current Projects\#1 Memristor tuning circuit\memristor based control\mcu code\paper code\0.1ms control period\test code\CBY_K60_balance_DAC\project\(DMA PDB ADC)LPLD_DmaPdbADCx4\app\LPLD_DmaPdbADCx4.c
      1          /**
      2          * --------------基于"拉普兰德K60底层库V3"的工程（LPLD_DmaPdbADCx4）-----------------
      3          * @file LPLD_DmaPdbADCx4.c
      4          * @version 0.1[By LPLD]
      5          * @date 2013-10-30
      6          * @brief 综合利用ADC、PDB、DMA模块，实现四通道AD自动连续采集，无需CPU干预，采集结果随时从内存读取
      7          *
      8          * 版权所有:北京拉普兰德电子技术有限公司
      9          * 官网 http://www.lpld.cn
     10          * 交流论坛 http://bbs.lpld.cn
     11          * mail:support@lpld.cn
     12          * 硬件平台:  RUSH Kinetis开发板
     13          *
     14          * 本工程基于"拉普兰德K60底层库V3"开发，
     15          * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
     16          * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
     17          * 底层库使用方法见相关文档。 
     18          *
     19          */
     20          
     21          /*note:mpu is ready
     22          UART is READY
     23          QuadratureDecoder is waiting
     24          
     25          4.29 EVERY pieces for the basic function are ready except the optic module
     26               and the project still need to be modificated so that it could be more readble and transportable 
     27          */
     28          #include "common.h"
     29          
     30          //global index//

   \                                 In section .bss, align 4
     31          int obse=0;  
   \                     obse:
   \   00000000                      DS8 4
     32          

   \                                 In section .bss, align 4
     33          int t_stop=0;
   \                     t_stop:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     34          unsigned long int T=0;   //全局时间变量，每1ms该变量加1 
   \                     T:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     35          unsigned long int T_start=0; //小车启动时的时间
   \                     T_start:
   \   00000000                      DS8 4
     36          

   \                                 In section .bss, align 4
     37          unsigned long int US=0; //全局时间变量，每1us该变量加1 
   \                     US:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     38          unsigned long int US_display=0; 
   \                     US_display:
   \   00000000                      DS8 4
     39          

   \                                 In section .bss, align 1
     40          unsigned char status=0;  //启动前小车的调试状态，0为屏幕显示摄像头采集内容                          //1为调整舵机中值，2为调整PID参数，3为设定运行速度，4启动
   \                     status:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     41          unsigned char status_knob=0;   //旋钮状态，0为未旋转，1为旋钮1正转，2为旋钮1反转，3为旋钮2正转，4为旋钮2反转                                 //正反转是相对的
   \                     status_knob:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     42          unsigned char status_button=0;   //旋钮按下状态变量
   \                     status_button:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     43          char temp_status=1; 
   \                     temp_status:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
     44          unsigned long int last_press_time=0;  //最后一次按键的系统时间，用于软件滤波
   \                     last_press_time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     45          unsigned long int last_turn_time=0;   //最后一次旋转旋钮的系统时间，用于软件滤波
   \                     last_turn_time:
   \   00000000                      DS8 4
     46          
     47          
     48          
     49          //int READ_SDA;

   \                                 In section .bss, align 4
     50          int ii=0; //融合滤波的变量  
   \                     ii:
   \   00000000                      DS8 4
     51          

   \                                 In section .bss, align 2
     52          int16 gyro_X=0;
   \                     gyro_X:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     53          int16 gyro_Y=0;
   \                     gyro_Y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     54          int16 gyro_Z=0;
   \                     gyro_Z:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     55          int16 ACCE_X=0;
   \                     ACCE_X:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     56          int16 ACCE_Y=0;
   \                     ACCE_Y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     57          int16 ACCE_Z=0;
   \                     ACCE_Z:
   \   00000000                      DS8 2
     58          

   \                                 In section .bss, align 4
     59          int gyro_X_k=0;
   \                     gyro_X_k:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     60          int gyro_Y_k=0;
   \                     gyro_Y_k:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     61          int gyro_Z_k=0;
   \                     gyro_Z_k:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     62          int ACCE_X_k=0;
   \                     ACCE_X_k:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     63          int ACCE_Y_k=0;
   \                     ACCE_Y_k:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     64          int ACCE_Z_k=0;
   \                     ACCE_Z_k:
   \   00000000                      DS8 4
     65          

   \                                 In section .bss, align 4
     66          int g_fGravityAngle = 0,g_fGyroscopeAngleSpeed = 0;
   \                     g_fGravityAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     g_fGyroscopeAngleSpeed:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     67          float g_fGyroscopeAngleIntegral = 0,g_fCarAngle = 0,g_fCarAngle_d=0;
   \                     g_fGyroscopeAngleIntegral:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     g_fCarAngle:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     g_fCarAngle_d:
   \   00000000                      DS8 4
     68          

   \                                 In section .bss, align 4
     69          unsigned int Gyro_Balance = 0;
   \                     Gyro_Balance:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     70          unsigned int Gyro_Turn = 0;
   \                     Gyro_Turn:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     71          unsigned int Accelerometer = 0;
   \                     Accelerometer:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     72          unsigned int dd_Accelerometer = 0;
   \                     dd_Accelerometer:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     73          unsigned int CV_ACCE_OFFSET =1415;   //加速度的零点偏差
   \                     CV_ACCE_OFFSET:
   \   00000000   0x00000587         DC32 1415

   \                                 In section .data, align 4
     74          unsigned int CV_GYRO_ZERO = 830;   //陀螺仪的零点偏差 
   \                     CV_GYRO_ZERO:
   \   00000000   0x0000033E         DC32 830
     75          

   \                                 In section .bss, align 4
     76          float angle_phy = 0;
   \                     angle_phy:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     77          float dangle_phy = 0; 
   \                     dangle_phy:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78          float angle_pre = 0;
   \                     angle_pre:
   \   00000000                      DS8 4
     79          

   \                                 In section .bss, align 4
     80          int g_fAngleControlOut = 0;
   \                     g_fAngleControlOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     81          float LE = 0;
   \                     LE:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     82          float ANGLE_BIAS=10.5;
   \                     ANGLE_BIAS:
   \   00000000   0x41280000         DC32 41280000H

   \                                 In section .data, align 4
     83          float ANGLE_BIAS10=50;
   \                     ANGLE_BIAS10:
   \   00000000   0x42480000         DC32 42480000H
     84          

   \                                 In section .bss, align 4
     85          float g_fDirectionControlOut = 0;
   \                     g_fDirectionControlOut:
   \   00000000                      DS8 4
     86          

   \                                 In section .bss, align 4
     87          int g_fLeftMotorOut = 0, g_fRightMotorOut = 0;
   \                     g_fLeftMotorOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     g_fRightMotorOut:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     88          uint8 g_Car_Motor_Run=0;
   \                     g_Car_Motor_Run:
   \   00000000                      DS8 1
     89          

   \                                 In section .bss, align 4
     90          float Pitch = 0.0f;
   \                     Pitch:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     91          float Roll = 0.0f;
   \                     Roll:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     92          float Yaw = 0.0f;
   \                     Yaw:
   \   00000000                      DS8 4
     93          
     94          

   \                                 In section .bss, align 4
     95          float d_Pitch = 0.0f;
   \                     d_Pitch:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     96          float p_Pitch = 0.0f;
   \                     p_Pitch:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     97          float k1_obs = 0;
   \                     k1_obs:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     98          float k2_obs = 0;
   \                     k2_obs:
   \   00000000                      DS8 4
     99          
    100          
    101          //---MPU6050 End---//
    102          //uint8 mystr[20]="";

   \                                 In section .bss, align 4
    103          char mystr[20]="";
   \                     mystr:
   \   00000000                      DS8 20
    104          
    105          
    106          //UART//////////////////////////////////////////////

   \                                 In section .bss, align 4
    107          int OutData[4]={0};
   \                     OutData:
   \   00000000                      DS8 16
    108          ///////////////velocity measurement/////////////////////////////////////

   \                                 In section .bss, align 2
    109          int16 qd_speed_l=0;
   \                     qd_speed_l:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    110          int16 qd_speed_r=0;
   \                     qd_speed_r:
   \   00000000                      DS8 2
    111          ////////////////////////////////////////////////////////////////////////

   \                                 In section .bss, align 2
    112          uint16 ch1 = 0;
   \                     ch1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    113          uint16 ch2 = 0;
   \                     ch2:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    114          uint16 ch3 = 0;
   \                     ch3:
   \   00000000                      DS8 2
    115          ////////////////////////////////////

   \                                 In section .bss, align 4
    116          float adcdac_convert = 0;
   \                     adcdac_convert:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
    117          int16 data_ad = 0;
   \                     data_ad:
   \   00000000                      DS8 2
    118          void dac_init(void);

   \                                 In section .bss, align 4
    119          DAC_InitTypeDef dac_init_struct;
   \                     dac_init_struct:
   \   00000000                      DS8 28
    120          /////////////////////////////////////
    121          #define SlaveAddress0 0XC4
    122          #define SlaveAddress1 0XC6
    123          ////////////////////////////////////

   \                                 In section .bss, align 2
    124              uint16 data1 = 0; 
   \                     data1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
    125              uint16 data2 = 0;
   \                     data2:
   \   00000000                      DS8 2
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void InitADS1115()
    128          {
   \                     InitADS1115: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    129                  uint8 conf[2];
    130          	//Request
    131                  IIC_Start();
   \   00000002   0x.... 0x....      BL       IIC_Start
    132          	IIC_SendByte(0X90);
   \   00000006   0x2090             MOVS     R0,#+144
   \   00000008   0x.... 0x....      BL       IIC_SendByte
    133                  IIC_SendByte(0X01);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       IIC_SendByte
    134                  IIC_Stop();
   \   00000012   0x.... 0x....      BL       IIC_Stop
    135          	//Response
    136          	//I2C_StartTransmission(I2C1,I2C_Direction_Receiver,0x90);
    137          	//conf[0] = I2C_Read_ack(I2C1);
    138          	//conf[1] = I2C_Read_nack(I2C1);
    139          	//I2C_GenerateSTOP(I2C1,ENABLE);
    140                  IIC_Start();
   \   00000016   0x.... 0x....      BL       IIC_Start
    141                  IIC_SendByte(0X91);
   \   0000001A   0x2091             MOVS     R0,#+145
   \   0000001C   0x.... 0x....      BL       IIC_SendByte
    142                  //conf[0] = IIC_ReadByte();
    143          	//conf[1] = IIC_ReadByte();
    144                  data1 = IIC_ReadByte();
   \   00000020   0x.... 0x....      BL       IIC_ReadByte
   \   00000024   0x....             LDR.N    R1,??DataTable4
   \   00000026   0x8008             STRH     R0,[R1, #+0]
    145          	data2 = IIC_ReadByte();
   \   00000028   0x.... 0x....      BL       IIC_ReadByte
   \   0000002C   0x....             LDR.N    R1,??DataTable4_1
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
    146                  IIC_Stop();
   \   00000030   0x.... 0x....      BL       IIC_Stop
    147          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          void selectInput(uint8 number)
    150          {
   \                     selectInput: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    151          	 uint8_t conf[2];
    152          	 conf[1] = 227;
   \   00000002   0x21E3             MOVS     R1,#+227
   \   00000004   0xF88D 0x1001      STRB     R1,[SP, #+1]
    153          
    154          	 //create config for selecting channel
    155          	 if(number == 0)
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??selectInput_0
    156          	 	 {
    157          	 		 conf[0] = 195;
   \   0000000E   0x21C3             MOVS     R1,#+195
   \   00000010   0xF88D 0x1000      STRB     R1,[SP, #+0]
    158          	 	 }
    159          	 if(number == 1)
   \                     ??selectInput_0: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD102             BNE.N    ??selectInput_1
    160          	 	 {
    161          	 		 conf[0] = 211;
   \   0000001A   0x21D3             MOVS     R1,#+211
   \   0000001C   0xF88D 0x1000      STRB     R1,[SP, #+0]
    162          	 	 }
    163          	 if(number == 2)
   \                     ??selectInput_1: (+1)
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD102             BNE.N    ??selectInput_2
    164          	 	 {
    165          	 		 conf[0] = 227;
   \   00000026   0x21E3             MOVS     R1,#+227
   \   00000028   0xF88D 0x1000      STRB     R1,[SP, #+0]
    166          	 	 }
    167          	 if(number == 3)
   \                     ??selectInput_2: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x2803             CMP      R0,#+3
   \   00000030   0xD102             BNE.N    ??selectInput_3
    168          	 	 {
    169          	 		 conf[0] = 243;
   \   00000032   0x20F3             MOVS     R0,#+243
   \   00000034   0xF88D 0x0000      STRB     R0,[SP, #+0]
    170          	 	 }
    171          
    172          	//send config
    173                   IIC_Start();
   \                     ??selectInput_3: (+1)
   \   00000038   0x.... 0x....      BL       IIC_Start
    174          	 IIC_SendByte(0X90);
   \   0000003C   0x2090             MOVS     R0,#+144
   \   0000003E   0x.... 0x....      BL       IIC_SendByte
    175          	 IIC_SendByte(0X01);
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       IIC_SendByte
    176                   IIC_SendByte(0X42);
   \   00000048   0x2042             MOVS     R0,#+66
   \   0000004A   0x.... 0x....      BL       IIC_SendByte
    177                   IIC_SendByte(0X83);
   \   0000004E   0x2083             MOVS     R0,#+131
   \   00000050   0x.... 0x....      BL       IIC_SendByte
    178          	 IIC_Stop();
   \   00000054   0x.... 0x....      BL       IIC_Stop
    179          	 
    180          }
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
    181          

   \                                 In section .text, align 2, keep-with-next
    182          int16 getData()
    183          {
   \                     getData: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    184          	uint8 i2c_data[2];
    185          	//Request
    186                  IIC_Start();
   \   00000004   0x.... 0x....      BL       IIC_Start
    187          	IIC_SendByte(0X90);
   \   00000008   0x2090             MOVS     R0,#+144
   \   0000000A   0x.... 0x....      BL       IIC_SendByte
    188                  IIC_SendByte(0X00);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       IIC_SendByte
    189          	IIC_Stop();
   \   00000014   0x.... 0x....      BL       IIC_Stop
    190          	//Response
    191                  IIC_Start();
   \   00000018   0x.... 0x....      BL       IIC_Start
    192          	IIC_SendByte(0X91);
   \   0000001C   0x2091             MOVS     R0,#+145
   \   0000001E   0x.... 0x....      BL       IIC_SendByte
    193                  i2c_data[0] = IIC_ReadByte();
   \   00000022   0x.... 0x....      BL       IIC_ReadByte
   \   00000026   0xF88D 0x0000      STRB     R0,[SP, #+0]
    194          	i2c_data[1] = IIC_ReadByte();
   \   0000002A   0x.... 0x....      BL       IIC_ReadByte
   \   0000002E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    195                  int16 adc = i2c_data[0] <<  8 | i2c_data[1];
   \   00000032   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000036   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000003A   0xEA51 0x2400      ORRS     R4,R1,R0, LSL #+8
    196          	IIC_Stop();
   \   0000003E   0x.... 0x....      BL       IIC_Stop
    197          	return adc;
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000046   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    198          }
    199          
    200          

   \                                 In section .text, align 2, keep-with-next
    201          void write_mcp4725(unsigned int dac_value, unsigned int address)
    202          {       
   \                     write_mcp4725: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    203          	unsigned char temp_dac=0;
   \   00000006   0x2600             MOVS     R6,#+0
    204          	IIC_Start();	//Send the Start Bit
   \   00000008   0x.... 0x....      BL       IIC_Start
    205          	
    206          	IIC_SendByte(address);//C6 for A0=1 C4 for A0=0
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       IIC_SendByte
    207          	
    208          	temp_dac=(unsigned char)(dac_value>>8);//高位
   \   00000014   0x0A20             LSRS     R0,R4,#+8
   \   00000016   0x0006             MOVS     R6,R0
    209          	IIC_SendByte(temp_dac);
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       IIC_SendByte
    210          	
    211          	temp_dac=(unsigned char)dac_value;//低位
   \   00000020   0x0026             MOVS     R6,R4
    212          	IIC_SendByte(temp_dac);
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       IIC_SendByte
    213          	
    214          	IIC_Stop();	//Send the Stop condition
   \   0000002A   0x.... 0x....      BL       IIC_Stop
    215          	
    216          }
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
    217          

   \                                 In section .text, align 2, keep-with-next
    218          void GetAll(void)
    219          {    
   \                     GetAll: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    220            gyro_X = MPU6050_GetData(GYRO_XOUT_H);
   \   00000002   0x2043             MOVS     R0,#+67
   \   00000004   0x.... 0x....      BL       MPU6050_GetData
   \   00000008   0x....             LDR.N    R1,??DataTable4_2
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
    221            gyro_Y = MPU6050_GetData(GYRO_YOUT_H);
   \   0000000C   0x2045             MOVS     R0,#+69
   \   0000000E   0x.... 0x....      BL       MPU6050_GetData
   \   00000012   0x....             LDR.N    R1,??DataTable4_3
   \   00000014   0x8008             STRH     R0,[R1, #+0]
    222            gyro_Z = MPU6050_GetData(GYRO_ZOUT_H);
   \   00000016   0x2047             MOVS     R0,#+71
   \   00000018   0x.... 0x....      BL       MPU6050_GetData
   \   0000001C   0x....             LDR.N    R1,??DataTable4_4
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
    223            ACCE_X = MPU6050_GetData(ACCEL_XOUT_H);
   \   00000020   0x203B             MOVS     R0,#+59
   \   00000022   0x.... 0x....      BL       MPU6050_GetData
   \   00000026   0x....             LDR.N    R1,??DataTable4_5
   \   00000028   0x8008             STRH     R0,[R1, #+0]
    224            ACCE_Y = MPU6050_GetData(ACCEL_YOUT_H);
   \   0000002A   0x203D             MOVS     R0,#+61
   \   0000002C   0x.... 0x....      BL       MPU6050_GetData
   \   00000030   0x....             LDR.N    R1,??DataTable4_6
   \   00000032   0x8008             STRH     R0,[R1, #+0]
    225            ACCE_Z = MPU6050_GetData(ACCEL_ZOUT_H);
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0x.... 0x....      BL       MPU6050_GetData
   \   0000003A   0x....             LDR.N    R1,??DataTable4_7
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    226          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void get_mcu_ad(void)
    229          {
   \                     get_mcu_ad: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    230             //ch1 = LPLD_ADC_Get(ADC0,AD4);
    231             ch2 = LPLD_ADC_Get(ADC0,AD14);
   \   00000002   0x210E             MOVS     R1,#+14
   \   00000004   0x....             LDR.N    R0,??DataTable4_8  ;; 0x4003b000
   \   00000006   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000000A   0x....             LDR.N    R1,??DataTable4_9
   \   0000000C   0x8008             STRH     R0,[R1, #+0]
    232             //ch3 = LPLD_ADC_Get(ADC0,AD15);
    233          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    234          
    235          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    236          void main (void)
    237          {  
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    238            DisableInterrupts;
   \   00000002   0xB672             CPSID    I
    239            
    240            GPIO(PTA4,DIR_OUTPUT);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      BL       GPIO
    241            
    242            uart_init();
   \   0000000C   0x.... 0x....      BL       uart_init
    243            for(int i=1;i<=8;i++)
   \   00000010   0x2401             MOVS     R4,#+1
   \   00000012   0xE003             B.N      ??main_0
    244            init_gpio(i);
   \                     ??main_1: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0x.... 0x....      BL       init_gpio
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_0: (+1)
   \   0000001C   0x2C09             CMP      R4,#+9
   \   0000001E   0xDBF9             BLT.N    ??main_1
    245            OLED_Init();
   \   00000020   0x.... 0x....      BL       OLED_Init
    246            MPU6050_Inital();
   \   00000024   0x.... 0x....      BL       MPU6050_Inital
    247            //IIC_Init();
    248            IIC_DelayMs(100);
   \   00000028   0x2064             MOVS     R0,#+100
   \   0000002A   0x.... 0x....      BL       DelayMs
    249            qd1_init();
   \   0000002E   0x.... 0x....      BL       qd1_init
    250            qd2_init();
   \   00000032   0x.... 0x....      BL       qd2_init
    251            pwm_init();
   \   00000036   0x.... 0x....      BL       pwm_init
    252            adc_init();
   \   0000003A   0x.... 0x....      BL       adc_init
    253            //pit1_init();
    254            pit2_init();
   \   0000003E   0x.... 0x....      BL       pit2_init
    255            //初始化DAC
    256            //dac_init();
    257            
    258            EnableInterrupts;	
   \   00000042   0xB662             CPSIE    I
    259             
    260            LCD_CLS();
   \   00000044   0x.... 0x....      BL       LCD_CLS
    261            DelayMs(300); 
   \   00000048   0xF44F 0x7096      MOV      R0,#+300
   \   0000004C   0x.... 0x....      BL       DelayMs
    262            
    263            set_dmp();
   \   00000050   0x.... 0x....      BL       set_dmp
    264            //InitADS1115(); 
    265            //selectInput(0);
    266            DelayMs(100); 
   \   00000054   0x2064             MOVS     R0,#+100
   \   00000056   0x.... 0x....      BL       DelayMs
    267            
    268            //debug_mode2();
    269              
    270          
    271            
    272            while (1) 
    273            {
    274              US = 0;
   \                     ??main_2: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable4_10
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x6001             STR      R1,[R0, #+0]
    275              //IIC_Start();		
    276              //get_angle();
    277              
    278              //data_ad = getData();
    279              //temp = data_ad*4096/32767*4096/5000;
    280              
    281              //write_mcp4725(temp/2,SlaveAddress1);
    282              //temp = T;
    283              //mpu6050_getdata(G,X);
    284              //GetAll();
    285              
    286                 //gyro_Y = MPU6050_GetData(GYRO_YOUT_H);
    287                 //ACCE_X = MPU6050_GetData(ACCEL_XOUT_H); 
    288              get_mcu_ad();
   \   00000060   0x.... 0x....      BL       get_mcu_ad
    289              get_mcu_ad();
   \   00000064   0x.... 0x....      BL       get_mcu_ad
    290              Get_GA(ACCE_X,gyro_Y);
   \   00000068   0x....             LDR.N    R0,??DataTable4_3
   \   0000006A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000006E   0x.... 0x....      BL       __aeabi_i2f
   \   00000072   0x0001             MOVS     R1,R0
   \   00000074   0x000C             MOVS     R4,R1
   \   00000076   0x....             LDR.N    R0,??DataTable4_5
   \   00000078   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000007C   0x.... 0x....      BL       __aeabi_i2f
   \   00000080   0x0021             MOVS     R1,R4
   \   00000082   0x.... 0x....      BL       Get_GA
    291              Kalman_update(angle_phy,dangle_phy,&g_fCarAngle,&g_fCarAngle_d);
   \   00000086   0x....             LDR.N    R3,??DataTable4_11
   \   00000088   0x....             LDR.N    R2,??DataTable4_12
   \   0000008A   0x....             LDR.N    R0,??DataTable4_13
   \   0000008C   0x6801             LDR      R1,[R0, #+0]
   \   0000008E   0x....             LDR.N    R0,??DataTable4_14
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x.... 0x....      BL       Kalman_update
    292              
    293              
    294              //adcdac_convert = (int)((2079-ch2*4096/32767)/30+120);
    295              AngleControl(adcdac_convert);
   \   00000096   0x....             LDR.N    R0,??DataTable4_15
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x.... 0x....      BL       AngleControl
    296              //MotoOutput();
    297              US_display = US; //GET_IMU_DATA 2.934ms GET_GA 0.012ms and Kalman 0.074ms AngleControl 0.012ms 98.8mA
   \   0000009E   0x....             LDR.N    R0,??DataTable4_16
   \   000000A0   0x....             LDR.N    R1,??DataTable4_10
   \   000000A2   0x6809             LDR      R1,[R1, #+0]
   \   000000A4   0x6001             STR      R1,[R0, #+0]
    298                         //GET_ADC_DATA 0.963ms GET_DAC 0.510ms   
    299                         //get_mcu_ad 4us adcdac_convert 2us 99.7mA
    300          
    301              //get_mcu_ad();    
    302              LCD_CLS();   
   \   000000A6   0x.... 0x....      BL       LCD_CLS
    303              oledprintf(2,30,"haha:%3d",(int)US_display);
   \   000000AA   0x....             LDR.N    R0,??DataTable4_16
   \   000000AC   0x6803             LDR      R3,[R0, #+0]
   \   000000AE   0x....             LDR.N    R2,??DataTable4_17
   \   000000B0   0x211E             MOVS     R1,#+30
   \   000000B2   0x2002             MOVS     R0,#+2
   \   000000B4   0x.... 0x....      BL       oledprintf
    304              oledprintf(3,30,"haha:%3d",(int)US);
   \   000000B8   0x....             LDR.N    R0,??DataTable4_10
   \   000000BA   0x6803             LDR      R3,[R0, #+0]
   \   000000BC   0x....             LDR.N    R2,??DataTable4_17
   \   000000BE   0x211E             MOVS     R1,#+30
   \   000000C0   0x2003             MOVS     R0,#+3
   \   000000C2   0x.... 0x....      BL       oledprintf
   \   000000C6   0xE7C8             B.N      ??main_2
    305              //oledprintf(2,30,"haha:%3d",(int)angle_phy);
    306              //oledprintf(2,30,"haha:%3d",(int)ch2);
    307              //oledprintf(3,30,"haha:%3d",(int)g_fCarAngle);
    308              //oledprintf(4,30,"haha:%3d",(int)ACCE_Z);
    309              //oledprintf(5,30,"haha:%3d",(int)(adcdac_convert));
    310              //oledprintf(6,30,"haha:%3d",(int)(data_ad*4096/32767));
    311              //oledprintf(5,30,"haha:%3d",(int)gyro_Y);//US
    312              //oledprintf(6,30,"haha:%3d",(int)ACCE_X);  //T
    313              
    314              //US=0;
    315              //OutData[0]=(int)(angle_phy);
    316              //OutData[1]=(int)(gyro_Y);//ACCE_X;
    317              //OutData[2]=(int)(d_Pitch);
    318              //OutData[3]=(int)(g_fCarAngle);
    319              //OutPut_Data();
    320            }// end of while
    321          }
    322          
    323           /* 初始化DAC模块
    324           *
    325           */

   \                                 In section .text, align 2, keep-with-next
    326          void dac_init(void)
    327          {
   \                     dac_init: (+1)
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
    328            //在不使用DAC缓冲区、各种中断DMA的情况下
    329            //仅需初始化DAC通道即可
    330            dac_init_struct.DAC_Dacx = DAC0;
   \   00000002   0x....             LDR.N    R0,??DataTable4_18
   \   00000004   0x....             LDR.N    R1,??DataTable4_19  ;; 0x400cc000
   \   00000006   0x6001             STR      R1,[R0, #+0]
    331            LPLD_DAC_Init(dac_init_struct);
   \   00000008   0x....             LDR.N    R1,??DataTable4_18
   \   0000000A   0xB084             SUB      SP,SP,#+16
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x221C             MOVS     R2,#+28
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000014   0xBC0F             POP      {R0-R3}
   \   00000016   0x.... 0x....      BL       LPLD_DAC_Init
    332          }
   \   0000001A   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     data1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     data2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     gyro_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     gyro_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     gyro_Z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ACCE_X

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     ACCE_Y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     ACCE_Z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     ch2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     US

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     g_fCarAngle_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x........         DC32     g_fCarAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x........         DC32     dangle_phy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0x........         DC32     angle_phy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   0x........         DC32     adcdac_convert

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   0x........         DC32     US_display

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   0x........         DC32     `?<Constant "haha:%3d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   0x........         DC32     dac_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   0x400CC000         DC32     0x400cc000

   \                                 In section .rodata, align 4
   \                     `?<Constant "haha:%3d">`:
   \   00000000   0x68 0x61          DC8 "haha:%3d"
   \              0x68 0x61    
   \              0x3A 0x25    
   \              0x33 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    333          
    334          
    335          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GetAll
         8   -> MPU6050_GetData
       8   InitADS1115
         8   -> IIC_ReadByte
         8   -> IIC_SendByte
         8   -> IIC_Start
         8   -> IIC_Stop
      32   dac_init
        16   -> LPLD_DAC_Init
        32   -> __aeabi_memcpy4
      16   getData
        16   -> IIC_ReadByte
        16   -> IIC_SendByte
        16   -> IIC_Start
        16   -> IIC_Stop
       8   get_mcu_ad
         8   -> LPLD_ADC_Get
       8   main
         8   -> AngleControl
         8   -> DelayMs
         8   -> GPIO
         8   -> Get_GA
         8   -> Kalman_update
         8   -> LCD_CLS
         8   -> MPU6050_Inital
         8   -> OLED_Init
         8   -> __aeabi_i2f
         8   -> adc_init
         8   -> get_mcu_ad
         8   -> init_gpio
         8   -> oledprintf
         8   -> pit2_init
         8   -> pwm_init
         8   -> qd1_init
         8   -> qd2_init
         8   -> set_dmp
         8   -> uart_init
       8   selectInput
         8   -> IIC_SendByte
         8   -> IIC_Start
         8   -> IIC_Stop
      16   write_mcp4725
        16   -> IIC_SendByte
        16   -> IIC_Start
        16   -> IIC_Stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "haha:%3d">
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_18
       4  ??DataTable4_19
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       2  ACCE_X
       4  ACCE_X_k
       2  ACCE_Y
       4  ACCE_Y_k
       2  ACCE_Z
       4  ACCE_Z_k
       4  ANGLE_BIAS
       4  ANGLE_BIAS10
       4  Accelerometer
       4  CV_ACCE_OFFSET
       4  CV_GYRO_ZERO
      64  GetAll
       4  Gyro_Balance
       4  Gyro_Turn
      54  InitADS1115
       4  LE
      16  OutData
       4  Pitch
       4  Roll
       4  T
       4  T_start
       4  US
       4  US_display
       4  Yaw
       4  adcdac_convert
       4  angle_phy
       4  angle_pre
       2  ch1
       2  ch2
       2  ch3
       4  d_Pitch
      28  dac_init
      28  dac_init_struct
       4  dangle_phy
       2  data1
       2  data2
       2  data_ad
       4  dd_Accelerometer
       1  g_Car_Motor_Run
       4  g_fAngleControlOut
       4  g_fCarAngle
       4  g_fCarAngle_d
       4  g_fDirectionControlOut
       4  g_fGravityAngle
       4  g_fGyroscopeAngleIntegral
       4  g_fGyroscopeAngleSpeed
       4  g_fLeftMotorOut
       4  g_fRightMotorOut
      72  getData
      16  get_mcu_ad
       2  gyro_X
       4  gyro_X_k
       2  gyro_Y
       4  gyro_Y_k
       2  gyro_Z
       4  gyro_Z_k
       4  ii
       4  k1_obs
       4  k2_obs
       4  last_press_time
       4  last_turn_time
     200  main
      20  mystr
       4  obse
       4  p_Pitch
       2  qd_speed_l
       2  qd_speed_r
      90  selectInput
       1  status
       1  status_button
       1  status_knob
       4  t_stop
       1  temp_status
      48  write_mcp4725

 
 256 bytes in section .bss
  17 bytes in section .data
  12 bytes in section .rodata
 652 bytes in section .text
 
 652 bytes of CODE  memory
  12 bytes of CONST memory
 273 bytes of DATA  memory

Errors: none
Warnings: 2
